
STM32F0_AMT223-B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d28  08005d28  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d28  08005d28  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d28  08005d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08005da0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08005da0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d2  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  0003386a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  000361a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbbe  00000000  00000000  00038098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138b4  00000000  00000000  00055c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b90  00000000  00000000  0006950a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010b09a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004488  00000000  00000000  0010b0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0010f574  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0010f610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bbc 	.word	0x08005bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005bbc 	.word	0x08005bbc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_f2uiz>:
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	b510      	push	{r4, lr}
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	1c04      	adds	r4, r0, #0
 800023c:	f000 fee4 	bl	8001008 <__aeabi_fcmpge>
 8000240:	2800      	cmp	r0, #0
 8000242:	d103      	bne.n	800024c <__aeabi_f2uiz+0x18>
 8000244:	1c20      	adds	r0, r4, #0
 8000246:	f000 fae1 	bl	800080c <__aeabi_f2iz>
 800024a:	bd10      	pop	{r4, pc}
 800024c:	219e      	movs	r1, #158	; 0x9e
 800024e:	1c20      	adds	r0, r4, #0
 8000250:	05c9      	lsls	r1, r1, #23
 8000252:	f000 f92d 	bl	80004b0 <__aeabi_fsub>
 8000256:	f000 fad9 	bl	800080c <__aeabi_f2iz>
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	061b      	lsls	r3, r3, #24
 800025e:	469c      	mov	ip, r3
 8000260:	4460      	add	r0, ip
 8000262:	e7f2      	b.n	800024a <__aeabi_f2uiz+0x16>

08000264 <__aeabi_fmul>:
 8000264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000266:	464f      	mov	r7, r9
 8000268:	4646      	mov	r6, r8
 800026a:	46d6      	mov	lr, sl
 800026c:	0244      	lsls	r4, r0, #9
 800026e:	0045      	lsls	r5, r0, #1
 8000270:	b5c0      	push	{r6, r7, lr}
 8000272:	0a64      	lsrs	r4, r4, #9
 8000274:	1c0f      	adds	r7, r1, #0
 8000276:	0e2d      	lsrs	r5, r5, #24
 8000278:	0fc6      	lsrs	r6, r0, #31
 800027a:	2d00      	cmp	r5, #0
 800027c:	d100      	bne.n	8000280 <__aeabi_fmul+0x1c>
 800027e:	e08d      	b.n	800039c <__aeabi_fmul+0x138>
 8000280:	2dff      	cmp	r5, #255	; 0xff
 8000282:	d100      	bne.n	8000286 <__aeabi_fmul+0x22>
 8000284:	e092      	b.n	80003ac <__aeabi_fmul+0x148>
 8000286:	2300      	movs	r3, #0
 8000288:	2080      	movs	r0, #128	; 0x80
 800028a:	4699      	mov	r9, r3
 800028c:	469a      	mov	sl, r3
 800028e:	00e4      	lsls	r4, r4, #3
 8000290:	04c0      	lsls	r0, r0, #19
 8000292:	4304      	orrs	r4, r0
 8000294:	3d7f      	subs	r5, #127	; 0x7f
 8000296:	0278      	lsls	r0, r7, #9
 8000298:	0a43      	lsrs	r3, r0, #9
 800029a:	4698      	mov	r8, r3
 800029c:	007b      	lsls	r3, r7, #1
 800029e:	0e1b      	lsrs	r3, r3, #24
 80002a0:	0fff      	lsrs	r7, r7, #31
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fmul+0x44>
 80002a6:	e070      	b.n	800038a <__aeabi_fmul+0x126>
 80002a8:	2bff      	cmp	r3, #255	; 0xff
 80002aa:	d100      	bne.n	80002ae <__aeabi_fmul+0x4a>
 80002ac:	e086      	b.n	80003bc <__aeabi_fmul+0x158>
 80002ae:	4642      	mov	r2, r8
 80002b0:	00d0      	lsls	r0, r2, #3
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	3b7f      	subs	r3, #127	; 0x7f
 80002b6:	18ed      	adds	r5, r5, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	04d2      	lsls	r2, r2, #19
 80002bc:	4302      	orrs	r2, r0
 80002be:	4690      	mov	r8, r2
 80002c0:	469c      	mov	ip, r3
 80002c2:	0031      	movs	r1, r6
 80002c4:	464b      	mov	r3, r9
 80002c6:	4079      	eors	r1, r7
 80002c8:	1c68      	adds	r0, r5, #1
 80002ca:	2b0f      	cmp	r3, #15
 80002cc:	d81c      	bhi.n	8000308 <__aeabi_fmul+0xa4>
 80002ce:	4a76      	ldr	r2, [pc, #472]	; (80004a8 <__aeabi_fmul+0x244>)
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	58d3      	ldr	r3, [r2, r3]
 80002d4:	469f      	mov	pc, r3
 80002d6:	0039      	movs	r1, r7
 80002d8:	4644      	mov	r4, r8
 80002da:	46e2      	mov	sl, ip
 80002dc:	4653      	mov	r3, sl
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d00f      	beq.n	8000302 <__aeabi_fmul+0x9e>
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d100      	bne.n	80002e8 <__aeabi_fmul+0x84>
 80002e6:	e0d7      	b.n	8000498 <__aeabi_fmul+0x234>
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d137      	bne.n	800035c <__aeabi_fmul+0xf8>
 80002ec:	2000      	movs	r0, #0
 80002ee:	2400      	movs	r4, #0
 80002f0:	05c0      	lsls	r0, r0, #23
 80002f2:	4320      	orrs	r0, r4
 80002f4:	07c9      	lsls	r1, r1, #31
 80002f6:	4308      	orrs	r0, r1
 80002f8:	bce0      	pop	{r5, r6, r7}
 80002fa:	46ba      	mov	sl, r7
 80002fc:	46b1      	mov	r9, r6
 80002fe:	46a8      	mov	r8, r5
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000302:	20ff      	movs	r0, #255	; 0xff
 8000304:	2400      	movs	r4, #0
 8000306:	e7f3      	b.n	80002f0 <__aeabi_fmul+0x8c>
 8000308:	0c26      	lsrs	r6, r4, #16
 800030a:	0424      	lsls	r4, r4, #16
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	4644      	mov	r4, r8
 8000310:	0424      	lsls	r4, r4, #16
 8000312:	0c24      	lsrs	r4, r4, #16
 8000314:	4643      	mov	r3, r8
 8000316:	0027      	movs	r7, r4
 8000318:	0c1b      	lsrs	r3, r3, #16
 800031a:	4357      	muls	r7, r2
 800031c:	4374      	muls	r4, r6
 800031e:	435a      	muls	r2, r3
 8000320:	435e      	muls	r6, r3
 8000322:	1912      	adds	r2, r2, r4
 8000324:	0c3b      	lsrs	r3, r7, #16
 8000326:	189b      	adds	r3, r3, r2
 8000328:	429c      	cmp	r4, r3
 800032a:	d903      	bls.n	8000334 <__aeabi_fmul+0xd0>
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	0252      	lsls	r2, r2, #9
 8000330:	4694      	mov	ip, r2
 8000332:	4466      	add	r6, ip
 8000334:	043f      	lsls	r7, r7, #16
 8000336:	041a      	lsls	r2, r3, #16
 8000338:	0c3f      	lsrs	r7, r7, #16
 800033a:	19d2      	adds	r2, r2, r7
 800033c:	0194      	lsls	r4, r2, #6
 800033e:	1e67      	subs	r7, r4, #1
 8000340:	41bc      	sbcs	r4, r7
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	0e92      	lsrs	r2, r2, #26
 8000346:	199b      	adds	r3, r3, r6
 8000348:	4314      	orrs	r4, r2
 800034a:	019b      	lsls	r3, r3, #6
 800034c:	431c      	orrs	r4, r3
 800034e:	011b      	lsls	r3, r3, #4
 8000350:	d400      	bmi.n	8000354 <__aeabi_fmul+0xf0>
 8000352:	e09b      	b.n	800048c <__aeabi_fmul+0x228>
 8000354:	2301      	movs	r3, #1
 8000356:	0862      	lsrs	r2, r4, #1
 8000358:	401c      	ands	r4, r3
 800035a:	4314      	orrs	r4, r2
 800035c:	0002      	movs	r2, r0
 800035e:	327f      	adds	r2, #127	; 0x7f
 8000360:	2a00      	cmp	r2, #0
 8000362:	dd64      	ble.n	800042e <__aeabi_fmul+0x1ca>
 8000364:	0763      	lsls	r3, r4, #29
 8000366:	d004      	beq.n	8000372 <__aeabi_fmul+0x10e>
 8000368:	230f      	movs	r3, #15
 800036a:	4023      	ands	r3, r4
 800036c:	2b04      	cmp	r3, #4
 800036e:	d000      	beq.n	8000372 <__aeabi_fmul+0x10e>
 8000370:	3404      	adds	r4, #4
 8000372:	0123      	lsls	r3, r4, #4
 8000374:	d503      	bpl.n	800037e <__aeabi_fmul+0x11a>
 8000376:	0002      	movs	r2, r0
 8000378:	4b4c      	ldr	r3, [pc, #304]	; (80004ac <__aeabi_fmul+0x248>)
 800037a:	3280      	adds	r2, #128	; 0x80
 800037c:	401c      	ands	r4, r3
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	dcbf      	bgt.n	8000302 <__aeabi_fmul+0x9e>
 8000382:	01a4      	lsls	r4, r4, #6
 8000384:	0a64      	lsrs	r4, r4, #9
 8000386:	b2d0      	uxtb	r0, r2
 8000388:	e7b2      	b.n	80002f0 <__aeabi_fmul+0x8c>
 800038a:	4643      	mov	r3, r8
 800038c:	2b00      	cmp	r3, #0
 800038e:	d13d      	bne.n	800040c <__aeabi_fmul+0x1a8>
 8000390:	464a      	mov	r2, r9
 8000392:	3301      	adds	r3, #1
 8000394:	431a      	orrs	r2, r3
 8000396:	4691      	mov	r9, r2
 8000398:	469c      	mov	ip, r3
 800039a:	e792      	b.n	80002c2 <__aeabi_fmul+0x5e>
 800039c:	2c00      	cmp	r4, #0
 800039e:	d129      	bne.n	80003f4 <__aeabi_fmul+0x190>
 80003a0:	2304      	movs	r3, #4
 80003a2:	4699      	mov	r9, r3
 80003a4:	3b03      	subs	r3, #3
 80003a6:	2500      	movs	r5, #0
 80003a8:	469a      	mov	sl, r3
 80003aa:	e774      	b.n	8000296 <__aeabi_fmul+0x32>
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d11b      	bne.n	80003e8 <__aeabi_fmul+0x184>
 80003b0:	2308      	movs	r3, #8
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b06      	subs	r3, #6
 80003b6:	25ff      	movs	r5, #255	; 0xff
 80003b8:	469a      	mov	sl, r3
 80003ba:	e76c      	b.n	8000296 <__aeabi_fmul+0x32>
 80003bc:	4643      	mov	r3, r8
 80003be:	35ff      	adds	r5, #255	; 0xff
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d10b      	bne.n	80003dc <__aeabi_fmul+0x178>
 80003c4:	2302      	movs	r3, #2
 80003c6:	464a      	mov	r2, r9
 80003c8:	431a      	orrs	r2, r3
 80003ca:	4691      	mov	r9, r2
 80003cc:	469c      	mov	ip, r3
 80003ce:	e778      	b.n	80002c2 <__aeabi_fmul+0x5e>
 80003d0:	4653      	mov	r3, sl
 80003d2:	0031      	movs	r1, r6
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d000      	beq.n	80003da <__aeabi_fmul+0x176>
 80003d8:	e783      	b.n	80002e2 <__aeabi_fmul+0x7e>
 80003da:	e792      	b.n	8000302 <__aeabi_fmul+0x9e>
 80003dc:	2303      	movs	r3, #3
 80003de:	464a      	mov	r2, r9
 80003e0:	431a      	orrs	r2, r3
 80003e2:	4691      	mov	r9, r2
 80003e4:	469c      	mov	ip, r3
 80003e6:	e76c      	b.n	80002c2 <__aeabi_fmul+0x5e>
 80003e8:	230c      	movs	r3, #12
 80003ea:	4699      	mov	r9, r3
 80003ec:	3b09      	subs	r3, #9
 80003ee:	25ff      	movs	r5, #255	; 0xff
 80003f0:	469a      	mov	sl, r3
 80003f2:	e750      	b.n	8000296 <__aeabi_fmul+0x32>
 80003f4:	0020      	movs	r0, r4
 80003f6:	f000 fe11 	bl	800101c <__clzsi2>
 80003fa:	2576      	movs	r5, #118	; 0x76
 80003fc:	1f43      	subs	r3, r0, #5
 80003fe:	409c      	lsls	r4, r3
 8000400:	2300      	movs	r3, #0
 8000402:	426d      	negs	r5, r5
 8000404:	4699      	mov	r9, r3
 8000406:	469a      	mov	sl, r3
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	e744      	b.n	8000296 <__aeabi_fmul+0x32>
 800040c:	4640      	mov	r0, r8
 800040e:	f000 fe05 	bl	800101c <__clzsi2>
 8000412:	4642      	mov	r2, r8
 8000414:	1f43      	subs	r3, r0, #5
 8000416:	409a      	lsls	r2, r3
 8000418:	2300      	movs	r3, #0
 800041a:	1a2d      	subs	r5, r5, r0
 800041c:	4690      	mov	r8, r2
 800041e:	469c      	mov	ip, r3
 8000420:	3d76      	subs	r5, #118	; 0x76
 8000422:	e74e      	b.n	80002c2 <__aeabi_fmul+0x5e>
 8000424:	2480      	movs	r4, #128	; 0x80
 8000426:	2100      	movs	r1, #0
 8000428:	20ff      	movs	r0, #255	; 0xff
 800042a:	03e4      	lsls	r4, r4, #15
 800042c:	e760      	b.n	80002f0 <__aeabi_fmul+0x8c>
 800042e:	2301      	movs	r3, #1
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2b1b      	cmp	r3, #27
 8000434:	dd00      	ble.n	8000438 <__aeabi_fmul+0x1d4>
 8000436:	e759      	b.n	80002ec <__aeabi_fmul+0x88>
 8000438:	0022      	movs	r2, r4
 800043a:	309e      	adds	r0, #158	; 0x9e
 800043c:	40da      	lsrs	r2, r3
 800043e:	4084      	lsls	r4, r0
 8000440:	0013      	movs	r3, r2
 8000442:	1e62      	subs	r2, r4, #1
 8000444:	4194      	sbcs	r4, r2
 8000446:	431c      	orrs	r4, r3
 8000448:	0763      	lsls	r3, r4, #29
 800044a:	d004      	beq.n	8000456 <__aeabi_fmul+0x1f2>
 800044c:	230f      	movs	r3, #15
 800044e:	4023      	ands	r3, r4
 8000450:	2b04      	cmp	r3, #4
 8000452:	d000      	beq.n	8000456 <__aeabi_fmul+0x1f2>
 8000454:	3404      	adds	r4, #4
 8000456:	0163      	lsls	r3, r4, #5
 8000458:	d51a      	bpl.n	8000490 <__aeabi_fmul+0x22c>
 800045a:	2001      	movs	r0, #1
 800045c:	2400      	movs	r4, #0
 800045e:	e747      	b.n	80002f0 <__aeabi_fmul+0x8c>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	03c0      	lsls	r0, r0, #15
 8000464:	4204      	tst	r4, r0
 8000466:	d009      	beq.n	800047c <__aeabi_fmul+0x218>
 8000468:	4643      	mov	r3, r8
 800046a:	4203      	tst	r3, r0
 800046c:	d106      	bne.n	800047c <__aeabi_fmul+0x218>
 800046e:	4644      	mov	r4, r8
 8000470:	4304      	orrs	r4, r0
 8000472:	0264      	lsls	r4, r4, #9
 8000474:	0039      	movs	r1, r7
 8000476:	20ff      	movs	r0, #255	; 0xff
 8000478:	0a64      	lsrs	r4, r4, #9
 800047a:	e739      	b.n	80002f0 <__aeabi_fmul+0x8c>
 800047c:	2080      	movs	r0, #128	; 0x80
 800047e:	03c0      	lsls	r0, r0, #15
 8000480:	4304      	orrs	r4, r0
 8000482:	0264      	lsls	r4, r4, #9
 8000484:	0031      	movs	r1, r6
 8000486:	20ff      	movs	r0, #255	; 0xff
 8000488:	0a64      	lsrs	r4, r4, #9
 800048a:	e731      	b.n	80002f0 <__aeabi_fmul+0x8c>
 800048c:	0028      	movs	r0, r5
 800048e:	e765      	b.n	800035c <__aeabi_fmul+0xf8>
 8000490:	01a4      	lsls	r4, r4, #6
 8000492:	2000      	movs	r0, #0
 8000494:	0a64      	lsrs	r4, r4, #9
 8000496:	e72b      	b.n	80002f0 <__aeabi_fmul+0x8c>
 8000498:	2080      	movs	r0, #128	; 0x80
 800049a:	03c0      	lsls	r0, r0, #15
 800049c:	4304      	orrs	r4, r0
 800049e:	0264      	lsls	r4, r4, #9
 80004a0:	20ff      	movs	r0, #255	; 0xff
 80004a2:	0a64      	lsrs	r4, r4, #9
 80004a4:	e724      	b.n	80002f0 <__aeabi_fmul+0x8c>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	08005bf8 	.word	0x08005bf8
 80004ac:	f7ffffff 	.word	0xf7ffffff

080004b0 <__aeabi_fsub>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	46ce      	mov	lr, r9
 80004b4:	4647      	mov	r7, r8
 80004b6:	0243      	lsls	r3, r0, #9
 80004b8:	0a5b      	lsrs	r3, r3, #9
 80004ba:	024e      	lsls	r6, r1, #9
 80004bc:	00da      	lsls	r2, r3, #3
 80004be:	4694      	mov	ip, r2
 80004c0:	0a72      	lsrs	r2, r6, #9
 80004c2:	4691      	mov	r9, r2
 80004c4:	0045      	lsls	r5, r0, #1
 80004c6:	004a      	lsls	r2, r1, #1
 80004c8:	b580      	push	{r7, lr}
 80004ca:	0e2d      	lsrs	r5, r5, #24
 80004cc:	001f      	movs	r7, r3
 80004ce:	0fc4      	lsrs	r4, r0, #31
 80004d0:	0e12      	lsrs	r2, r2, #24
 80004d2:	0fc9      	lsrs	r1, r1, #31
 80004d4:	09b6      	lsrs	r6, r6, #6
 80004d6:	2aff      	cmp	r2, #255	; 0xff
 80004d8:	d05b      	beq.n	8000592 <__aeabi_fsub+0xe2>
 80004da:	2001      	movs	r0, #1
 80004dc:	4041      	eors	r1, r0
 80004de:	428c      	cmp	r4, r1
 80004e0:	d039      	beq.n	8000556 <__aeabi_fsub+0xa6>
 80004e2:	1aa8      	subs	r0, r5, r2
 80004e4:	2800      	cmp	r0, #0
 80004e6:	dd5a      	ble.n	800059e <__aeabi_fsub+0xee>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d06a      	beq.n	80005c2 <__aeabi_fsub+0x112>
 80004ec:	2dff      	cmp	r5, #255	; 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fsub+0x42>
 80004f0:	e0d9      	b.n	80006a6 <__aeabi_fsub+0x1f6>
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4316      	orrs	r6, r2
 80004f8:	281b      	cmp	r0, #27
 80004fa:	dc00      	bgt.n	80004fe <__aeabi_fsub+0x4e>
 80004fc:	e0e9      	b.n	80006d2 <__aeabi_fsub+0x222>
 80004fe:	2001      	movs	r0, #1
 8000500:	4663      	mov	r3, ip
 8000502:	1a18      	subs	r0, r3, r0
 8000504:	0143      	lsls	r3, r0, #5
 8000506:	d400      	bmi.n	800050a <__aeabi_fsub+0x5a>
 8000508:	e0b4      	b.n	8000674 <__aeabi_fsub+0x1c4>
 800050a:	0180      	lsls	r0, r0, #6
 800050c:	0987      	lsrs	r7, r0, #6
 800050e:	0038      	movs	r0, r7
 8000510:	f000 fd84 	bl	800101c <__clzsi2>
 8000514:	3805      	subs	r0, #5
 8000516:	4087      	lsls	r7, r0
 8000518:	4285      	cmp	r5, r0
 800051a:	dc00      	bgt.n	800051e <__aeabi_fsub+0x6e>
 800051c:	e0cc      	b.n	80006b8 <__aeabi_fsub+0x208>
 800051e:	1a2d      	subs	r5, r5, r0
 8000520:	48b5      	ldr	r0, [pc, #724]	; (80007f8 <__aeabi_fsub+0x348>)
 8000522:	4038      	ands	r0, r7
 8000524:	0743      	lsls	r3, r0, #29
 8000526:	d004      	beq.n	8000532 <__aeabi_fsub+0x82>
 8000528:	230f      	movs	r3, #15
 800052a:	4003      	ands	r3, r0
 800052c:	2b04      	cmp	r3, #4
 800052e:	d000      	beq.n	8000532 <__aeabi_fsub+0x82>
 8000530:	3004      	adds	r0, #4
 8000532:	0143      	lsls	r3, r0, #5
 8000534:	d400      	bmi.n	8000538 <__aeabi_fsub+0x88>
 8000536:	e0a0      	b.n	800067a <__aeabi_fsub+0x1ca>
 8000538:	1c6a      	adds	r2, r5, #1
 800053a:	2dfe      	cmp	r5, #254	; 0xfe
 800053c:	d100      	bne.n	8000540 <__aeabi_fsub+0x90>
 800053e:	e08d      	b.n	800065c <__aeabi_fsub+0x1ac>
 8000540:	0180      	lsls	r0, r0, #6
 8000542:	0a47      	lsrs	r7, r0, #9
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	05d0      	lsls	r0, r2, #23
 8000548:	4338      	orrs	r0, r7
 800054a:	07e4      	lsls	r4, r4, #31
 800054c:	4320      	orrs	r0, r4
 800054e:	bcc0      	pop	{r6, r7}
 8000550:	46b9      	mov	r9, r7
 8000552:	46b0      	mov	r8, r6
 8000554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000556:	1aa8      	subs	r0, r5, r2
 8000558:	4680      	mov	r8, r0
 800055a:	2800      	cmp	r0, #0
 800055c:	dd45      	ble.n	80005ea <__aeabi_fsub+0x13a>
 800055e:	2a00      	cmp	r2, #0
 8000560:	d070      	beq.n	8000644 <__aeabi_fsub+0x194>
 8000562:	2dff      	cmp	r5, #255	; 0xff
 8000564:	d100      	bne.n	8000568 <__aeabi_fsub+0xb8>
 8000566:	e09e      	b.n	80006a6 <__aeabi_fsub+0x1f6>
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	04db      	lsls	r3, r3, #19
 800056c:	431e      	orrs	r6, r3
 800056e:	4643      	mov	r3, r8
 8000570:	2b1b      	cmp	r3, #27
 8000572:	dc00      	bgt.n	8000576 <__aeabi_fsub+0xc6>
 8000574:	e0d2      	b.n	800071c <__aeabi_fsub+0x26c>
 8000576:	2001      	movs	r0, #1
 8000578:	4460      	add	r0, ip
 800057a:	0143      	lsls	r3, r0, #5
 800057c:	d57a      	bpl.n	8000674 <__aeabi_fsub+0x1c4>
 800057e:	3501      	adds	r5, #1
 8000580:	2dff      	cmp	r5, #255	; 0xff
 8000582:	d06b      	beq.n	800065c <__aeabi_fsub+0x1ac>
 8000584:	2301      	movs	r3, #1
 8000586:	4a9d      	ldr	r2, [pc, #628]	; (80007fc <__aeabi_fsub+0x34c>)
 8000588:	4003      	ands	r3, r0
 800058a:	0840      	lsrs	r0, r0, #1
 800058c:	4010      	ands	r0, r2
 800058e:	4318      	orrs	r0, r3
 8000590:	e7c8      	b.n	8000524 <__aeabi_fsub+0x74>
 8000592:	2e00      	cmp	r6, #0
 8000594:	d020      	beq.n	80005d8 <__aeabi_fsub+0x128>
 8000596:	428c      	cmp	r4, r1
 8000598:	d023      	beq.n	80005e2 <__aeabi_fsub+0x132>
 800059a:	0028      	movs	r0, r5
 800059c:	38ff      	subs	r0, #255	; 0xff
 800059e:	2800      	cmp	r0, #0
 80005a0:	d039      	beq.n	8000616 <__aeabi_fsub+0x166>
 80005a2:	1b57      	subs	r7, r2, r5
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_fsub+0xfa>
 80005a8:	e09d      	b.n	80006e6 <__aeabi_fsub+0x236>
 80005aa:	4663      	mov	r3, ip
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fsub+0x102>
 80005b0:	e0db      	b.n	800076a <__aeabi_fsub+0x2ba>
 80005b2:	1e7b      	subs	r3, r7, #1
 80005b4:	2f01      	cmp	r7, #1
 80005b6:	d100      	bne.n	80005ba <__aeabi_fsub+0x10a>
 80005b8:	e10d      	b.n	80007d6 <__aeabi_fsub+0x326>
 80005ba:	2fff      	cmp	r7, #255	; 0xff
 80005bc:	d071      	beq.n	80006a2 <__aeabi_fsub+0x1f2>
 80005be:	001f      	movs	r7, r3
 80005c0:	e098      	b.n	80006f4 <__aeabi_fsub+0x244>
 80005c2:	2e00      	cmp	r6, #0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fsub+0x118>
 80005c6:	e0a7      	b.n	8000718 <__aeabi_fsub+0x268>
 80005c8:	1e42      	subs	r2, r0, #1
 80005ca:	2801      	cmp	r0, #1
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fsub+0x120>
 80005ce:	e0e6      	b.n	800079e <__aeabi_fsub+0x2ee>
 80005d0:	28ff      	cmp	r0, #255	; 0xff
 80005d2:	d068      	beq.n	80006a6 <__aeabi_fsub+0x1f6>
 80005d4:	0010      	movs	r0, r2
 80005d6:	e78f      	b.n	80004f8 <__aeabi_fsub+0x48>
 80005d8:	2001      	movs	r0, #1
 80005da:	4041      	eors	r1, r0
 80005dc:	42a1      	cmp	r1, r4
 80005de:	d000      	beq.n	80005e2 <__aeabi_fsub+0x132>
 80005e0:	e77f      	b.n	80004e2 <__aeabi_fsub+0x32>
 80005e2:	20ff      	movs	r0, #255	; 0xff
 80005e4:	4240      	negs	r0, r0
 80005e6:	4680      	mov	r8, r0
 80005e8:	44a8      	add	r8, r5
 80005ea:	4640      	mov	r0, r8
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d038      	beq.n	8000662 <__aeabi_fsub+0x1b2>
 80005f0:	1b51      	subs	r1, r2, r5
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fsub+0x148>
 80005f6:	e0ae      	b.n	8000756 <__aeabi_fsub+0x2a6>
 80005f8:	2aff      	cmp	r2, #255	; 0xff
 80005fa:	d100      	bne.n	80005fe <__aeabi_fsub+0x14e>
 80005fc:	e0df      	b.n	80007be <__aeabi_fsub+0x30e>
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	4660      	mov	r0, ip
 8000602:	04db      	lsls	r3, r3, #19
 8000604:	4318      	orrs	r0, r3
 8000606:	4684      	mov	ip, r0
 8000608:	291b      	cmp	r1, #27
 800060a:	dc00      	bgt.n	800060e <__aeabi_fsub+0x15e>
 800060c:	e0d9      	b.n	80007c2 <__aeabi_fsub+0x312>
 800060e:	2001      	movs	r0, #1
 8000610:	0015      	movs	r5, r2
 8000612:	1980      	adds	r0, r0, r6
 8000614:	e7b1      	b.n	800057a <__aeabi_fsub+0xca>
 8000616:	20fe      	movs	r0, #254	; 0xfe
 8000618:	1c6a      	adds	r2, r5, #1
 800061a:	4210      	tst	r0, r2
 800061c:	d171      	bne.n	8000702 <__aeabi_fsub+0x252>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_fsub+0x174>
 8000622:	e0a6      	b.n	8000772 <__aeabi_fsub+0x2c2>
 8000624:	4663      	mov	r3, ip
 8000626:	2b00      	cmp	r3, #0
 8000628:	d100      	bne.n	800062c <__aeabi_fsub+0x17c>
 800062a:	e0d9      	b.n	80007e0 <__aeabi_fsub+0x330>
 800062c:	2200      	movs	r2, #0
 800062e:	2e00      	cmp	r6, #0
 8000630:	d100      	bne.n	8000634 <__aeabi_fsub+0x184>
 8000632:	e788      	b.n	8000546 <__aeabi_fsub+0x96>
 8000634:	1b98      	subs	r0, r3, r6
 8000636:	0143      	lsls	r3, r0, #5
 8000638:	d400      	bmi.n	800063c <__aeabi_fsub+0x18c>
 800063a:	e0e1      	b.n	8000800 <__aeabi_fsub+0x350>
 800063c:	4663      	mov	r3, ip
 800063e:	000c      	movs	r4, r1
 8000640:	1af0      	subs	r0, r6, r3
 8000642:	e76f      	b.n	8000524 <__aeabi_fsub+0x74>
 8000644:	2e00      	cmp	r6, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fsub+0x19a>
 8000648:	e0b7      	b.n	80007ba <__aeabi_fsub+0x30a>
 800064a:	0002      	movs	r2, r0
 800064c:	3a01      	subs	r2, #1
 800064e:	2801      	cmp	r0, #1
 8000650:	d100      	bne.n	8000654 <__aeabi_fsub+0x1a4>
 8000652:	e09c      	b.n	800078e <__aeabi_fsub+0x2de>
 8000654:	28ff      	cmp	r0, #255	; 0xff
 8000656:	d026      	beq.n	80006a6 <__aeabi_fsub+0x1f6>
 8000658:	4690      	mov	r8, r2
 800065a:	e788      	b.n	800056e <__aeabi_fsub+0xbe>
 800065c:	22ff      	movs	r2, #255	; 0xff
 800065e:	2700      	movs	r7, #0
 8000660:	e771      	b.n	8000546 <__aeabi_fsub+0x96>
 8000662:	20fe      	movs	r0, #254	; 0xfe
 8000664:	1c6a      	adds	r2, r5, #1
 8000666:	4210      	tst	r0, r2
 8000668:	d064      	beq.n	8000734 <__aeabi_fsub+0x284>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d0f6      	beq.n	800065c <__aeabi_fsub+0x1ac>
 800066e:	0015      	movs	r5, r2
 8000670:	4466      	add	r6, ip
 8000672:	0870      	lsrs	r0, r6, #1
 8000674:	0743      	lsls	r3, r0, #29
 8000676:	d000      	beq.n	800067a <__aeabi_fsub+0x1ca>
 8000678:	e756      	b.n	8000528 <__aeabi_fsub+0x78>
 800067a:	08c3      	lsrs	r3, r0, #3
 800067c:	2dff      	cmp	r5, #255	; 0xff
 800067e:	d012      	beq.n	80006a6 <__aeabi_fsub+0x1f6>
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	0a5f      	lsrs	r7, r3, #9
 8000684:	b2ea      	uxtb	r2, r5
 8000686:	e75e      	b.n	8000546 <__aeabi_fsub+0x96>
 8000688:	4662      	mov	r2, ip
 800068a:	2a00      	cmp	r2, #0
 800068c:	d100      	bne.n	8000690 <__aeabi_fsub+0x1e0>
 800068e:	e096      	b.n	80007be <__aeabi_fsub+0x30e>
 8000690:	2e00      	cmp	r6, #0
 8000692:	d008      	beq.n	80006a6 <__aeabi_fsub+0x1f6>
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	03d2      	lsls	r2, r2, #15
 8000698:	4213      	tst	r3, r2
 800069a:	d004      	beq.n	80006a6 <__aeabi_fsub+0x1f6>
 800069c:	4648      	mov	r0, r9
 800069e:	4210      	tst	r0, r2
 80006a0:	d101      	bne.n	80006a6 <__aeabi_fsub+0x1f6>
 80006a2:	000c      	movs	r4, r1
 80006a4:	464b      	mov	r3, r9
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0d8      	beq.n	800065c <__aeabi_fsub+0x1ac>
 80006aa:	2780      	movs	r7, #128	; 0x80
 80006ac:	03ff      	lsls	r7, r7, #15
 80006ae:	431f      	orrs	r7, r3
 80006b0:	027f      	lsls	r7, r7, #9
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	0a7f      	lsrs	r7, r7, #9
 80006b6:	e746      	b.n	8000546 <__aeabi_fsub+0x96>
 80006b8:	2320      	movs	r3, #32
 80006ba:	003a      	movs	r2, r7
 80006bc:	1b45      	subs	r5, r0, r5
 80006be:	0038      	movs	r0, r7
 80006c0:	3501      	adds	r5, #1
 80006c2:	40ea      	lsrs	r2, r5
 80006c4:	1b5d      	subs	r5, r3, r5
 80006c6:	40a8      	lsls	r0, r5
 80006c8:	1e43      	subs	r3, r0, #1
 80006ca:	4198      	sbcs	r0, r3
 80006cc:	2500      	movs	r5, #0
 80006ce:	4310      	orrs	r0, r2
 80006d0:	e728      	b.n	8000524 <__aeabi_fsub+0x74>
 80006d2:	2320      	movs	r3, #32
 80006d4:	1a1b      	subs	r3, r3, r0
 80006d6:	0032      	movs	r2, r6
 80006d8:	409e      	lsls	r6, r3
 80006da:	40c2      	lsrs	r2, r0
 80006dc:	0030      	movs	r0, r6
 80006de:	1e43      	subs	r3, r0, #1
 80006e0:	4198      	sbcs	r0, r3
 80006e2:	4310      	orrs	r0, r2
 80006e4:	e70c      	b.n	8000500 <__aeabi_fsub+0x50>
 80006e6:	2aff      	cmp	r2, #255	; 0xff
 80006e8:	d0db      	beq.n	80006a2 <__aeabi_fsub+0x1f2>
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	4660      	mov	r0, ip
 80006ee:	04db      	lsls	r3, r3, #19
 80006f0:	4318      	orrs	r0, r3
 80006f2:	4684      	mov	ip, r0
 80006f4:	2f1b      	cmp	r7, #27
 80006f6:	dd56      	ble.n	80007a6 <__aeabi_fsub+0x2f6>
 80006f8:	2001      	movs	r0, #1
 80006fa:	000c      	movs	r4, r1
 80006fc:	0015      	movs	r5, r2
 80006fe:	1a30      	subs	r0, r6, r0
 8000700:	e700      	b.n	8000504 <__aeabi_fsub+0x54>
 8000702:	4663      	mov	r3, ip
 8000704:	1b9f      	subs	r7, r3, r6
 8000706:	017b      	lsls	r3, r7, #5
 8000708:	d43d      	bmi.n	8000786 <__aeabi_fsub+0x2d6>
 800070a:	2f00      	cmp	r7, #0
 800070c:	d000      	beq.n	8000710 <__aeabi_fsub+0x260>
 800070e:	e6fe      	b.n	800050e <__aeabi_fsub+0x5e>
 8000710:	2400      	movs	r4, #0
 8000712:	2200      	movs	r2, #0
 8000714:	2700      	movs	r7, #0
 8000716:	e716      	b.n	8000546 <__aeabi_fsub+0x96>
 8000718:	0005      	movs	r5, r0
 800071a:	e7af      	b.n	800067c <__aeabi_fsub+0x1cc>
 800071c:	0032      	movs	r2, r6
 800071e:	4643      	mov	r3, r8
 8000720:	4641      	mov	r1, r8
 8000722:	40da      	lsrs	r2, r3
 8000724:	2320      	movs	r3, #32
 8000726:	1a5b      	subs	r3, r3, r1
 8000728:	409e      	lsls	r6, r3
 800072a:	0030      	movs	r0, r6
 800072c:	1e43      	subs	r3, r0, #1
 800072e:	4198      	sbcs	r0, r3
 8000730:	4310      	orrs	r0, r2
 8000732:	e721      	b.n	8000578 <__aeabi_fsub+0xc8>
 8000734:	2d00      	cmp	r5, #0
 8000736:	d1a7      	bne.n	8000688 <__aeabi_fsub+0x1d8>
 8000738:	4663      	mov	r3, ip
 800073a:	2b00      	cmp	r3, #0
 800073c:	d059      	beq.n	80007f2 <__aeabi_fsub+0x342>
 800073e:	2200      	movs	r2, #0
 8000740:	2e00      	cmp	r6, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_fsub+0x296>
 8000744:	e6ff      	b.n	8000546 <__aeabi_fsub+0x96>
 8000746:	0030      	movs	r0, r6
 8000748:	4460      	add	r0, ip
 800074a:	0143      	lsls	r3, r0, #5
 800074c:	d592      	bpl.n	8000674 <__aeabi_fsub+0x1c4>
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <__aeabi_fsub+0x348>)
 8000750:	3501      	adds	r5, #1
 8000752:	4018      	ands	r0, r3
 8000754:	e78e      	b.n	8000674 <__aeabi_fsub+0x1c4>
 8000756:	4663      	mov	r3, ip
 8000758:	2b00      	cmp	r3, #0
 800075a:	d047      	beq.n	80007ec <__aeabi_fsub+0x33c>
 800075c:	1e4b      	subs	r3, r1, #1
 800075e:	2901      	cmp	r1, #1
 8000760:	d015      	beq.n	800078e <__aeabi_fsub+0x2de>
 8000762:	29ff      	cmp	r1, #255	; 0xff
 8000764:	d02b      	beq.n	80007be <__aeabi_fsub+0x30e>
 8000766:	0019      	movs	r1, r3
 8000768:	e74e      	b.n	8000608 <__aeabi_fsub+0x158>
 800076a:	000c      	movs	r4, r1
 800076c:	464b      	mov	r3, r9
 800076e:	003d      	movs	r5, r7
 8000770:	e784      	b.n	800067c <__aeabi_fsub+0x1cc>
 8000772:	4662      	mov	r2, ip
 8000774:	2a00      	cmp	r2, #0
 8000776:	d18b      	bne.n	8000690 <__aeabi_fsub+0x1e0>
 8000778:	2e00      	cmp	r6, #0
 800077a:	d192      	bne.n	80006a2 <__aeabi_fsub+0x1f2>
 800077c:	2780      	movs	r7, #128	; 0x80
 800077e:	2400      	movs	r4, #0
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	03ff      	lsls	r7, r7, #15
 8000784:	e6df      	b.n	8000546 <__aeabi_fsub+0x96>
 8000786:	4663      	mov	r3, ip
 8000788:	000c      	movs	r4, r1
 800078a:	1af7      	subs	r7, r6, r3
 800078c:	e6bf      	b.n	800050e <__aeabi_fsub+0x5e>
 800078e:	0030      	movs	r0, r6
 8000790:	4460      	add	r0, ip
 8000792:	2501      	movs	r5, #1
 8000794:	0143      	lsls	r3, r0, #5
 8000796:	d400      	bmi.n	800079a <__aeabi_fsub+0x2ea>
 8000798:	e76c      	b.n	8000674 <__aeabi_fsub+0x1c4>
 800079a:	2502      	movs	r5, #2
 800079c:	e6f2      	b.n	8000584 <__aeabi_fsub+0xd4>
 800079e:	4663      	mov	r3, ip
 80007a0:	2501      	movs	r5, #1
 80007a2:	1b98      	subs	r0, r3, r6
 80007a4:	e6ae      	b.n	8000504 <__aeabi_fsub+0x54>
 80007a6:	2320      	movs	r3, #32
 80007a8:	4664      	mov	r4, ip
 80007aa:	4660      	mov	r0, ip
 80007ac:	40fc      	lsrs	r4, r7
 80007ae:	1bdf      	subs	r7, r3, r7
 80007b0:	40b8      	lsls	r0, r7
 80007b2:	1e43      	subs	r3, r0, #1
 80007b4:	4198      	sbcs	r0, r3
 80007b6:	4320      	orrs	r0, r4
 80007b8:	e79f      	b.n	80006fa <__aeabi_fsub+0x24a>
 80007ba:	0005      	movs	r5, r0
 80007bc:	e75e      	b.n	800067c <__aeabi_fsub+0x1cc>
 80007be:	464b      	mov	r3, r9
 80007c0:	e771      	b.n	80006a6 <__aeabi_fsub+0x1f6>
 80007c2:	2320      	movs	r3, #32
 80007c4:	4665      	mov	r5, ip
 80007c6:	4660      	mov	r0, ip
 80007c8:	40cd      	lsrs	r5, r1
 80007ca:	1a59      	subs	r1, r3, r1
 80007cc:	4088      	lsls	r0, r1
 80007ce:	1e43      	subs	r3, r0, #1
 80007d0:	4198      	sbcs	r0, r3
 80007d2:	4328      	orrs	r0, r5
 80007d4:	e71c      	b.n	8000610 <__aeabi_fsub+0x160>
 80007d6:	4663      	mov	r3, ip
 80007d8:	000c      	movs	r4, r1
 80007da:	2501      	movs	r5, #1
 80007dc:	1af0      	subs	r0, r6, r3
 80007de:	e691      	b.n	8000504 <__aeabi_fsub+0x54>
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d095      	beq.n	8000710 <__aeabi_fsub+0x260>
 80007e4:	000c      	movs	r4, r1
 80007e6:	464f      	mov	r7, r9
 80007e8:	2200      	movs	r2, #0
 80007ea:	e6ac      	b.n	8000546 <__aeabi_fsub+0x96>
 80007ec:	464b      	mov	r3, r9
 80007ee:	000d      	movs	r5, r1
 80007f0:	e744      	b.n	800067c <__aeabi_fsub+0x1cc>
 80007f2:	464f      	mov	r7, r9
 80007f4:	2200      	movs	r2, #0
 80007f6:	e6a6      	b.n	8000546 <__aeabi_fsub+0x96>
 80007f8:	fbffffff 	.word	0xfbffffff
 80007fc:	7dffffff 	.word	0x7dffffff
 8000800:	2800      	cmp	r0, #0
 8000802:	d000      	beq.n	8000806 <__aeabi_fsub+0x356>
 8000804:	e736      	b.n	8000674 <__aeabi_fsub+0x1c4>
 8000806:	2400      	movs	r4, #0
 8000808:	2700      	movs	r7, #0
 800080a:	e69c      	b.n	8000546 <__aeabi_fsub+0x96>

0800080c <__aeabi_f2iz>:
 800080c:	0241      	lsls	r1, r0, #9
 800080e:	0042      	lsls	r2, r0, #1
 8000810:	0fc3      	lsrs	r3, r0, #31
 8000812:	0a49      	lsrs	r1, r1, #9
 8000814:	2000      	movs	r0, #0
 8000816:	0e12      	lsrs	r2, r2, #24
 8000818:	2a7e      	cmp	r2, #126	; 0x7e
 800081a:	dd03      	ble.n	8000824 <__aeabi_f2iz+0x18>
 800081c:	2a9d      	cmp	r2, #157	; 0x9d
 800081e:	dd02      	ble.n	8000826 <__aeabi_f2iz+0x1a>
 8000820:	4a09      	ldr	r2, [pc, #36]	; (8000848 <__aeabi_f2iz+0x3c>)
 8000822:	1898      	adds	r0, r3, r2
 8000824:	4770      	bx	lr
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	0400      	lsls	r0, r0, #16
 800082a:	4301      	orrs	r1, r0
 800082c:	2a95      	cmp	r2, #149	; 0x95
 800082e:	dc07      	bgt.n	8000840 <__aeabi_f2iz+0x34>
 8000830:	2096      	movs	r0, #150	; 0x96
 8000832:	1a82      	subs	r2, r0, r2
 8000834:	40d1      	lsrs	r1, r2
 8000836:	4248      	negs	r0, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f3      	bne.n	8000824 <__aeabi_f2iz+0x18>
 800083c:	0008      	movs	r0, r1
 800083e:	e7f1      	b.n	8000824 <__aeabi_f2iz+0x18>
 8000840:	3a96      	subs	r2, #150	; 0x96
 8000842:	4091      	lsls	r1, r2
 8000844:	e7f7      	b.n	8000836 <__aeabi_f2iz+0x2a>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	7fffffff 	.word	0x7fffffff

0800084c <__aeabi_ddiv>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	4657      	mov	r7, sl
 8000850:	464e      	mov	r6, r9
 8000852:	4645      	mov	r5, r8
 8000854:	46de      	mov	lr, fp
 8000856:	b5e0      	push	{r5, r6, r7, lr}
 8000858:	4681      	mov	r9, r0
 800085a:	0005      	movs	r5, r0
 800085c:	030c      	lsls	r4, r1, #12
 800085e:	0048      	lsls	r0, r1, #1
 8000860:	4692      	mov	sl, r2
 8000862:	001f      	movs	r7, r3
 8000864:	b085      	sub	sp, #20
 8000866:	0b24      	lsrs	r4, r4, #12
 8000868:	0d40      	lsrs	r0, r0, #21
 800086a:	0fce      	lsrs	r6, r1, #31
 800086c:	2800      	cmp	r0, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_ddiv+0x26>
 8000870:	e156      	b.n	8000b20 <__aeabi_ddiv+0x2d4>
 8000872:	4bd4      	ldr	r3, [pc, #848]	; (8000bc4 <__aeabi_ddiv+0x378>)
 8000874:	4298      	cmp	r0, r3
 8000876:	d100      	bne.n	800087a <__aeabi_ddiv+0x2e>
 8000878:	e172      	b.n	8000b60 <__aeabi_ddiv+0x314>
 800087a:	0f6b      	lsrs	r3, r5, #29
 800087c:	00e4      	lsls	r4, r4, #3
 800087e:	431c      	orrs	r4, r3
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	4323      	orrs	r3, r4
 8000886:	4698      	mov	r8, r3
 8000888:	4bcf      	ldr	r3, [pc, #828]	; (8000bc8 <__aeabi_ddiv+0x37c>)
 800088a:	00ed      	lsls	r5, r5, #3
 800088c:	469b      	mov	fp, r3
 800088e:	2300      	movs	r3, #0
 8000890:	4699      	mov	r9, r3
 8000892:	4483      	add	fp, r0
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	033c      	lsls	r4, r7, #12
 8000898:	007b      	lsls	r3, r7, #1
 800089a:	4650      	mov	r0, sl
 800089c:	0b24      	lsrs	r4, r4, #12
 800089e:	0d5b      	lsrs	r3, r3, #21
 80008a0:	0fff      	lsrs	r7, r7, #31
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_ddiv+0x5c>
 80008a6:	e11f      	b.n	8000ae8 <__aeabi_ddiv+0x29c>
 80008a8:	4ac6      	ldr	r2, [pc, #792]	; (8000bc4 <__aeabi_ddiv+0x378>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d100      	bne.n	80008b0 <__aeabi_ddiv+0x64>
 80008ae:	e162      	b.n	8000b76 <__aeabi_ddiv+0x32a>
 80008b0:	49c5      	ldr	r1, [pc, #788]	; (8000bc8 <__aeabi_ddiv+0x37c>)
 80008b2:	0f42      	lsrs	r2, r0, #29
 80008b4:	468c      	mov	ip, r1
 80008b6:	00e4      	lsls	r4, r4, #3
 80008b8:	4659      	mov	r1, fp
 80008ba:	4314      	orrs	r4, r2
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	4463      	add	r3, ip
 80008c0:	0412      	lsls	r2, r2, #16
 80008c2:	1acb      	subs	r3, r1, r3
 80008c4:	4314      	orrs	r4, r2
 80008c6:	469b      	mov	fp, r3
 80008c8:	00c2      	lsls	r2, r0, #3
 80008ca:	2000      	movs	r0, #0
 80008cc:	0033      	movs	r3, r6
 80008ce:	407b      	eors	r3, r7
 80008d0:	469a      	mov	sl, r3
 80008d2:	464b      	mov	r3, r9
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d827      	bhi.n	8000928 <__aeabi_ddiv+0xdc>
 80008d8:	49bc      	ldr	r1, [pc, #752]	; (8000bcc <__aeabi_ddiv+0x380>)
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	58cb      	ldr	r3, [r1, r3]
 80008de:	469f      	mov	pc, r3
 80008e0:	46b2      	mov	sl, r6
 80008e2:	9b00      	ldr	r3, [sp, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d016      	beq.n	8000916 <__aeabi_ddiv+0xca>
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d100      	bne.n	80008ee <__aeabi_ddiv+0xa2>
 80008ec:	e28e      	b.n	8000e0c <__aeabi_ddiv+0x5c0>
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d000      	beq.n	80008f4 <__aeabi_ddiv+0xa8>
 80008f2:	e0d9      	b.n	8000aa8 <__aeabi_ddiv+0x25c>
 80008f4:	2300      	movs	r3, #0
 80008f6:	2400      	movs	r4, #0
 80008f8:	2500      	movs	r5, #0
 80008fa:	4652      	mov	r2, sl
 80008fc:	051b      	lsls	r3, r3, #20
 80008fe:	4323      	orrs	r3, r4
 8000900:	07d2      	lsls	r2, r2, #31
 8000902:	4313      	orrs	r3, r2
 8000904:	0028      	movs	r0, r5
 8000906:	0019      	movs	r1, r3
 8000908:	b005      	add	sp, #20
 800090a:	bcf0      	pop	{r4, r5, r6, r7}
 800090c:	46bb      	mov	fp, r7
 800090e:	46b2      	mov	sl, r6
 8000910:	46a9      	mov	r9, r5
 8000912:	46a0      	mov	r8, r4
 8000914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000916:	2400      	movs	r4, #0
 8000918:	2500      	movs	r5, #0
 800091a:	4baa      	ldr	r3, [pc, #680]	; (8000bc4 <__aeabi_ddiv+0x378>)
 800091c:	e7ed      	b.n	80008fa <__aeabi_ddiv+0xae>
 800091e:	46ba      	mov	sl, r7
 8000920:	46a0      	mov	r8, r4
 8000922:	0015      	movs	r5, r2
 8000924:	9000      	str	r0, [sp, #0]
 8000926:	e7dc      	b.n	80008e2 <__aeabi_ddiv+0x96>
 8000928:	4544      	cmp	r4, r8
 800092a:	d200      	bcs.n	800092e <__aeabi_ddiv+0xe2>
 800092c:	e1c7      	b.n	8000cbe <__aeabi_ddiv+0x472>
 800092e:	d100      	bne.n	8000932 <__aeabi_ddiv+0xe6>
 8000930:	e1c2      	b.n	8000cb8 <__aeabi_ddiv+0x46c>
 8000932:	2301      	movs	r3, #1
 8000934:	425b      	negs	r3, r3
 8000936:	469c      	mov	ip, r3
 8000938:	002e      	movs	r6, r5
 800093a:	4640      	mov	r0, r8
 800093c:	2500      	movs	r5, #0
 800093e:	44e3      	add	fp, ip
 8000940:	0223      	lsls	r3, r4, #8
 8000942:	0e14      	lsrs	r4, r2, #24
 8000944:	431c      	orrs	r4, r3
 8000946:	0c1b      	lsrs	r3, r3, #16
 8000948:	4699      	mov	r9, r3
 800094a:	0423      	lsls	r3, r4, #16
 800094c:	0c1f      	lsrs	r7, r3, #16
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	4649      	mov	r1, r9
 8000952:	9200      	str	r2, [sp, #0]
 8000954:	9701      	str	r7, [sp, #4]
 8000956:	f7ff fc67 	bl	8000228 <__aeabi_uidivmod>
 800095a:	0002      	movs	r2, r0
 800095c:	437a      	muls	r2, r7
 800095e:	040b      	lsls	r3, r1, #16
 8000960:	0c31      	lsrs	r1, r6, #16
 8000962:	4680      	mov	r8, r0
 8000964:	4319      	orrs	r1, r3
 8000966:	428a      	cmp	r2, r1
 8000968:	d907      	bls.n	800097a <__aeabi_ddiv+0x12e>
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
 800096e:	469c      	mov	ip, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	44e0      	add	r8, ip
 8000974:	428c      	cmp	r4, r1
 8000976:	d800      	bhi.n	800097a <__aeabi_ddiv+0x12e>
 8000978:	e207      	b.n	8000d8a <__aeabi_ddiv+0x53e>
 800097a:	1a88      	subs	r0, r1, r2
 800097c:	4649      	mov	r1, r9
 800097e:	f7ff fc53 	bl	8000228 <__aeabi_uidivmod>
 8000982:	0409      	lsls	r1, r1, #16
 8000984:	468c      	mov	ip, r1
 8000986:	0431      	lsls	r1, r6, #16
 8000988:	4666      	mov	r6, ip
 800098a:	9a01      	ldr	r2, [sp, #4]
 800098c:	0c09      	lsrs	r1, r1, #16
 800098e:	4342      	muls	r2, r0
 8000990:	0003      	movs	r3, r0
 8000992:	4331      	orrs	r1, r6
 8000994:	428a      	cmp	r2, r1
 8000996:	d904      	bls.n	80009a2 <__aeabi_ddiv+0x156>
 8000998:	1909      	adds	r1, r1, r4
 800099a:	3b01      	subs	r3, #1
 800099c:	428c      	cmp	r4, r1
 800099e:	d800      	bhi.n	80009a2 <__aeabi_ddiv+0x156>
 80009a0:	e1ed      	b.n	8000d7e <__aeabi_ddiv+0x532>
 80009a2:	1a88      	subs	r0, r1, r2
 80009a4:	4642      	mov	r2, r8
 80009a6:	0412      	lsls	r2, r2, #16
 80009a8:	431a      	orrs	r2, r3
 80009aa:	4690      	mov	r8, r2
 80009ac:	4641      	mov	r1, r8
 80009ae:	9b00      	ldr	r3, [sp, #0]
 80009b0:	040e      	lsls	r6, r1, #16
 80009b2:	0c1b      	lsrs	r3, r3, #16
 80009b4:	001f      	movs	r7, r3
 80009b6:	9302      	str	r3, [sp, #8]
 80009b8:	9b00      	ldr	r3, [sp, #0]
 80009ba:	0c36      	lsrs	r6, r6, #16
 80009bc:	041b      	lsls	r3, r3, #16
 80009be:	0c19      	lsrs	r1, r3, #16
 80009c0:	000b      	movs	r3, r1
 80009c2:	4373      	muls	r3, r6
 80009c4:	0c12      	lsrs	r2, r2, #16
 80009c6:	437e      	muls	r6, r7
 80009c8:	9103      	str	r1, [sp, #12]
 80009ca:	4351      	muls	r1, r2
 80009cc:	437a      	muls	r2, r7
 80009ce:	0c1f      	lsrs	r7, r3, #16
 80009d0:	46bc      	mov	ip, r7
 80009d2:	1876      	adds	r6, r6, r1
 80009d4:	4466      	add	r6, ip
 80009d6:	42b1      	cmp	r1, r6
 80009d8:	d903      	bls.n	80009e2 <__aeabi_ddiv+0x196>
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0249      	lsls	r1, r1, #9
 80009de:	468c      	mov	ip, r1
 80009e0:	4462      	add	r2, ip
 80009e2:	0c31      	lsrs	r1, r6, #16
 80009e4:	188a      	adds	r2, r1, r2
 80009e6:	0431      	lsls	r1, r6, #16
 80009e8:	041e      	lsls	r6, r3, #16
 80009ea:	0c36      	lsrs	r6, r6, #16
 80009ec:	198e      	adds	r6, r1, r6
 80009ee:	4290      	cmp	r0, r2
 80009f0:	d302      	bcc.n	80009f8 <__aeabi_ddiv+0x1ac>
 80009f2:	d112      	bne.n	8000a1a <__aeabi_ddiv+0x1ce>
 80009f4:	42b5      	cmp	r5, r6
 80009f6:	d210      	bcs.n	8000a1a <__aeabi_ddiv+0x1ce>
 80009f8:	4643      	mov	r3, r8
 80009fa:	1e59      	subs	r1, r3, #1
 80009fc:	9b00      	ldr	r3, [sp, #0]
 80009fe:	469c      	mov	ip, r3
 8000a00:	4465      	add	r5, ip
 8000a02:	001f      	movs	r7, r3
 8000a04:	429d      	cmp	r5, r3
 8000a06:	419b      	sbcs	r3, r3
 8000a08:	425b      	negs	r3, r3
 8000a0a:	191b      	adds	r3, r3, r4
 8000a0c:	18c0      	adds	r0, r0, r3
 8000a0e:	4284      	cmp	r4, r0
 8000a10:	d200      	bcs.n	8000a14 <__aeabi_ddiv+0x1c8>
 8000a12:	e1a0      	b.n	8000d56 <__aeabi_ddiv+0x50a>
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x1cc>
 8000a16:	e19b      	b.n	8000d50 <__aeabi_ddiv+0x504>
 8000a18:	4688      	mov	r8, r1
 8000a1a:	1bae      	subs	r6, r5, r6
 8000a1c:	42b5      	cmp	r5, r6
 8000a1e:	41ad      	sbcs	r5, r5
 8000a20:	1a80      	subs	r0, r0, r2
 8000a22:	426d      	negs	r5, r5
 8000a24:	1b40      	subs	r0, r0, r5
 8000a26:	4284      	cmp	r4, r0
 8000a28:	d100      	bne.n	8000a2c <__aeabi_ddiv+0x1e0>
 8000a2a:	e1d5      	b.n	8000dd8 <__aeabi_ddiv+0x58c>
 8000a2c:	4649      	mov	r1, r9
 8000a2e:	f7ff fbfb 	bl	8000228 <__aeabi_uidivmod>
 8000a32:	9a01      	ldr	r2, [sp, #4]
 8000a34:	040b      	lsls	r3, r1, #16
 8000a36:	4342      	muls	r2, r0
 8000a38:	0c31      	lsrs	r1, r6, #16
 8000a3a:	0005      	movs	r5, r0
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	428a      	cmp	r2, r1
 8000a40:	d900      	bls.n	8000a44 <__aeabi_ddiv+0x1f8>
 8000a42:	e16c      	b.n	8000d1e <__aeabi_ddiv+0x4d2>
 8000a44:	1a88      	subs	r0, r1, r2
 8000a46:	4649      	mov	r1, r9
 8000a48:	f7ff fbee 	bl	8000228 <__aeabi_uidivmod>
 8000a4c:	9a01      	ldr	r2, [sp, #4]
 8000a4e:	0436      	lsls	r6, r6, #16
 8000a50:	4342      	muls	r2, r0
 8000a52:	0409      	lsls	r1, r1, #16
 8000a54:	0c36      	lsrs	r6, r6, #16
 8000a56:	0003      	movs	r3, r0
 8000a58:	430e      	orrs	r6, r1
 8000a5a:	42b2      	cmp	r2, r6
 8000a5c:	d900      	bls.n	8000a60 <__aeabi_ddiv+0x214>
 8000a5e:	e153      	b.n	8000d08 <__aeabi_ddiv+0x4bc>
 8000a60:	9803      	ldr	r0, [sp, #12]
 8000a62:	1ab6      	subs	r6, r6, r2
 8000a64:	0002      	movs	r2, r0
 8000a66:	042d      	lsls	r5, r5, #16
 8000a68:	431d      	orrs	r5, r3
 8000a6a:	9f02      	ldr	r7, [sp, #8]
 8000a6c:	042b      	lsls	r3, r5, #16
 8000a6e:	0c1b      	lsrs	r3, r3, #16
 8000a70:	435a      	muls	r2, r3
 8000a72:	437b      	muls	r3, r7
 8000a74:	469c      	mov	ip, r3
 8000a76:	0c29      	lsrs	r1, r5, #16
 8000a78:	4348      	muls	r0, r1
 8000a7a:	0c13      	lsrs	r3, r2, #16
 8000a7c:	4484      	add	ip, r0
 8000a7e:	4463      	add	r3, ip
 8000a80:	4379      	muls	r1, r7
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d903      	bls.n	8000a8e <__aeabi_ddiv+0x242>
 8000a86:	2080      	movs	r0, #128	; 0x80
 8000a88:	0240      	lsls	r0, r0, #9
 8000a8a:	4684      	mov	ip, r0
 8000a8c:	4461      	add	r1, ip
 8000a8e:	0c18      	lsrs	r0, r3, #16
 8000a90:	0412      	lsls	r2, r2, #16
 8000a92:	041b      	lsls	r3, r3, #16
 8000a94:	0c12      	lsrs	r2, r2, #16
 8000a96:	1841      	adds	r1, r0, r1
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	428e      	cmp	r6, r1
 8000a9c:	d200      	bcs.n	8000aa0 <__aeabi_ddiv+0x254>
 8000a9e:	e0ff      	b.n	8000ca0 <__aeabi_ddiv+0x454>
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_ddiv+0x258>
 8000aa2:	e0fa      	b.n	8000c9a <__aeabi_ddiv+0x44e>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	431d      	orrs	r5, r3
 8000aa8:	4a49      	ldr	r2, [pc, #292]	; (8000bd0 <__aeabi_ddiv+0x384>)
 8000aaa:	445a      	add	r2, fp
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_ddiv+0x266>
 8000ab0:	e0aa      	b.n	8000c08 <__aeabi_ddiv+0x3bc>
 8000ab2:	076b      	lsls	r3, r5, #29
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_ddiv+0x26c>
 8000ab6:	e13d      	b.n	8000d34 <__aeabi_ddiv+0x4e8>
 8000ab8:	08ed      	lsrs	r5, r5, #3
 8000aba:	4643      	mov	r3, r8
 8000abc:	01db      	lsls	r3, r3, #7
 8000abe:	d506      	bpl.n	8000ace <__aeabi_ddiv+0x282>
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <__aeabi_ddiv+0x388>)
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	00d2      	lsls	r2, r2, #3
 8000acc:	445a      	add	r2, fp
 8000ace:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <__aeabi_ddiv+0x38c>)
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dd00      	ble.n	8000ad6 <__aeabi_ddiv+0x28a>
 8000ad4:	e71f      	b.n	8000916 <__aeabi_ddiv+0xca>
 8000ad6:	4643      	mov	r3, r8
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	431d      	orrs	r5, r3
 8000adc:	4643      	mov	r3, r8
 8000ade:	0552      	lsls	r2, r2, #21
 8000ae0:	025c      	lsls	r4, r3, #9
 8000ae2:	0b24      	lsrs	r4, r4, #12
 8000ae4:	0d53      	lsrs	r3, r2, #21
 8000ae6:	e708      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000ae8:	4652      	mov	r2, sl
 8000aea:	4322      	orrs	r2, r4
 8000aec:	d100      	bne.n	8000af0 <__aeabi_ddiv+0x2a4>
 8000aee:	e07b      	b.n	8000be8 <__aeabi_ddiv+0x39c>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_ddiv+0x2aa>
 8000af4:	e0fa      	b.n	8000cec <__aeabi_ddiv+0x4a0>
 8000af6:	0020      	movs	r0, r4
 8000af8:	f000 fa90 	bl	800101c <__clzsi2>
 8000afc:	0002      	movs	r2, r0
 8000afe:	3a0b      	subs	r2, #11
 8000b00:	231d      	movs	r3, #29
 8000b02:	0001      	movs	r1, r0
 8000b04:	1a9b      	subs	r3, r3, r2
 8000b06:	4652      	mov	r2, sl
 8000b08:	3908      	subs	r1, #8
 8000b0a:	40da      	lsrs	r2, r3
 8000b0c:	408c      	lsls	r4, r1
 8000b0e:	4314      	orrs	r4, r2
 8000b10:	4652      	mov	r2, sl
 8000b12:	408a      	lsls	r2, r1
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <__aeabi_ddiv+0x390>)
 8000b16:	4458      	add	r0, fp
 8000b18:	469b      	mov	fp, r3
 8000b1a:	4483      	add	fp, r0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e6d5      	b.n	80008cc <__aeabi_ddiv+0x80>
 8000b20:	464b      	mov	r3, r9
 8000b22:	4323      	orrs	r3, r4
 8000b24:	4698      	mov	r8, r3
 8000b26:	d044      	beq.n	8000bb2 <__aeabi_ddiv+0x366>
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_ddiv+0x2e2>
 8000b2c:	e0ce      	b.n	8000ccc <__aeabi_ddiv+0x480>
 8000b2e:	0020      	movs	r0, r4
 8000b30:	f000 fa74 	bl	800101c <__clzsi2>
 8000b34:	0001      	movs	r1, r0
 8000b36:	0002      	movs	r2, r0
 8000b38:	390b      	subs	r1, #11
 8000b3a:	231d      	movs	r3, #29
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	4649      	mov	r1, r9
 8000b40:	0010      	movs	r0, r2
 8000b42:	40d9      	lsrs	r1, r3
 8000b44:	3808      	subs	r0, #8
 8000b46:	4084      	lsls	r4, r0
 8000b48:	000b      	movs	r3, r1
 8000b4a:	464d      	mov	r5, r9
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4085      	lsls	r5, r0
 8000b52:	4823      	ldr	r0, [pc, #140]	; (8000be0 <__aeabi_ddiv+0x394>)
 8000b54:	1a83      	subs	r3, r0, r2
 8000b56:	469b      	mov	fp, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4699      	mov	r9, r3
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	e69a      	b.n	8000896 <__aeabi_ddiv+0x4a>
 8000b60:	464b      	mov	r3, r9
 8000b62:	4323      	orrs	r3, r4
 8000b64:	4698      	mov	r8, r3
 8000b66:	d11d      	bne.n	8000ba4 <__aeabi_ddiv+0x358>
 8000b68:	2308      	movs	r3, #8
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b06      	subs	r3, #6
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4683      	mov	fp, r0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	e68f      	b.n	8000896 <__aeabi_ddiv+0x4a>
 8000b76:	4652      	mov	r2, sl
 8000b78:	4322      	orrs	r2, r4
 8000b7a:	d109      	bne.n	8000b90 <__aeabi_ddiv+0x344>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	4649      	mov	r1, r9
 8000b80:	4319      	orrs	r1, r3
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <__aeabi_ddiv+0x398>)
 8000b84:	4689      	mov	r9, r1
 8000b86:	469c      	mov	ip, r3
 8000b88:	2400      	movs	r4, #0
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	44e3      	add	fp, ip
 8000b8e:	e69d      	b.n	80008cc <__aeabi_ddiv+0x80>
 8000b90:	2303      	movs	r3, #3
 8000b92:	464a      	mov	r2, r9
 8000b94:	431a      	orrs	r2, r3
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <__aeabi_ddiv+0x398>)
 8000b98:	4691      	mov	r9, r2
 8000b9a:	469c      	mov	ip, r3
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	44e3      	add	fp, ip
 8000ba2:	e693      	b.n	80008cc <__aeabi_ddiv+0x80>
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	3b09      	subs	r3, #9
 8000baa:	46a0      	mov	r8, r4
 8000bac:	4683      	mov	fp, r0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	e671      	b.n	8000896 <__aeabi_ddiv+0x4a>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	4699      	mov	r9, r3
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	469b      	mov	fp, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	e669      	b.n	8000896 <__aeabi_ddiv+0x4a>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	000007ff 	.word	0x000007ff
 8000bc8:	fffffc01 	.word	0xfffffc01
 8000bcc:	08005c38 	.word	0x08005c38
 8000bd0:	000003ff 	.word	0x000003ff
 8000bd4:	feffffff 	.word	0xfeffffff
 8000bd8:	000007fe 	.word	0x000007fe
 8000bdc:	000003f3 	.word	0x000003f3
 8000be0:	fffffc0d 	.word	0xfffffc0d
 8000be4:	fffff801 	.word	0xfffff801
 8000be8:	4649      	mov	r1, r9
 8000bea:	2301      	movs	r3, #1
 8000bec:	4319      	orrs	r1, r3
 8000bee:	4689      	mov	r9, r1
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e66a      	b.n	80008cc <__aeabi_ddiv+0x80>
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2480      	movs	r4, #128	; 0x80
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	4b8a      	ldr	r3, [pc, #552]	; (8000e28 <__aeabi_ddiv+0x5dc>)
 8000c00:	0324      	lsls	r4, r4, #12
 8000c02:	e67a      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000c04:	2501      	movs	r5, #1
 8000c06:	426d      	negs	r5, r5
 8000c08:	2301      	movs	r3, #1
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	2b38      	cmp	r3, #56	; 0x38
 8000c0e:	dd00      	ble.n	8000c12 <__aeabi_ddiv+0x3c6>
 8000c10:	e670      	b.n	80008f4 <__aeabi_ddiv+0xa8>
 8000c12:	2b1f      	cmp	r3, #31
 8000c14:	dc00      	bgt.n	8000c18 <__aeabi_ddiv+0x3cc>
 8000c16:	e0bf      	b.n	8000d98 <__aeabi_ddiv+0x54c>
 8000c18:	211f      	movs	r1, #31
 8000c1a:	4249      	negs	r1, r1
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	4641      	mov	r1, r8
 8000c20:	40d1      	lsrs	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	2b20      	cmp	r3, #32
 8000c26:	d004      	beq.n	8000c32 <__aeabi_ddiv+0x3e6>
 8000c28:	4641      	mov	r1, r8
 8000c2a:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <__aeabi_ddiv+0x5e0>)
 8000c2c:	445b      	add	r3, fp
 8000c2e:	4099      	lsls	r1, r3
 8000c30:	430d      	orrs	r5, r1
 8000c32:	1e6b      	subs	r3, r5, #1
 8000c34:	419d      	sbcs	r5, r3
 8000c36:	2307      	movs	r3, #7
 8000c38:	432a      	orrs	r2, r5
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4015      	ands	r5, r2
 8000c40:	4213      	tst	r3, r2
 8000c42:	d100      	bne.n	8000c46 <__aeabi_ddiv+0x3fa>
 8000c44:	e0d4      	b.n	8000df0 <__aeabi_ddiv+0x5a4>
 8000c46:	210f      	movs	r1, #15
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4011      	ands	r1, r2
 8000c4c:	2904      	cmp	r1, #4
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_ddiv+0x406>
 8000c50:	e0cb      	b.n	8000dea <__aeabi_ddiv+0x59e>
 8000c52:	1d11      	adds	r1, r2, #4
 8000c54:	4291      	cmp	r1, r2
 8000c56:	4192      	sbcs	r2, r2
 8000c58:	4252      	negs	r2, r2
 8000c5a:	189b      	adds	r3, r3, r2
 8000c5c:	000a      	movs	r2, r1
 8000c5e:	0219      	lsls	r1, r3, #8
 8000c60:	d400      	bmi.n	8000c64 <__aeabi_ddiv+0x418>
 8000c62:	e0c2      	b.n	8000dea <__aeabi_ddiv+0x59e>
 8000c64:	2301      	movs	r3, #1
 8000c66:	2400      	movs	r4, #0
 8000c68:	2500      	movs	r5, #0
 8000c6a:	e646      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	4641      	mov	r1, r8
 8000c70:	031b      	lsls	r3, r3, #12
 8000c72:	4219      	tst	r1, r3
 8000c74:	d008      	beq.n	8000c88 <__aeabi_ddiv+0x43c>
 8000c76:	421c      	tst	r4, r3
 8000c78:	d106      	bne.n	8000c88 <__aeabi_ddiv+0x43c>
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	0324      	lsls	r4, r4, #12
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	0015      	movs	r5, r2
 8000c82:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <__aeabi_ddiv+0x5dc>)
 8000c84:	0b24      	lsrs	r4, r4, #12
 8000c86:	e638      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000c88:	2480      	movs	r4, #128	; 0x80
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	0324      	lsls	r4, r4, #12
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	0324      	lsls	r4, r4, #12
 8000c92:	46b2      	mov	sl, r6
 8000c94:	4b64      	ldr	r3, [pc, #400]	; (8000e28 <__aeabi_ddiv+0x5dc>)
 8000c96:	0b24      	lsrs	r4, r4, #12
 8000c98:	e62f      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_ddiv+0x454>
 8000c9e:	e703      	b.n	8000aa8 <__aeabi_ddiv+0x25c>
 8000ca0:	19a6      	adds	r6, r4, r6
 8000ca2:	1e68      	subs	r0, r5, #1
 8000ca4:	42a6      	cmp	r6, r4
 8000ca6:	d200      	bcs.n	8000caa <__aeabi_ddiv+0x45e>
 8000ca8:	e08d      	b.n	8000dc6 <__aeabi_ddiv+0x57a>
 8000caa:	428e      	cmp	r6, r1
 8000cac:	d200      	bcs.n	8000cb0 <__aeabi_ddiv+0x464>
 8000cae:	e0a3      	b.n	8000df8 <__aeabi_ddiv+0x5ac>
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_ddiv+0x468>
 8000cb2:	e0b3      	b.n	8000e1c <__aeabi_ddiv+0x5d0>
 8000cb4:	0005      	movs	r5, r0
 8000cb6:	e6f5      	b.n	8000aa4 <__aeabi_ddiv+0x258>
 8000cb8:	42aa      	cmp	r2, r5
 8000cba:	d900      	bls.n	8000cbe <__aeabi_ddiv+0x472>
 8000cbc:	e639      	b.n	8000932 <__aeabi_ddiv+0xe6>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	07de      	lsls	r6, r3, #31
 8000cc2:	0858      	lsrs	r0, r3, #1
 8000cc4:	086b      	lsrs	r3, r5, #1
 8000cc6:	431e      	orrs	r6, r3
 8000cc8:	07ed      	lsls	r5, r5, #31
 8000cca:	e639      	b.n	8000940 <__aeabi_ddiv+0xf4>
 8000ccc:	4648      	mov	r0, r9
 8000cce:	f000 f9a5 	bl	800101c <__clzsi2>
 8000cd2:	0001      	movs	r1, r0
 8000cd4:	0002      	movs	r2, r0
 8000cd6:	3115      	adds	r1, #21
 8000cd8:	3220      	adds	r2, #32
 8000cda:	291c      	cmp	r1, #28
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_ddiv+0x494>
 8000cde:	e72c      	b.n	8000b3a <__aeabi_ddiv+0x2ee>
 8000ce0:	464b      	mov	r3, r9
 8000ce2:	3808      	subs	r0, #8
 8000ce4:	4083      	lsls	r3, r0
 8000ce6:	2500      	movs	r5, #0
 8000ce8:	4698      	mov	r8, r3
 8000cea:	e732      	b.n	8000b52 <__aeabi_ddiv+0x306>
 8000cec:	f000 f996 	bl	800101c <__clzsi2>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	001a      	movs	r2, r3
 8000cf4:	3215      	adds	r2, #21
 8000cf6:	3020      	adds	r0, #32
 8000cf8:	2a1c      	cmp	r2, #28
 8000cfa:	dc00      	bgt.n	8000cfe <__aeabi_ddiv+0x4b2>
 8000cfc:	e700      	b.n	8000b00 <__aeabi_ddiv+0x2b4>
 8000cfe:	4654      	mov	r4, sl
 8000d00:	3b08      	subs	r3, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	409c      	lsls	r4, r3
 8000d06:	e705      	b.n	8000b14 <__aeabi_ddiv+0x2c8>
 8000d08:	1936      	adds	r6, r6, r4
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	42b4      	cmp	r4, r6
 8000d0e:	d900      	bls.n	8000d12 <__aeabi_ddiv+0x4c6>
 8000d10:	e6a6      	b.n	8000a60 <__aeabi_ddiv+0x214>
 8000d12:	42b2      	cmp	r2, r6
 8000d14:	d800      	bhi.n	8000d18 <__aeabi_ddiv+0x4cc>
 8000d16:	e6a3      	b.n	8000a60 <__aeabi_ddiv+0x214>
 8000d18:	1e83      	subs	r3, r0, #2
 8000d1a:	1936      	adds	r6, r6, r4
 8000d1c:	e6a0      	b.n	8000a60 <__aeabi_ddiv+0x214>
 8000d1e:	1909      	adds	r1, r1, r4
 8000d20:	3d01      	subs	r5, #1
 8000d22:	428c      	cmp	r4, r1
 8000d24:	d900      	bls.n	8000d28 <__aeabi_ddiv+0x4dc>
 8000d26:	e68d      	b.n	8000a44 <__aeabi_ddiv+0x1f8>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	d800      	bhi.n	8000d2e <__aeabi_ddiv+0x4e2>
 8000d2c:	e68a      	b.n	8000a44 <__aeabi_ddiv+0x1f8>
 8000d2e:	1e85      	subs	r5, r0, #2
 8000d30:	1909      	adds	r1, r1, r4
 8000d32:	e687      	b.n	8000a44 <__aeabi_ddiv+0x1f8>
 8000d34:	230f      	movs	r3, #15
 8000d36:	402b      	ands	r3, r5
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0x4f2>
 8000d3c:	e6bc      	b.n	8000ab8 <__aeabi_ddiv+0x26c>
 8000d3e:	2305      	movs	r3, #5
 8000d40:	425b      	negs	r3, r3
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	419b      	sbcs	r3, r3
 8000d46:	3504      	adds	r5, #4
 8000d48:	425b      	negs	r3, r3
 8000d4a:	08ed      	lsrs	r5, r5, #3
 8000d4c:	4498      	add	r8, r3
 8000d4e:	e6b4      	b.n	8000aba <__aeabi_ddiv+0x26e>
 8000d50:	42af      	cmp	r7, r5
 8000d52:	d900      	bls.n	8000d56 <__aeabi_ddiv+0x50a>
 8000d54:	e660      	b.n	8000a18 <__aeabi_ddiv+0x1cc>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	d804      	bhi.n	8000d64 <__aeabi_ddiv+0x518>
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_ddiv+0x512>
 8000d5c:	e65c      	b.n	8000a18 <__aeabi_ddiv+0x1cc>
 8000d5e:	42ae      	cmp	r6, r5
 8000d60:	d800      	bhi.n	8000d64 <__aeabi_ddiv+0x518>
 8000d62:	e659      	b.n	8000a18 <__aeabi_ddiv+0x1cc>
 8000d64:	2302      	movs	r3, #2
 8000d66:	425b      	negs	r3, r3
 8000d68:	469c      	mov	ip, r3
 8000d6a:	9b00      	ldr	r3, [sp, #0]
 8000d6c:	44e0      	add	r8, ip
 8000d6e:	469c      	mov	ip, r3
 8000d70:	4465      	add	r5, ip
 8000d72:	429d      	cmp	r5, r3
 8000d74:	419b      	sbcs	r3, r3
 8000d76:	425b      	negs	r3, r3
 8000d78:	191b      	adds	r3, r3, r4
 8000d7a:	18c0      	adds	r0, r0, r3
 8000d7c:	e64d      	b.n	8000a1a <__aeabi_ddiv+0x1ce>
 8000d7e:	428a      	cmp	r2, r1
 8000d80:	d800      	bhi.n	8000d84 <__aeabi_ddiv+0x538>
 8000d82:	e60e      	b.n	80009a2 <__aeabi_ddiv+0x156>
 8000d84:	1e83      	subs	r3, r0, #2
 8000d86:	1909      	adds	r1, r1, r4
 8000d88:	e60b      	b.n	80009a2 <__aeabi_ddiv+0x156>
 8000d8a:	428a      	cmp	r2, r1
 8000d8c:	d800      	bhi.n	8000d90 <__aeabi_ddiv+0x544>
 8000d8e:	e5f4      	b.n	800097a <__aeabi_ddiv+0x12e>
 8000d90:	1e83      	subs	r3, r0, #2
 8000d92:	4698      	mov	r8, r3
 8000d94:	1909      	adds	r1, r1, r4
 8000d96:	e5f0      	b.n	800097a <__aeabi_ddiv+0x12e>
 8000d98:	4925      	ldr	r1, [pc, #148]	; (8000e30 <__aeabi_ddiv+0x5e4>)
 8000d9a:	0028      	movs	r0, r5
 8000d9c:	4459      	add	r1, fp
 8000d9e:	408d      	lsls	r5, r1
 8000da0:	4642      	mov	r2, r8
 8000da2:	408a      	lsls	r2, r1
 8000da4:	1e69      	subs	r1, r5, #1
 8000da6:	418d      	sbcs	r5, r1
 8000da8:	4641      	mov	r1, r8
 8000daa:	40d8      	lsrs	r0, r3
 8000dac:	40d9      	lsrs	r1, r3
 8000dae:	4302      	orrs	r2, r0
 8000db0:	432a      	orrs	r2, r5
 8000db2:	000b      	movs	r3, r1
 8000db4:	0751      	lsls	r1, r2, #29
 8000db6:	d100      	bne.n	8000dba <__aeabi_ddiv+0x56e>
 8000db8:	e751      	b.n	8000c5e <__aeabi_ddiv+0x412>
 8000dba:	210f      	movs	r1, #15
 8000dbc:	4011      	ands	r1, r2
 8000dbe:	2904      	cmp	r1, #4
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_ddiv+0x578>
 8000dc2:	e746      	b.n	8000c52 <__aeabi_ddiv+0x406>
 8000dc4:	e74b      	b.n	8000c5e <__aeabi_ddiv+0x412>
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	428e      	cmp	r6, r1
 8000dca:	d000      	beq.n	8000dce <__aeabi_ddiv+0x582>
 8000dcc:	e66a      	b.n	8000aa4 <__aeabi_ddiv+0x258>
 8000dce:	9a00      	ldr	r2, [sp, #0]
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_ddiv+0x58a>
 8000dd4:	e666      	b.n	8000aa4 <__aeabi_ddiv+0x258>
 8000dd6:	e667      	b.n	8000aa8 <__aeabi_ddiv+0x25c>
 8000dd8:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <__aeabi_ddiv+0x5e8>)
 8000dda:	445a      	add	r2, fp
 8000ddc:	2a00      	cmp	r2, #0
 8000dde:	dc00      	bgt.n	8000de2 <__aeabi_ddiv+0x596>
 8000de0:	e710      	b.n	8000c04 <__aeabi_ddiv+0x3b8>
 8000de2:	2301      	movs	r3, #1
 8000de4:	2500      	movs	r5, #0
 8000de6:	4498      	add	r8, r3
 8000de8:	e667      	b.n	8000aba <__aeabi_ddiv+0x26e>
 8000dea:	075d      	lsls	r5, r3, #29
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0b1c      	lsrs	r4, r3, #12
 8000df0:	08d2      	lsrs	r2, r2, #3
 8000df2:	2300      	movs	r3, #0
 8000df4:	4315      	orrs	r5, r2
 8000df6:	e580      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000df8:	9800      	ldr	r0, [sp, #0]
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	0042      	lsls	r2, r0, #1
 8000dfe:	4282      	cmp	r2, r0
 8000e00:	41bf      	sbcs	r7, r7
 8000e02:	427f      	negs	r7, r7
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	1936      	adds	r6, r6, r4
 8000e08:	9200      	str	r2, [sp, #0]
 8000e0a:	e7dd      	b.n	8000dc8 <__aeabi_ddiv+0x57c>
 8000e0c:	2480      	movs	r4, #128	; 0x80
 8000e0e:	4643      	mov	r3, r8
 8000e10:	0324      	lsls	r4, r4, #12
 8000e12:	431c      	orrs	r4, r3
 8000e14:	0324      	lsls	r4, r4, #12
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__aeabi_ddiv+0x5dc>)
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	e56e      	b.n	80008fa <__aeabi_ddiv+0xae>
 8000e1c:	9a00      	ldr	r2, [sp, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d3ea      	bcc.n	8000df8 <__aeabi_ddiv+0x5ac>
 8000e22:	0005      	movs	r5, r0
 8000e24:	e7d3      	b.n	8000dce <__aeabi_ddiv+0x582>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	000007ff 	.word	0x000007ff
 8000e2c:	0000043e 	.word	0x0000043e
 8000e30:	0000041e 	.word	0x0000041e
 8000e34:	000003ff 	.word	0x000003ff

08000e38 <__aeabi_i2d>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d016      	beq.n	8000e6c <__aeabi_i2d+0x34>
 8000e3e:	17c3      	asrs	r3, r0, #31
 8000e40:	18c5      	adds	r5, r0, r3
 8000e42:	405d      	eors	r5, r3
 8000e44:	0fc4      	lsrs	r4, r0, #31
 8000e46:	0028      	movs	r0, r5
 8000e48:	f000 f8e8 	bl	800101c <__clzsi2>
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <__aeabi_i2d+0x5c>)
 8000e4e:	1a12      	subs	r2, r2, r0
 8000e50:	280a      	cmp	r0, #10
 8000e52:	dc16      	bgt.n	8000e82 <__aeabi_i2d+0x4a>
 8000e54:	0003      	movs	r3, r0
 8000e56:	002e      	movs	r6, r5
 8000e58:	3315      	adds	r3, #21
 8000e5a:	409e      	lsls	r6, r3
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	1a18      	subs	r0, r3, r0
 8000e60:	40c5      	lsrs	r5, r0
 8000e62:	0552      	lsls	r2, r2, #21
 8000e64:	032d      	lsls	r5, r5, #12
 8000e66:	0b2d      	lsrs	r5, r5, #12
 8000e68:	0d53      	lsrs	r3, r2, #21
 8000e6a:	e003      	b.n	8000e74 <__aeabi_i2d+0x3c>
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2500      	movs	r5, #0
 8000e72:	2600      	movs	r6, #0
 8000e74:	051b      	lsls	r3, r3, #20
 8000e76:	432b      	orrs	r3, r5
 8000e78:	07e4      	lsls	r4, r4, #31
 8000e7a:	4323      	orrs	r3, r4
 8000e7c:	0030      	movs	r0, r6
 8000e7e:	0019      	movs	r1, r3
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
 8000e82:	380b      	subs	r0, #11
 8000e84:	4085      	lsls	r5, r0
 8000e86:	0552      	lsls	r2, r2, #21
 8000e88:	032d      	lsls	r5, r5, #12
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	0b2d      	lsrs	r5, r5, #12
 8000e8e:	0d53      	lsrs	r3, r2, #21
 8000e90:	e7f0      	b.n	8000e74 <__aeabi_i2d+0x3c>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	0000041e 	.word	0x0000041e

08000e98 <__aeabi_d2f>:
 8000e98:	0002      	movs	r2, r0
 8000e9a:	004b      	lsls	r3, r1, #1
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	0d5b      	lsrs	r3, r3, #21
 8000ea0:	030c      	lsls	r4, r1, #12
 8000ea2:	4e3d      	ldr	r6, [pc, #244]	; (8000f98 <__aeabi_d2f+0x100>)
 8000ea4:	0a64      	lsrs	r4, r4, #9
 8000ea6:	0f40      	lsrs	r0, r0, #29
 8000ea8:	1c5f      	adds	r7, r3, #1
 8000eaa:	0fc9      	lsrs	r1, r1, #31
 8000eac:	4304      	orrs	r4, r0
 8000eae:	00d5      	lsls	r5, r2, #3
 8000eb0:	4237      	tst	r7, r6
 8000eb2:	d00a      	beq.n	8000eca <__aeabi_d2f+0x32>
 8000eb4:	4839      	ldr	r0, [pc, #228]	; (8000f9c <__aeabi_d2f+0x104>)
 8000eb6:	181e      	adds	r6, r3, r0
 8000eb8:	2efe      	cmp	r6, #254	; 0xfe
 8000eba:	dd16      	ble.n	8000eea <__aeabi_d2f+0x52>
 8000ebc:	20ff      	movs	r0, #255	; 0xff
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	05c0      	lsls	r0, r0, #23
 8000ec2:	4320      	orrs	r0, r4
 8000ec4:	07c9      	lsls	r1, r1, #31
 8000ec6:	4308      	orrs	r0, r1
 8000ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <__aeabi_d2f+0x44>
 8000ece:	432c      	orrs	r4, r5
 8000ed0:	d026      	beq.n	8000f20 <__aeabi_d2f+0x88>
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	0192      	lsls	r2, r2, #6
 8000ed6:	0a54      	lsrs	r4, r2, #9
 8000ed8:	b2d8      	uxtb	r0, r3
 8000eda:	e7f1      	b.n	8000ec0 <__aeabi_d2f+0x28>
 8000edc:	4325      	orrs	r5, r4
 8000ede:	d0ed      	beq.n	8000ebc <__aeabi_d2f+0x24>
 8000ee0:	2080      	movs	r0, #128	; 0x80
 8000ee2:	03c0      	lsls	r0, r0, #15
 8000ee4:	4304      	orrs	r4, r0
 8000ee6:	20ff      	movs	r0, #255	; 0xff
 8000ee8:	e7ea      	b.n	8000ec0 <__aeabi_d2f+0x28>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	dd1b      	ble.n	8000f26 <__aeabi_d2f+0x8e>
 8000eee:	0192      	lsls	r2, r2, #6
 8000ef0:	1e53      	subs	r3, r2, #1
 8000ef2:	419a      	sbcs	r2, r3
 8000ef4:	00e4      	lsls	r4, r4, #3
 8000ef6:	0f6d      	lsrs	r5, r5, #29
 8000ef8:	4322      	orrs	r2, r4
 8000efa:	432a      	orrs	r2, r5
 8000efc:	0753      	lsls	r3, r2, #29
 8000efe:	d048      	beq.n	8000f92 <__aeabi_d2f+0xfa>
 8000f00:	230f      	movs	r3, #15
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d000      	beq.n	8000f0a <__aeabi_d2f+0x72>
 8000f08:	3204      	adds	r2, #4
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	04db      	lsls	r3, r3, #19
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d03f      	beq.n	8000f92 <__aeabi_d2f+0xfa>
 8000f12:	1c70      	adds	r0, r6, #1
 8000f14:	2efe      	cmp	r6, #254	; 0xfe
 8000f16:	d0d1      	beq.n	8000ebc <__aeabi_d2f+0x24>
 8000f18:	0192      	lsls	r2, r2, #6
 8000f1a:	0a54      	lsrs	r4, r2, #9
 8000f1c:	b2c0      	uxtb	r0, r0
 8000f1e:	e7cf      	b.n	8000ec0 <__aeabi_d2f+0x28>
 8000f20:	2000      	movs	r0, #0
 8000f22:	2400      	movs	r4, #0
 8000f24:	e7cc      	b.n	8000ec0 <__aeabi_d2f+0x28>
 8000f26:	0032      	movs	r2, r6
 8000f28:	3217      	adds	r2, #23
 8000f2a:	db22      	blt.n	8000f72 <__aeabi_d2f+0xda>
 8000f2c:	2080      	movs	r0, #128	; 0x80
 8000f2e:	0400      	lsls	r0, r0, #16
 8000f30:	4320      	orrs	r0, r4
 8000f32:	241e      	movs	r4, #30
 8000f34:	1ba4      	subs	r4, r4, r6
 8000f36:	2c1f      	cmp	r4, #31
 8000f38:	dd1d      	ble.n	8000f76 <__aeabi_d2f+0xde>
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	1b96      	subs	r6, r2, r6
 8000f40:	0002      	movs	r2, r0
 8000f42:	40f2      	lsrs	r2, r6
 8000f44:	0016      	movs	r6, r2
 8000f46:	2c20      	cmp	r4, #32
 8000f48:	d004      	beq.n	8000f54 <__aeabi_d2f+0xbc>
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <__aeabi_d2f+0x108>)
 8000f4c:	4694      	mov	ip, r2
 8000f4e:	4463      	add	r3, ip
 8000f50:	4098      	lsls	r0, r3
 8000f52:	4305      	orrs	r5, r0
 8000f54:	002a      	movs	r2, r5
 8000f56:	1e53      	subs	r3, r2, #1
 8000f58:	419a      	sbcs	r2, r3
 8000f5a:	4332      	orrs	r2, r6
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	0753      	lsls	r3, r2, #29
 8000f60:	d1ce      	bne.n	8000f00 <__aeabi_d2f+0x68>
 8000f62:	2480      	movs	r4, #128	; 0x80
 8000f64:	0013      	movs	r3, r2
 8000f66:	04e4      	lsls	r4, r4, #19
 8000f68:	2001      	movs	r0, #1
 8000f6a:	4023      	ands	r3, r4
 8000f6c:	4222      	tst	r2, r4
 8000f6e:	d1d3      	bne.n	8000f18 <__aeabi_d2f+0x80>
 8000f70:	e7b0      	b.n	8000ed4 <__aeabi_d2f+0x3c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	e7ad      	b.n	8000ed2 <__aeabi_d2f+0x3a>
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <__aeabi_d2f+0x10c>)
 8000f78:	4694      	mov	ip, r2
 8000f7a:	002a      	movs	r2, r5
 8000f7c:	40e2      	lsrs	r2, r4
 8000f7e:	0014      	movs	r4, r2
 8000f80:	002a      	movs	r2, r5
 8000f82:	4463      	add	r3, ip
 8000f84:	409a      	lsls	r2, r3
 8000f86:	4098      	lsls	r0, r3
 8000f88:	1e55      	subs	r5, r2, #1
 8000f8a:	41aa      	sbcs	r2, r5
 8000f8c:	4302      	orrs	r2, r0
 8000f8e:	4322      	orrs	r2, r4
 8000f90:	e7e4      	b.n	8000f5c <__aeabi_d2f+0xc4>
 8000f92:	0033      	movs	r3, r6
 8000f94:	e79e      	b.n	8000ed4 <__aeabi_d2f+0x3c>
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	000007fe 	.word	0x000007fe
 8000f9c:	fffffc80 	.word	0xfffffc80
 8000fa0:	fffffca2 	.word	0xfffffca2
 8000fa4:	fffffc82 	.word	0xfffffc82

08000fa8 <__aeabi_cfrcmple>:
 8000fa8:	4684      	mov	ip, r0
 8000faa:	0008      	movs	r0, r1
 8000fac:	4661      	mov	r1, ip
 8000fae:	e7ff      	b.n	8000fb0 <__aeabi_cfcmpeq>

08000fb0 <__aeabi_cfcmpeq>:
 8000fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000fb2:	f000 f8bd 	bl	8001130 <__lesf2>
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d401      	bmi.n	8000fbe <__aeabi_cfcmpeq+0xe>
 8000fba:	2100      	movs	r1, #0
 8000fbc:	42c8      	cmn	r0, r1
 8000fbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000fc0 <__aeabi_fcmpeq>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	f000 f849 	bl	8001058 <__eqsf2>
 8000fc6:	4240      	negs	r0, r0
 8000fc8:	3001      	adds	r0, #1
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <__aeabi_fcmplt>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	f000 f8af 	bl	8001130 <__lesf2>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	db01      	blt.n	8000fda <__aeabi_fcmplt+0xe>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	bd10      	pop	{r4, pc}
 8000fda:	2001      	movs	r0, #1
 8000fdc:	bd10      	pop	{r4, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)

08000fe0 <__aeabi_fcmple>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	f000 f8a5 	bl	8001130 <__lesf2>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	dd01      	ble.n	8000fee <__aeabi_fcmple+0xe>
 8000fea:	2000      	movs	r0, #0
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	2001      	movs	r0, #1
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)

08000ff4 <__aeabi_fcmpgt>:
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	f000 f855 	bl	80010a4 <__gesf2>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	dc01      	bgt.n	8001002 <__aeabi_fcmpgt+0xe>
 8000ffe:	2000      	movs	r0, #0
 8001000:	bd10      	pop	{r4, pc}
 8001002:	2001      	movs	r0, #1
 8001004:	bd10      	pop	{r4, pc}
 8001006:	46c0      	nop			; (mov r8, r8)

08001008 <__aeabi_fcmpge>:
 8001008:	b510      	push	{r4, lr}
 800100a:	f000 f84b 	bl	80010a4 <__gesf2>
 800100e:	2800      	cmp	r0, #0
 8001010:	da01      	bge.n	8001016 <__aeabi_fcmpge+0xe>
 8001012:	2000      	movs	r0, #0
 8001014:	bd10      	pop	{r4, pc}
 8001016:	2001      	movs	r0, #1
 8001018:	bd10      	pop	{r4, pc}
 800101a:	46c0      	nop			; (mov r8, r8)

0800101c <__clzsi2>:
 800101c:	211c      	movs	r1, #28
 800101e:	2301      	movs	r3, #1
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	4298      	cmp	r0, r3
 8001024:	d301      	bcc.n	800102a <__clzsi2+0xe>
 8001026:	0c00      	lsrs	r0, r0, #16
 8001028:	3910      	subs	r1, #16
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	4298      	cmp	r0, r3
 800102e:	d301      	bcc.n	8001034 <__clzsi2+0x18>
 8001030:	0a00      	lsrs	r0, r0, #8
 8001032:	3908      	subs	r1, #8
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	4298      	cmp	r0, r3
 8001038:	d301      	bcc.n	800103e <__clzsi2+0x22>
 800103a:	0900      	lsrs	r0, r0, #4
 800103c:	3904      	subs	r1, #4
 800103e:	a202      	add	r2, pc, #8	; (adr r2, 8001048 <__clzsi2+0x2c>)
 8001040:	5c10      	ldrb	r0, [r2, r0]
 8001042:	1840      	adds	r0, r0, r1
 8001044:	4770      	bx	lr
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	02020304 	.word	0x02020304
 800104c:	01010101 	.word	0x01010101
	...

08001058 <__eqsf2>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	0042      	lsls	r2, r0, #1
 800105c:	0245      	lsls	r5, r0, #9
 800105e:	024e      	lsls	r6, r1, #9
 8001060:	004c      	lsls	r4, r1, #1
 8001062:	0fc3      	lsrs	r3, r0, #31
 8001064:	0a6d      	lsrs	r5, r5, #9
 8001066:	2001      	movs	r0, #1
 8001068:	0e12      	lsrs	r2, r2, #24
 800106a:	0a76      	lsrs	r6, r6, #9
 800106c:	0e24      	lsrs	r4, r4, #24
 800106e:	0fc9      	lsrs	r1, r1, #31
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d006      	beq.n	8001082 <__eqsf2+0x2a>
 8001074:	2cff      	cmp	r4, #255	; 0xff
 8001076:	d003      	beq.n	8001080 <__eqsf2+0x28>
 8001078:	42a2      	cmp	r2, r4
 800107a:	d101      	bne.n	8001080 <__eqsf2+0x28>
 800107c:	42b5      	cmp	r5, r6
 800107e:	d006      	beq.n	800108e <__eqsf2+0x36>
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	2d00      	cmp	r5, #0
 8001084:	d1fc      	bne.n	8001080 <__eqsf2+0x28>
 8001086:	2cff      	cmp	r4, #255	; 0xff
 8001088:	d1fa      	bne.n	8001080 <__eqsf2+0x28>
 800108a:	2e00      	cmp	r6, #0
 800108c:	d1f8      	bne.n	8001080 <__eqsf2+0x28>
 800108e:	428b      	cmp	r3, r1
 8001090:	d006      	beq.n	80010a0 <__eqsf2+0x48>
 8001092:	2001      	movs	r0, #1
 8001094:	2a00      	cmp	r2, #0
 8001096:	d1f3      	bne.n	8001080 <__eqsf2+0x28>
 8001098:	0028      	movs	r0, r5
 800109a:	1e43      	subs	r3, r0, #1
 800109c:	4198      	sbcs	r0, r3
 800109e:	e7ef      	b.n	8001080 <__eqsf2+0x28>
 80010a0:	2000      	movs	r0, #0
 80010a2:	e7ed      	b.n	8001080 <__eqsf2+0x28>

080010a4 <__gesf2>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	0042      	lsls	r2, r0, #1
 80010a8:	0245      	lsls	r5, r0, #9
 80010aa:	024e      	lsls	r6, r1, #9
 80010ac:	004c      	lsls	r4, r1, #1
 80010ae:	0fc3      	lsrs	r3, r0, #31
 80010b0:	0a6d      	lsrs	r5, r5, #9
 80010b2:	0e12      	lsrs	r2, r2, #24
 80010b4:	0a76      	lsrs	r6, r6, #9
 80010b6:	0e24      	lsrs	r4, r4, #24
 80010b8:	0fc8      	lsrs	r0, r1, #31
 80010ba:	2aff      	cmp	r2, #255	; 0xff
 80010bc:	d01b      	beq.n	80010f6 <__gesf2+0x52>
 80010be:	2cff      	cmp	r4, #255	; 0xff
 80010c0:	d00e      	beq.n	80010e0 <__gesf2+0x3c>
 80010c2:	2a00      	cmp	r2, #0
 80010c4:	d11b      	bne.n	80010fe <__gesf2+0x5a>
 80010c6:	2c00      	cmp	r4, #0
 80010c8:	d101      	bne.n	80010ce <__gesf2+0x2a>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d01c      	beq.n	8001108 <__gesf2+0x64>
 80010ce:	2d00      	cmp	r5, #0
 80010d0:	d00c      	beq.n	80010ec <__gesf2+0x48>
 80010d2:	4283      	cmp	r3, r0
 80010d4:	d01c      	beq.n	8001110 <__gesf2+0x6c>
 80010d6:	2102      	movs	r1, #2
 80010d8:	1e58      	subs	r0, r3, #1
 80010da:	4008      	ands	r0, r1
 80010dc:	3801      	subs	r0, #1
 80010de:	bd70      	pop	{r4, r5, r6, pc}
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d122      	bne.n	800112a <__gesf2+0x86>
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d1f4      	bne.n	80010d2 <__gesf2+0x2e>
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d1f2      	bne.n	80010d2 <__gesf2+0x2e>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d1f6      	bne.n	80010de <__gesf2+0x3a>
 80010f0:	2001      	movs	r0, #1
 80010f2:	4240      	negs	r0, r0
 80010f4:	e7f3      	b.n	80010de <__gesf2+0x3a>
 80010f6:	2d00      	cmp	r5, #0
 80010f8:	d117      	bne.n	800112a <__gesf2+0x86>
 80010fa:	2cff      	cmp	r4, #255	; 0xff
 80010fc:	d0f0      	beq.n	80010e0 <__gesf2+0x3c>
 80010fe:	2c00      	cmp	r4, #0
 8001100:	d1e7      	bne.n	80010d2 <__gesf2+0x2e>
 8001102:	2e00      	cmp	r6, #0
 8001104:	d1e5      	bne.n	80010d2 <__gesf2+0x2e>
 8001106:	e7e6      	b.n	80010d6 <__gesf2+0x32>
 8001108:	2000      	movs	r0, #0
 800110a:	2d00      	cmp	r5, #0
 800110c:	d0e7      	beq.n	80010de <__gesf2+0x3a>
 800110e:	e7e2      	b.n	80010d6 <__gesf2+0x32>
 8001110:	42a2      	cmp	r2, r4
 8001112:	dc05      	bgt.n	8001120 <__gesf2+0x7c>
 8001114:	dbea      	blt.n	80010ec <__gesf2+0x48>
 8001116:	42b5      	cmp	r5, r6
 8001118:	d802      	bhi.n	8001120 <__gesf2+0x7c>
 800111a:	d3e7      	bcc.n	80010ec <__gesf2+0x48>
 800111c:	2000      	movs	r0, #0
 800111e:	e7de      	b.n	80010de <__gesf2+0x3a>
 8001120:	4243      	negs	r3, r0
 8001122:	4158      	adcs	r0, r3
 8001124:	0040      	lsls	r0, r0, #1
 8001126:	3801      	subs	r0, #1
 8001128:	e7d9      	b.n	80010de <__gesf2+0x3a>
 800112a:	2002      	movs	r0, #2
 800112c:	4240      	negs	r0, r0
 800112e:	e7d6      	b.n	80010de <__gesf2+0x3a>

08001130 <__lesf2>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	0042      	lsls	r2, r0, #1
 8001134:	0245      	lsls	r5, r0, #9
 8001136:	024e      	lsls	r6, r1, #9
 8001138:	004c      	lsls	r4, r1, #1
 800113a:	0fc3      	lsrs	r3, r0, #31
 800113c:	0a6d      	lsrs	r5, r5, #9
 800113e:	0e12      	lsrs	r2, r2, #24
 8001140:	0a76      	lsrs	r6, r6, #9
 8001142:	0e24      	lsrs	r4, r4, #24
 8001144:	0fc8      	lsrs	r0, r1, #31
 8001146:	2aff      	cmp	r2, #255	; 0xff
 8001148:	d00b      	beq.n	8001162 <__lesf2+0x32>
 800114a:	2cff      	cmp	r4, #255	; 0xff
 800114c:	d00d      	beq.n	800116a <__lesf2+0x3a>
 800114e:	2a00      	cmp	r2, #0
 8001150:	d11f      	bne.n	8001192 <__lesf2+0x62>
 8001152:	2c00      	cmp	r4, #0
 8001154:	d116      	bne.n	8001184 <__lesf2+0x54>
 8001156:	2e00      	cmp	r6, #0
 8001158:	d114      	bne.n	8001184 <__lesf2+0x54>
 800115a:	2000      	movs	r0, #0
 800115c:	2d00      	cmp	r5, #0
 800115e:	d010      	beq.n	8001182 <__lesf2+0x52>
 8001160:	e009      	b.n	8001176 <__lesf2+0x46>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d10c      	bne.n	8001180 <__lesf2+0x50>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d113      	bne.n	8001192 <__lesf2+0x62>
 800116a:	2e00      	cmp	r6, #0
 800116c:	d108      	bne.n	8001180 <__lesf2+0x50>
 800116e:	2a00      	cmp	r2, #0
 8001170:	d008      	beq.n	8001184 <__lesf2+0x54>
 8001172:	4283      	cmp	r3, r0
 8001174:	d012      	beq.n	800119c <__lesf2+0x6c>
 8001176:	2102      	movs	r1, #2
 8001178:	1e58      	subs	r0, r3, #1
 800117a:	4008      	ands	r0, r1
 800117c:	3801      	subs	r0, #1
 800117e:	e000      	b.n	8001182 <__lesf2+0x52>
 8001180:	2002      	movs	r0, #2
 8001182:	bd70      	pop	{r4, r5, r6, pc}
 8001184:	2d00      	cmp	r5, #0
 8001186:	d1f4      	bne.n	8001172 <__lesf2+0x42>
 8001188:	2800      	cmp	r0, #0
 800118a:	d1fa      	bne.n	8001182 <__lesf2+0x52>
 800118c:	2001      	movs	r0, #1
 800118e:	4240      	negs	r0, r0
 8001190:	e7f7      	b.n	8001182 <__lesf2+0x52>
 8001192:	2c00      	cmp	r4, #0
 8001194:	d1ed      	bne.n	8001172 <__lesf2+0x42>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d1eb      	bne.n	8001172 <__lesf2+0x42>
 800119a:	e7ec      	b.n	8001176 <__lesf2+0x46>
 800119c:	42a2      	cmp	r2, r4
 800119e:	dc05      	bgt.n	80011ac <__lesf2+0x7c>
 80011a0:	dbf2      	blt.n	8001188 <__lesf2+0x58>
 80011a2:	42b5      	cmp	r5, r6
 80011a4:	d802      	bhi.n	80011ac <__lesf2+0x7c>
 80011a6:	d3ef      	bcc.n	8001188 <__lesf2+0x58>
 80011a8:	2000      	movs	r0, #0
 80011aa:	e7ea      	b.n	8001182 <__lesf2+0x52>
 80011ac:	4243      	negs	r3, r0
 80011ae:	4158      	adcs	r0, r3
 80011b0:	0040      	lsls	r0, r0, #1
 80011b2:	3801      	subs	r0, #1
 80011b4:	e7e5      	b.n	8001182 <__lesf2+0x52>
 80011b6:	46c0      	nop			; (mov r8, r8)

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08f      	sub	sp, #60	; 0x3c
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fd4d 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f86d 	bl	80012a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 f9df 	bl	8001588 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 80011ca:	f000 f903 	bl	80013d4 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 80011ce:	f000 f9a7 	bl	8001520 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 80011d2:	f000 f941 	bl	8001458 <_ZL12MX_TIM1_Initv>
  MX_CAN_Init();
 80011d6:	f000 f8c3 	bl	8001360 <_ZL11MX_CAN_Initv>
  /* USER CODE BEGIN 2 */
  //initializes serial communications
  RetargetInit(&huart2);
 80011da:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <main+0xd0>)
 80011dc:	0018      	movs	r0, r3
 80011de:	f000 fb7d 	bl	80018dc <_Z12RetargetInitP20__UART_HandleTypeDef>

  //initializes the timer used for delay
  HAL_TIM_Base_Start(&htim1);
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <main+0xd4>)
 80011e4:	0018      	movs	r0, r3
 80011e6:	f002 fca3 	bl	8003b30 <HAL_TIM_Base_Start>

  //initializes the final_position
  int16_t final_position;

  //CAN setup
  CANBus::Config config = { .AutoRetransmit = true, .FilterMask = 0x7ff };
 80011ea:	2424      	movs	r4, #36	; 0x24
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	0018      	movs	r0, r3
 80011f0:	230c      	movs	r3, #12
 80011f2:	001a      	movs	r2, r3
 80011f4:	2100      	movs	r1, #0
 80011f6:	f003 fbff 	bl	80049f8 <memset>
 80011fa:	0021      	movs	r1, r4
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2201      	movs	r2, #1
 8001200:	711a      	strb	r2, [r3, #4]
 8001202:	187b      	adds	r3, r7, r1
 8001204:	4a22      	ldr	r2, [pc, #136]	; (8001290 <main+0xd8>)
 8001206:	609a      	str	r2, [r3, #8]
  CANBus can = CANBus(hcan,config);
 8001208:	187a      	adds	r2, r7, r1
 800120a:	4922      	ldr	r1, [pc, #136]	; (8001294 <main+0xdc>)
 800120c:	2410      	movs	r4, #16
 800120e:	193b      	adds	r3, r7, r4
 8001210:	0018      	movs	r0, r3
 8001212:	f003 fabf 	bl	8004794 <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>
  can.Init();
 8001216:	193b      	adds	r3, r7, r4
 8001218:	0018      	movs	r0, r3
 800121a:	f003 fad1 	bl	80047c0 <_ZN3PSR6CANBus4InitEv>
  VescCAN vesc = VescCAN(can, 113);
 800121e:	1939      	adds	r1, r7, r4
 8001220:	2308      	movs	r3, #8
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2271      	movs	r2, #113	; 0x71
 8001226:	0018      	movs	r0, r3
 8001228:	f003 fb63 	bl	80048f2 <_ZN3PSR7VescCANC1ERNS_6CANBusEh>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	final_position = abs(getPosition(0));
 800122c:	2000      	movs	r0, #0
 800122e:	f000 fac9 	bl	80017c4 <getPosition>
 8001232:	0003      	movs	r3, r0
 8001234:	17da      	asrs	r2, r3, #31
 8001236:	189b      	adds	r3, r3, r2
 8001238:	4053      	eors	r3, r2
 800123a:	b29a      	uxth	r2, r3
 800123c:	2436      	movs	r4, #54	; 0x36
 800123e:	193b      	adds	r3, r7, r4
 8001240:	801a      	strh	r2, [r3, #0]
	printf("%d\n",(int)final_position);
 8001242:	193b      	adds	r3, r7, r4
 8001244:	2200      	movs	r2, #0
 8001246:	5e9a      	ldrsh	r2, [r3, r2]
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <main+0xe0>)
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f003 fbdb 	bl	8004a08 <iprintf>
	duty = ((int)final_position/1500.0);
 8001252:	193b      	adds	r3, r7, r4
 8001254:	2200      	movs	r2, #0
 8001256:	5e9b      	ldrsh	r3, [r3, r2]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fded 	bl	8000e38 <__aeabi_i2d>
 800125e:	2200      	movs	r2, #0
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <main+0xe4>)
 8001262:	f7ff faf3 	bl	800084c <__aeabi_ddiv>
 8001266:	0002      	movs	r2, r0
 8001268:	000b      	movs	r3, r1
 800126a:	0010      	movs	r0, r2
 800126c:	0019      	movs	r1, r3
 800126e:	f7ff fe13 	bl	8000e98 <__aeabi_d2f>
 8001272:	1c03      	adds	r3, r0, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
	vesc.SetDutyCycle(duty);
 8001276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001278:	2308      	movs	r3, #8
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	1c11      	adds	r1, r2, #0
 800127e:	0018      	movs	r0, r3
 8001280:	f003 fb5a 	bl	8004938 <_ZN3PSR7VescCAN12SetDutyCycleEf>
	final_position = abs(getPosition(0));
 8001284:	e7d2      	b.n	800122c <main+0x74>
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	20000138 	.word	0x20000138
 800128c:	200000f0 	.word	0x200000f0
 8001290:	000007ff 	.word	0x000007ff
 8001294:	200001bc 	.word	0x200001bc
 8001298:	08005bd4 	.word	0x08005bd4
 800129c:	40977000 	.word	0x40977000

080012a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b099      	sub	sp, #100	; 0x64
 80012a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a6:	242c      	movs	r4, #44	; 0x2c
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	0018      	movs	r0, r3
 80012ac:	2334      	movs	r3, #52	; 0x34
 80012ae:	001a      	movs	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	f003 fba1 	bl	80049f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b6:	231c      	movs	r3, #28
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	0018      	movs	r0, r3
 80012bc:	2310      	movs	r3, #16
 80012be:	001a      	movs	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	f003 fb99 	bl	80049f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c6:	003b      	movs	r3, r7
 80012c8:	0018      	movs	r0, r3
 80012ca:	231c      	movs	r3, #28
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f003 fb92 	bl	80049f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80012d4:	193b      	adds	r3, r7, r4
 80012d6:	2220      	movs	r2, #32
 80012d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	2201      	movs	r2, #1
 80012de:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e0:	193b      	adds	r3, r7, r4
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	193b      	adds	r3, r7, r4
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 f9d3 	bl	8002694 <HAL_RCC_OscConfig>
 80012ee:	0003      	movs	r3, r0
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	4193      	sbcs	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80012fa:	f000 fae9 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	211c      	movs	r1, #28
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2207      	movs	r2, #7
 8001304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2203      	movs	r2, #3
 800130a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2101      	movs	r1, #1
 800131c:	0018      	movs	r0, r3
 800131e:	f001 fd3f 	bl	8002da0 <HAL_RCC_ClockConfig>
 8001322:	0003      	movs	r3, r0
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	4193      	sbcs	r3, r2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 800132e:	f000 facf 	bl	80018d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001332:	003b      	movs	r3, r7
 8001334:	2202      	movs	r2, #2
 8001336:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001338:	003b      	movs	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	003b      	movs	r3, r7
 8001340:	0018      	movs	r0, r3
 8001342:	f001 fea7 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	0003      	movs	r3, r0
 8001348:	1e5a      	subs	r2, r3, #1
 800134a:	4193      	sbcs	r3, r2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001352:	f000 fabd 	bl	80018d0 <Error_Handler>
  }
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b019      	add	sp, #100	; 0x64
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <_ZL11MX_CAN_Initv>:

static void MX_CAN_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <_ZL11MX_CAN_Initv+0x70>)
 8001368:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 160;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 800136c:	22a0      	movs	r2, #160	; 0xa0
 800136e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 800138a:	2200      	movs	r2, #0
 800138c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001390:	2200      	movs	r2, #0
 8001392:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 8001396:	2200      	movs	r2, #0
 8001398:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 800139c:	2200      	movs	r2, #0
 800139e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_ZL11MX_CAN_Initv+0x6c>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 fcdc 	bl	8001d6c <HAL_CAN_Init>
 80013b4:	0003      	movs	r3, r0
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	4193      	sbcs	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <_ZL11MX_CAN_Initv+0x64>
  {
    Error_Handler();
 80013c0:	f000 fa86 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	200001bc 	.word	0x200001bc
 80013d0:	40006400 	.word	0x40006400

080013d4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <_ZL12MX_SPI1_Initv+0x80>)
 80013dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013e0:	2282      	movs	r2, #130	; 0x82
 80013e2:	0052      	lsls	r2, r2, #1
 80013e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013ee:	22e0      	movs	r2, #224	; 0xe0
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001422:	2207      	movs	r2, #7
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 800142e:	2208      	movs	r2, #8
 8001430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_ZL12MX_SPI1_Initv+0x7c>)
 8001434:	0018      	movs	r0, r3
 8001436:	f001 ff2b 	bl	8003290 <HAL_SPI_Init>
 800143a:	0003      	movs	r3, r0
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4193      	sbcs	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8001446:	f000 fa43 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000008c 	.word	0x2000008c
 8001454:	40013000 	.word	0x40013000

08001458 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	2308      	movs	r3, #8
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	0018      	movs	r0, r3
 8001464:	2310      	movs	r3, #16
 8001466:	001a      	movs	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f003 fac5 	bl	80049f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	003b      	movs	r3, r7
 8001470:	0018      	movs	r0, r3
 8001472:	2308      	movs	r3, #8
 8001474:	001a      	movs	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	f003 fabe 	bl	80049f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 800147e:	4a26      	ldr	r2, [pc, #152]	; (8001518 <_ZL12MX_TIM1_Initv+0xc0>)
 8001480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 8001484:	222f      	movs	r2, #47	; 0x2f
 8001486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 8001490:	4a22      	ldr	r2, [pc, #136]	; (800151c <_ZL12MX_TIM1_Initv+0xc4>)
 8001492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800149a:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f002 faf1 	bl	8003a90 <HAL_TIM_Base_Init>
 80014ae:	0003      	movs	r3, r0
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	4193      	sbcs	r3, r2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZL12MX_TIM1_Initv+0x66>
  {
    Error_Handler();
 80014ba:	f000 fa09 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014be:	2108      	movs	r1, #8
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	0152      	lsls	r2, r2, #5
 80014c6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014c8:	187a      	adds	r2, r7, r1
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f002 fb78 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 80014d4:	0003      	movs	r3, r0
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	4193      	sbcs	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 80014e0:	f000 f9f6 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e4:	003b      	movs	r3, r7
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	003b      	movs	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f0:	003a      	movs	r2, r7
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_ZL12MX_TIM1_Initv+0xbc>)
 80014f4:	0011      	movs	r1, r2
 80014f6:	0018      	movs	r0, r3
 80014f8:	f002 fd52 	bl	8003fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	0003      	movs	r3, r0
 80014fe:	1e5a      	subs	r2, r3, #1
 8001500:	4193      	sbcs	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8001508:	f000 f9e2 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b006      	add	sp, #24
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200000f0 	.word	0x200000f0
 8001518:	40012c00 	.word	0x40012c00
 800151c:	0000fffe 	.word	0x0000fffe

08001520 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 800152c:	22e1      	movs	r2, #225	; 0xe1
 800152e:	0252      	lsls	r2, r2, #9
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001564:	0018      	movs	r0, r3
 8001566:	f002 fd79 	bl	800405c <HAL_UART_Init>
 800156a:	0003      	movs	r3, r0
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	4193      	sbcs	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8001576:	f000 f9ab 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000138 	.word	0x20000138
 8001584:	40004400 	.word	0x40004400

08001588 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	240c      	movs	r4, #12
 8001590:	193b      	adds	r3, r7, r4
 8001592:	0018      	movs	r0, r3
 8001594:	2314      	movs	r3, #20
 8001596:	001a      	movs	r2, r3
 8001598:	2100      	movs	r1, #0
 800159a:	f003 fa2d 	bl	80049f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015a0:	695a      	ldr	r2, [r3, #20]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	03c9      	lsls	r1, r1, #15
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	03db      	lsls	r3, r3, #15
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0289      	lsls	r1, r1, #10
 80015c4:	430a      	orrs	r2, r1
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	4013      	ands	r3, r2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	02c9      	lsls	r1, r1, #11
 80015e0:	430a      	orrs	r2, r1
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_ZL12MX_GPIO_Initv+0xa4>)
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	02db      	lsls	r3, r3, #11
 80015ec:	4013      	ands	r3, r2
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <_ZL12MX_GPIO_Initv+0xa8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	2108      	movs	r1, #8
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 f82d 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015fe:	0021      	movs	r1, r4
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2208      	movs	r2, #8
 8001604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2201      	movs	r2, #1
 800160a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	187b      	adds	r3, r7, r1
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_ZL12MX_GPIO_Initv+0xa8>)
 800161c:	0019      	movs	r1, r3
 800161e:	0010      	movs	r0, r2
 8001620:	f000 fea2 	bl	8002368 <HAL_GPIO_Init>

}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b009      	add	sp, #36	; 0x24
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <BitExtract>:

/* USER CODE BEGIN 4 */
int BitExtract(int value, int bit)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	return((value>>bit) & 1);
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	411a      	asrs	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	2201      	movs	r2, #1
 8001648:	4013      	ands	r3, r2
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <delay_us>:

void delay_us (uint16_t us)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	0002      	movs	r2, r0
 800165c:	1dbb      	adds	r3, r7, #6
 800165e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <delay_us+0x34>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <delay_us+0x34>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	419b      	sbcs	r3, r3
 8001676:	425b      	negs	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d000      	beq.n	8001680 <delay_us+0x2c>
 800167e:	e7f3      	b.n	8001668 <delay_us+0x14>

}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200000f0 	.word	0x200000f0

0800168c <AMT223_Check>:
#define bx BitExtract
bool AMT223_Check(uint16_t value)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	0002      	movs	r2, r0
 8001694:	1dbb      	adds	r3, r7, #6
 8001696:	801a      	strh	r2, [r3, #0]
	int k1 = BitExtract(value, 15);
 8001698:	1dbb      	adds	r3, r7, #6
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	0018      	movs	r0, r3
 80016a0:	f7ff ffc8 	bl	8001634 <BitExtract>
 80016a4:	0003      	movs	r3, r0
 80016a6:	617b      	str	r3, [r7, #20]
	int k0 = BitExtract(value, 14);
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	210e      	movs	r1, #14
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff ffc0 	bl	8001634 <BitExtract>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

	int checkOdd = !(bx(value,13)^bx(value,11)^bx(value,9)^bx(value,7)^bx(value,5)^bx(value,3)^bx(value,1));
 80016b8:	1dbb      	adds	r3, r7, #6
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	210d      	movs	r1, #13
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff ffb8 	bl	8001634 <BitExtract>
 80016c4:	0004      	movs	r4, r0
 80016c6:	1dbb      	adds	r3, r7, #6
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	210b      	movs	r1, #11
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ffb1 	bl	8001634 <BitExtract>
 80016d2:	0003      	movs	r3, r0
 80016d4:	405c      	eors	r4, r3
 80016d6:	1dbb      	adds	r3, r7, #6
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	2109      	movs	r1, #9
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff ffa9 	bl	8001634 <BitExtract>
 80016e2:	0003      	movs	r3, r0
 80016e4:	405c      	eors	r4, r3
 80016e6:	1dbb      	adds	r3, r7, #6
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2107      	movs	r1, #7
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7ff ffa1 	bl	8001634 <BitExtract>
 80016f2:	0003      	movs	r3, r0
 80016f4:	405c      	eors	r4, r3
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2105      	movs	r1, #5
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff99 	bl	8001634 <BitExtract>
 8001702:	0003      	movs	r3, r0
 8001704:	405c      	eors	r4, r3
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2103      	movs	r1, #3
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff ff91 	bl	8001634 <BitExtract>
 8001712:	0003      	movs	r3, r0
 8001714:	405c      	eors	r4, r3
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	2101      	movs	r1, #1
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ff89 	bl	8001634 <BitExtract>
 8001722:	0003      	movs	r3, r0
 8001724:	1ae3      	subs	r3, r4, r3
 8001726:	425a      	negs	r2, r3
 8001728:	4153      	adcs	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	60fb      	str	r3, [r7, #12]
	int checkEven = !(bx(value,12)^bx(value,10)^bx(value,8)^bx(value,6)^bx(value,4)^bx(value,2)^bx(value,0));
 800172e:	1dbb      	adds	r3, r7, #6
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	210c      	movs	r1, #12
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ff7d 	bl	8001634 <BitExtract>
 800173a:	0004      	movs	r4, r0
 800173c:	1dbb      	adds	r3, r7, #6
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	210a      	movs	r1, #10
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff ff76 	bl	8001634 <BitExtract>
 8001748:	0003      	movs	r3, r0
 800174a:	405c      	eors	r4, r3
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2108      	movs	r1, #8
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff ff6e 	bl	8001634 <BitExtract>
 8001758:	0003      	movs	r3, r0
 800175a:	405c      	eors	r4, r3
 800175c:	1dbb      	adds	r3, r7, #6
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	2106      	movs	r1, #6
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff66 	bl	8001634 <BitExtract>
 8001768:	0003      	movs	r3, r0
 800176a:	405c      	eors	r4, r3
 800176c:	1dbb      	adds	r3, r7, #6
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	2104      	movs	r1, #4
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff5e 	bl	8001634 <BitExtract>
 8001778:	0003      	movs	r3, r0
 800177a:	405c      	eors	r4, r3
 800177c:	1dbb      	adds	r3, r7, #6
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2102      	movs	r1, #2
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff ff56 	bl	8001634 <BitExtract>
 8001788:	0003      	movs	r3, r0
 800178a:	405c      	eors	r4, r3
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff ff4e 	bl	8001634 <BitExtract>
 8001798:	0003      	movs	r3, r0
 800179a:	1ae3      	subs	r3, r4, r3
 800179c:	425a      	negs	r2, r3
 800179e:	4153      	adcs	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	60bb      	str	r3, [r7, #8]

	return((k1 == checkOdd) && (k0 == checkEven));
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d105      	bne.n	80017b8 <AMT223_Check+0x12c>
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d101      	bne.n	80017b8 <AMT223_Check+0x12c>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <AMT223_Check+0x12e>
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b007      	add	sp, #28
 80017c0:	bd90      	pop	{r4, r7, pc}
	...

080017c4 <getPosition>:
	return total;
}


int16_t getPosition(int16_t initial_position)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	0002      	movs	r2, r0
 80017cc:	1dbb      	adds	r3, r7, #6
 80017ce:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef checkStatus;

	uint8_t spi_Tx[2];
	uint8_t spi_Rx[2];

	spi_Tx[0] = 0x00;
 80017d0:	2110      	movs	r1, #16
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
	spi_Tx[1] = 0x00;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	705a      	strb	r2, [r3, #1]

	do{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <getPosition+0x104>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	2108      	movs	r1, #8
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 ff37 	bl	8002658 <HAL_GPIO_WritePin>
		delay_us(3);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f7ff ff32 	bl	8001654 <delay_us>
		checkStatus = HAL_SPI_TransmitReceive(&hspi1,&spi_Tx[0],&spi_Rx[0],1,50);
 80017f0:	2517      	movs	r5, #23
 80017f2:	197c      	adds	r4, r7, r5
 80017f4:	260c      	movs	r6, #12
 80017f6:	19ba      	adds	r2, r7, r6
 80017f8:	2310      	movs	r3, #16
 80017fa:	18f9      	adds	r1, r7, r3
 80017fc:	4833      	ldr	r0, [pc, #204]	; (80018cc <getPosition+0x108>)
 80017fe:	2332      	movs	r3, #50	; 0x32
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	f001 fdfc 	bl	8003400 <HAL_SPI_TransmitReceive>
 8001808:	0003      	movs	r3, r0
 800180a:	7023      	strb	r3, [r4, #0]
		delay_us(3);
 800180c:	2003      	movs	r0, #3
 800180e:	f7ff ff21 	bl	8001654 <delay_us>
		checkStatus = (HAL_StatusTypeDef)((int)checkStatus & (int)HAL_SPI_TransmitReceive(&hspi1,&spi_Tx[1],&spi_Rx[1],1,50));
 8001812:	19bb      	adds	r3, r7, r6
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	2310      	movs	r3, #16
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	1c59      	adds	r1, r3, #1
 800181c:	482b      	ldr	r0, [pc, #172]	; (80018cc <getPosition+0x108>)
 800181e:	2332      	movs	r3, #50	; 0x32
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	f001 fdec 	bl	8003400 <HAL_SPI_TransmitReceive>
 8001828:	0003      	movs	r3, r0
 800182a:	0019      	movs	r1, r3
 800182c:	002c      	movs	r4, r5
 800182e:	193b      	adds	r3, r7, r4
 8001830:	193a      	adds	r2, r7, r4
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
		delay_us(4);
 8001838:	2004      	movs	r0, #4
 800183a:	f7ff ff0b 	bl	8001654 <delay_us>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <getPosition+0x104>)
 8001840:	2201      	movs	r2, #1
 8001842:	2108      	movs	r1, #8
 8001844:	0018      	movs	r0, r3
 8001846:	f000 ff07 	bl	8002658 <HAL_GPIO_WritePin>
		delay_us(40);
 800184a:	2028      	movs	r0, #40	; 0x28
 800184c:	f7ff ff02 	bl	8001654 <delay_us>

		final_position = ((uint16_t)spi_Rx[0] << 8) | (uint16_t)spi_Rx[1];
 8001850:	19bb      	adds	r3, r7, r6
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	19bb      	adds	r3, r7, r6
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21a      	sxth	r2, r3
 8001862:	2114      	movs	r1, #20
 8001864:	187b      	adds	r3, r7, r1
 8001866:	801a      	strh	r2, [r3, #0]

		final_position &=(0b0011111111111111);
 8001868:	187b      	adds	r3, r7, r1
 800186a:	187a      	adds	r2, r7, r1
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	0492      	lsls	r2, r2, #18
 8001870:	0c92      	lsrs	r2, r2, #18
 8001872:	801a      	strh	r2, [r3, #0]
	  }while(checkStatus != HAL_OK || !AMT223_Check(final_position));
 8001874:	193b      	adds	r3, r7, r4
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10b      	bne.n	8001894 <getPosition+0xd0>
 800187c:	187b      	adds	r3, r7, r1
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff03 	bl	800168c <AMT223_Check>
 8001886:	0003      	movs	r3, r0
 8001888:	001a      	movs	r2, r3
 800188a:	2301      	movs	r3, #1
 800188c:	4053      	eors	r3, r2
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <getPosition+0xd4>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <getPosition+0xd6>
 8001898:	2300      	movs	r3, #0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d000      	beq.n	80018a0 <getPosition+0xdc>
	do{
 800189e:	e79e      	b.n	80017de <getPosition+0x1a>

	actual_position = (((final_position << 2) - (initial_position << 2)) >> 2);
 80018a0:	2314      	movs	r3, #20
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	2100      	movs	r1, #0
 80018ac:	5e5b      	ldrsh	r3, [r3, r1]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	109a      	asrs	r2, r3, #2
 80018b4:	2112      	movs	r1, #18
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	801a      	strh	r2, [r3, #0]
	return actual_position;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	5e9b      	ldrsh	r3, [r3, r2]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b007      	add	sp, #28
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	48000400 	.word	0x48000400
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <_Z12RetargetInitP20__UART_HandleTypeDef>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_Z12RetargetInitP20__UART_HandleTypeDef+0x28>)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_Z12RetargetInitP20__UART_HandleTypeDef+0x2c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6898      	ldr	r0, [r3, #8]
 80018f0:	2300      	movs	r3, #0
 80018f2:	2202      	movs	r2, #2
 80018f4:	2100      	movs	r1, #0
 80018f6:	f003 f8a1 	bl	8004a3c <setvbuf>
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b002      	add	sp, #8
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	200001e4 	.word	0x200001e4
 8001908:	2000000c 	.word	0x2000000c

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_MspInit+0x44>)
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_MspInit+0x44>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	619a      	str	r2, [r3, #24]
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <HAL_MspInit+0x44>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x44>)
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_MspInit+0x44>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	430a      	orrs	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_MspInit+0x44>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	4013      	ands	r3, r2
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b08b      	sub	sp, #44	; 0x2c
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	2414      	movs	r4, #20
 800195e:	193b      	adds	r3, r7, r4
 8001960:	0018      	movs	r0, r3
 8001962:	2314      	movs	r3, #20
 8001964:	001a      	movs	r2, r3
 8001966:	2100      	movs	r1, #0
 8001968:	f003 f846 	bl	80049f8 <memset>
  if(hcan->Instance==CAN)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_CAN_MspInit+0x94>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d133      	bne.n	80019de <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_CAN_MspInit+0x98>)
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_CAN_MspInit+0x98>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	0489      	lsls	r1, r1, #18
 8001980:	430a      	orrs	r2, r1
 8001982:	61da      	str	r2, [r3, #28]
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_CAN_MspInit+0x98>)
 8001986:	69da      	ldr	r2, [r3, #28]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	049b      	lsls	r3, r3, #18
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_CAN_MspInit+0x98>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_CAN_MspInit+0x98>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	0289      	lsls	r1, r1, #10
 800199c:	430a      	orrs	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_CAN_MspInit+0x98>)
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	029b      	lsls	r3, r3, #10
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	22c0      	movs	r2, #192	; 0xc0
 80019b2:	0152      	lsls	r2, r2, #5
 80019b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	0021      	movs	r1, r4
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2202      	movs	r2, #2
 80019bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2203      	movs	r2, #3
 80019c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2204      	movs	r2, #4
 80019ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	2390      	movs	r3, #144	; 0x90
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	0011      	movs	r1, r2
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 fcc5 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b00b      	add	sp, #44	; 0x2c
 80019e4:	bd90      	pop	{r4, r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40006400 	.word	0x40006400
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b08b      	sub	sp, #44	; 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	2414      	movs	r4, #20
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	0018      	movs	r0, r3
 80019fe:	2314      	movs	r3, #20
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f002 fff8 	bl	80049f8 <memset>
  if(hspi->Instance==SPI1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_SPI_MspInit+0x90>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d132      	bne.n	8001a78 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0149      	lsls	r1, r1, #5
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0289      	lsls	r1, r1, #10
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_SPI_MspInit+0x94>)
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	0021      	movs	r1, r4
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	22e0      	movs	r2, #224	; 0xe0
 8001a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2202      	movs	r2, #2
 8001a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	2203      	movs	r2, #3
 8001a62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	187a      	adds	r2, r7, r1
 8001a6c:	2390      	movs	r3, #144	; 0x90
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	0011      	movs	r1, r2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fc78 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b00b      	add	sp, #44	; 0x2c
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	40013000 	.word	0x40013000
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_TIM_Base_MspInit+0x38>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0109      	lsls	r1, r1, #4
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b08b      	sub	sp, #44	; 0x2c
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	2414      	movs	r4, #20
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	2314      	movs	r3, #20
 8001ad8:	001a      	movs	r2, r3
 8001ada:	2100      	movs	r1, #0
 8001adc:	f002 ff8c 	bl	80049f8 <memset>
  if(huart->Instance==USART2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_UART_MspInit+0x90>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d132      	bne.n	8001b50 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0289      	lsls	r1, r1, #10
 8001af4:	430a      	orrs	r2, r1
 8001af6:	61da      	str	r2, [r3, #28]
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0289      	lsls	r1, r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b22:	0021      	movs	r1, r4
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2201      	movs	r2, #1
 8001b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b42:	187a      	adds	r2, r7, r1
 8001b44:	2390      	movs	r3, #144	; 0x90
 8001b46:	05db      	lsls	r3, r3, #23
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f000 fc0c 	bl	8002368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b00b      	add	sp, #44	; 0x2c
 8001b56:	bd90      	pop	{r4, r7, pc}
 8001b58:	40004400 	.word	0x40004400
 8001b5c:	40021000 	.word	0x40021000

08001b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <NMI_Handler+0x4>

08001b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <HardFault_Handler+0x4>

08001b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b84:	f000 f8b2 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <_sbrk+0x5c>)
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <_sbrk+0x60>)
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x64>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <_sbrk+0x68>)
 8001bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d207      	bcs.n	8001bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc0:	f002 fef0 	bl	80049a4 <__errno>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	425b      	negs	r3, r3
 8001bce:	e009      	b.n	8001be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	18d2      	adds	r2, r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <_sbrk+0x64>)
 8001be0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b006      	add	sp, #24
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20004000 	.word	0x20004000
 8001bf0:	00000400 	.word	0x00000400
 8001bf4:	200001e8 	.word	0x200001e8
 8001bf8:	20000200 	.word	0x20000200

08001bfc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c24:	4c0b      	ldr	r4, [pc, #44]	; (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c32:	f7ff ffe3 	bl	8001bfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c36:	f002 febb 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c3a:	f7ff fabd 	bl	80011b8 <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   r0, =_estack
 8001c40:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c4c:	08005d30 	.word	0x08005d30
  ldr r2, =_sbss
 8001c50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c54:	20000200 	.word	0x20000200

08001c58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_COMP_IRQHandler>
	...

08001c5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <HAL_Init+0x24>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_Init+0x24>)
 8001c66:	2110      	movs	r1, #16
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 f809 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c72:	f7ff fe4b 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	40022000 	.word	0x40022000

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_InitTick+0x5c>)
 8001c8e:	681c      	ldr	r4, [r3, #0]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_InitTick+0x60>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	0019      	movs	r1, r3
 8001c96:	23fa      	movs	r3, #250	; 0xfa
 8001c98:	0098      	lsls	r0, r3, #2
 8001c9a:	f7fe fa3f 	bl	800011c <__udivsi3>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	0020      	movs	r0, r4
 8001ca4:	f7fe fa3a 	bl	800011c <__udivsi3>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 fb4f 	bl	800234e <HAL_SYSTICK_Config>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e00f      	b.n	8001cd8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d80b      	bhi.n	8001cd6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	425b      	negs	r3, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 fb2c 	bl	8002324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_InitTick+0x64>)
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b003      	add	sp, #12
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	001a      	movs	r2, r3
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	18d2      	adds	r2, r2, r3
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <HAL_IncTick+0x20>)
 8001cfe:	601a      	str	r2, [r3, #0]
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200001ec 	.word	0x200001ec

08001d10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_GetTick+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	200001ec 	.word	0x200001ec

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	001a      	movs	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	189b      	adds	r3, r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	f7ff ffe0 	bl	8001d10 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	20000008 	.word	0x20000008

08001d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0f0      	b.n	8001f60 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	5c9b      	ldrb	r3, [r3, r2]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fde1 	bl	8001954 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da2:	f7ff ffb5 	bl	8001d10 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001daa:	e013      	b.n	8001dd4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dac:	f7ff ffb0 	bl	8001d10 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b0a      	cmp	r3, #10
 8001db8:	d90c      	bls.n	8001dd4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	0292      	lsls	r2, r2, #10
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	2105      	movs	r1, #5
 8001dce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0c5      	b.n	8001f60 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0e5      	beq.n	8001dac <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2102      	movs	r1, #2
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff ff8e 	bl	8001d10 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df8:	e013      	b.n	8001e22 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dfa:	f7ff ff89 	bl	8001d10 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	d90c      	bls.n	8001e22 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0292      	lsls	r2, r2, #10
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	2105      	movs	r1, #5
 8001e1c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e09e      	b.n	8001f60 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d1e5      	bne.n	8001dfa <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7e1b      	ldrb	r3, [r3, #24]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	438a      	bics	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e5b      	ldrb	r3, [r3, #25]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2140      	movs	r1, #64	; 0x40
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2140      	movs	r1, #64	; 0x40
 8001e7e:	438a      	bics	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7e9b      	ldrb	r3, [r3, #26]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2120      	movs	r1, #32
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	438a      	bics	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7edb      	ldrb	r3, [r3, #27]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d108      	bne.n	8001ec6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7f1b      	ldrb	r3, [r3, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2108      	movs	r1, #8
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2108      	movs	r1, #8
 8001efc:	438a      	bics	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7f5b      	ldrb	r3, [r3, #29]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d108      	bne.n	8001f1a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2104      	movs	r1, #4
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2104      	movs	r1, #4
 8001f26:	438a      	bics	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	0011      	movs	r1, r2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b004      	add	sp, #16
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	5c9b      	ldrb	r3, [r3, r2]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d12f      	bne.n	8001fdc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2101      	movs	r1, #1
 8001f90:	438a      	bics	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff febc 	bl	8001d10 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f9c:	e013      	b.n	8001fc6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f9e:	f7ff feb7 	bl	8001d10 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b0a      	cmp	r3, #10
 8001faa:	d90c      	bls.n	8001fc6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	0292      	lsls	r2, r2, #10
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	2105      	movs	r1, #5
 8001fc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e012      	b.n	8001fec <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1e5      	bne.n	8001f9e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e007      	b.n	8001fec <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0312      	lsls	r2, r2, #12
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
  }
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b004      	add	sp, #16
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002002:	201f      	movs	r0, #31
 8002004:	183b      	adds	r3, r7, r0
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	2120      	movs	r1, #32
 800200a:	5c52      	ldrb	r2, [r2, r1]
 800200c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002016:	183b      	adds	r3, r7, r0
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d004      	beq.n	8002028 <HAL_CAN_AddTxMessage+0x34>
 800201e:	183b      	adds	r3, r7, r0
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d000      	beq.n	8002028 <HAL_CAN_AddTxMessage+0x34>
 8002026:	e0b7      	b.n	8002198 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	04db      	lsls	r3, r3, #19
 800202e:	4013      	ands	r3, r2
 8002030:	d10a      	bne.n	8002048 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800203a:	d105      	bne.n	8002048 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	055b      	lsls	r3, r3, #21
 8002042:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002044:	d100      	bne.n	8002048 <HAL_CAN_AddTxMessage+0x54>
 8002046:	e09e      	b.n	8002186 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	0e1b      	lsrs	r3, r3, #24
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d908      	bls.n	800206a <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	0412      	lsls	r2, r2, #16
 8002060:	431a      	orrs	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e09e      	b.n	80021a8 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800206a:	2201      	movs	r2, #1
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10c      	bne.n	8002096 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4311      	orrs	r1, r2
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	3218      	adds	r2, #24
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	50d1      	str	r1, [r2, r3]
 8002094:	e00f      	b.n	80020b6 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a0:	431a      	orrs	r2, r3
 80020a2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80020ac:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	3218      	adds	r2, #24
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3318      	adds	r3, #24
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	18cb      	adds	r3, r1, r3
 80020c6:	3304      	adds	r3, #4
 80020c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	7d1b      	ldrb	r3, [r3, #20]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d112      	bne.n	80020f8 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3318      	adds	r3, #24
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	18d3      	adds	r3, r2, r3
 80020de:	3304      	adds	r3, #4
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3318      	adds	r3, #24
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	18cb      	adds	r3, r1, r3
 80020f4:	3304      	adds	r3, #4
 80020f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3307      	adds	r3, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	061a      	lsls	r2, r3, #24
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3306      	adds	r3, #6
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3305      	adds	r3, #5
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	0019      	movs	r1, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	23c6      	movs	r3, #198	; 0xc6
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	0109      	lsls	r1, r1, #4
 800212a:	1841      	adds	r1, r0, r1
 800212c:	18cb      	adds	r3, r1, r3
 800212e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3303      	adds	r3, #3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	061a      	lsls	r2, r3, #24
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3302      	adds	r3, #2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	0019      	movs	r1, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6818      	ldr	r0, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	23c4      	movs	r3, #196	; 0xc4
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	0109      	lsls	r1, r1, #4
 8002160:	1841      	adds	r1, r0, r1
 8002162:	18cb      	adds	r3, r1, r3
 8002164:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	3218      	adds	r2, #24
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	58d2      	ldr	r2, [r2, r3]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	4311      	orrs	r1, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	3218      	adds	r2, #24
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e010      	b.n	80021a8 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0392      	lsls	r2, r2, #14
 800218e:	431a      	orrs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e007      	b.n	80021a8 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	02d2      	lsls	r2, r2, #11
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
  }
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b008      	add	sp, #32
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021be:	200b      	movs	r0, #11
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	2120      	movs	r1, #32
 80021c6:	5c52      	ldrb	r2, [r2, r1]
 80021c8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ca:	0002      	movs	r2, r0
 80021cc:	18bb      	adds	r3, r7, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d003      	beq.n	80021dc <HAL_CAN_IsTxMessagePending+0x2c>
 80021d4:	18bb      	adds	r3, r7, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d10b      	bne.n	80021f4 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	0692      	lsls	r2, r2, #26
 80021e6:	401a      	ands	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	069b      	lsls	r3, r3, #26
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 80021f0:	2301      	movs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80021f4:	68fb      	ldr	r3, [r7, #12]
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	0002      	movs	r2, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b7f      	cmp	r3, #127	; 0x7f
 8002214:	d828      	bhi.n	8002268 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002216:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <__NVIC_SetPriority+0xd4>)
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b25b      	sxtb	r3, r3
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	33c0      	adds	r3, #192	; 0xc0
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	589b      	ldr	r3, [r3, r2]
 8002226:	1dfa      	adds	r2, r7, #7
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	0011      	movs	r1, r2
 800222c:	2203      	movs	r2, #3
 800222e:	400a      	ands	r2, r1
 8002230:	00d2      	lsls	r2, r2, #3
 8002232:	21ff      	movs	r1, #255	; 0xff
 8002234:	4091      	lsls	r1, r2
 8002236:	000a      	movs	r2, r1
 8002238:	43d2      	mvns	r2, r2
 800223a:	401a      	ands	r2, r3
 800223c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	22ff      	movs	r2, #255	; 0xff
 8002244:	401a      	ands	r2, r3
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	0018      	movs	r0, r3
 800224c:	2303      	movs	r3, #3
 800224e:	4003      	ands	r3, r0
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002254:	481f      	ldr	r0, [pc, #124]	; (80022d4 <__NVIC_SetPriority+0xd4>)
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b25b      	sxtb	r3, r3
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	430a      	orrs	r2, r1
 8002260:	33c0      	adds	r3, #192	; 0xc0
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002266:	e031      	b.n	80022cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <__NVIC_SetPriority+0xd8>)
 800226a:	1dfb      	adds	r3, r7, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	0019      	movs	r1, r3
 8002270:	230f      	movs	r3, #15
 8002272:	400b      	ands	r3, r1
 8002274:	3b08      	subs	r3, #8
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3306      	adds	r3, #6
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	3304      	adds	r3, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1dfa      	adds	r2, r7, #7
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	0011      	movs	r1, r2
 8002288:	2203      	movs	r2, #3
 800228a:	400a      	ands	r2, r1
 800228c:	00d2      	lsls	r2, r2, #3
 800228e:	21ff      	movs	r1, #255	; 0xff
 8002290:	4091      	lsls	r1, r2
 8002292:	000a      	movs	r2, r1
 8002294:	43d2      	mvns	r2, r2
 8002296:	401a      	ands	r2, r3
 8002298:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	401a      	ands	r2, r3
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0018      	movs	r0, r3
 80022a8:	2303      	movs	r3, #3
 80022aa:	4003      	ands	r3, r0
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b0:	4809      	ldr	r0, [pc, #36]	; (80022d8 <__NVIC_SetPriority+0xd8>)
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	001c      	movs	r4, r3
 80022b8:	230f      	movs	r3, #15
 80022ba:	4023      	ands	r3, r4
 80022bc:	3b08      	subs	r3, #8
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	430a      	orrs	r2, r1
 80022c2:	3306      	adds	r3, #6
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	18c3      	adds	r3, r0, r3
 80022c8:	3304      	adds	r3, #4
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b003      	add	sp, #12
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1e5a      	subs	r2, r3, #1
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	045b      	lsls	r3, r3, #17
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d301      	bcc.n	80022f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f0:	2301      	movs	r3, #1
 80022f2:	e010      	b.n	8002316 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <SysTick_Config+0x44>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	3a01      	subs	r2, #1
 80022fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fc:	2301      	movs	r3, #1
 80022fe:	425b      	negs	r3, r3
 8002300:	2103      	movs	r1, #3
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff ff7c 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x44>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x44>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	210f      	movs	r1, #15
 8002330:	187b      	adds	r3, r7, r1
 8002332:	1c02      	adds	r2, r0, #0
 8002334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	187b      	adds	r3, r7, r1
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b25b      	sxtb	r3, r3
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ffbf 	bl	80022dc <SysTick_Config>
 800235e:	0003      	movs	r3, r0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e155      	b.n	8002624 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4091      	lsls	r1, r2
 8002382:	000a      	movs	r2, r1
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d100      	bne.n	8002390 <HAL_GPIO_Init+0x28>
 800238e:	e146      	b.n	800261e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2203      	movs	r2, #3
 8002396:	4013      	ands	r3, r2
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	409a      	lsls	r2, r3
 80023b6:	0013      	movs	r3, r2
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	0013      	movs	r3, r2
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
 80023e4:	0013      	movs	r3, r2
 80023e6:	43da      	mvns	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	2201      	movs	r2, #1
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2203      	movs	r2, #3
 8002410:	4013      	ands	r3, r2
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	43da      	mvns	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2203      	movs	r2, #3
 800244c:	4013      	ands	r3, r2
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	58d3      	ldr	r3, [r2, r3]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2207      	movs	r2, #7
 8002464:	4013      	ands	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2107      	movs	r1, #7
 800247e:	400b      	ands	r3, r1
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	0092      	lsls	r2, r2, #2
 8002496:	6939      	ldr	r1, [r7, #16]
 8002498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	409a      	lsls	r2, r3
 80024a8:	0013      	movs	r3, r2
 80024aa:	43da      	mvns	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4013      	ands	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	401a      	ands	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	23c0      	movs	r3, #192	; 0xc0
 80024d4:	029b      	lsls	r3, r3, #10
 80024d6:	4013      	ands	r3, r2
 80024d8:	d100      	bne.n	80024dc <HAL_GPIO_Init+0x174>
 80024da:	e0a0      	b.n	800261e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b57      	ldr	r3, [pc, #348]	; (800263c <HAL_GPIO_Init+0x2d4>)
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	4b56      	ldr	r3, [pc, #344]	; (800263c <HAL_GPIO_Init+0x2d4>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	4b54      	ldr	r3, [pc, #336]	; (800263c <HAL_GPIO_Init+0x2d4>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_GPIO_Init+0x2d8>)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	589b      	ldr	r3, [r3, r2]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	409a      	lsls	r2, r3
 800250e:	0013      	movs	r3, r2
 8002510:	43da      	mvns	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	2390      	movs	r3, #144	; 0x90
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	429a      	cmp	r2, r3
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x1ee>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a47      	ldr	r2, [pc, #284]	; (8002644 <HAL_GPIO_Init+0x2dc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x1ea>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a46      	ldr	r2, [pc, #280]	; (8002648 <HAL_GPIO_Init+0x2e0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x1e6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a45      	ldr	r2, [pc, #276]	; (800264c <HAL_GPIO_Init+0x2e4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x1e2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a44      	ldr	r2, [pc, #272]	; (8002650 <HAL_GPIO_Init+0x2e8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x1de>
 8002542:	2304      	movs	r3, #4
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x1f0>
 8002546:	2305      	movs	r3, #5
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x1f0>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x1f0>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x1f0>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x1f0>
 8002556:	2300      	movs	r3, #0
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	2103      	movs	r1, #3
 800255c:	400a      	ands	r2, r1
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002568:	4935      	ldr	r1, [pc, #212]	; (8002640 <HAL_GPIO_Init+0x2d8>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43da      	mvns	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	025b      	lsls	r3, r3, #9
 800258e:	4013      	ands	r3, r2
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43da      	mvns	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	035b      	lsls	r3, r3, #13
 80025e2:	4013      	ands	r3, r2
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	43da      	mvns	r2, r3
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	039b      	lsls	r3, r3, #14
 800260c:	4013      	ands	r3, r2
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <HAL_GPIO_Init+0x2ec>)
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	40da      	lsrs	r2, r3
 800262c:	1e13      	subs	r3, r2, #0
 800262e:	d000      	beq.n	8002632 <HAL_GPIO_Init+0x2ca>
 8002630:	e6a2      	b.n	8002378 <HAL_GPIO_Init+0x10>
  } 
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b006      	add	sp, #24
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000
 8002644:	48000400 	.word	0x48000400
 8002648:	48000800 	.word	0x48000800
 800264c:	48000c00 	.word	0x48000c00
 8002650:	48001000 	.word	0x48001000
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	0008      	movs	r0, r1
 8002662:	0011      	movs	r1, r2
 8002664:	1cbb      	adds	r3, r7, #2
 8002666:	1c02      	adds	r2, r0, #0
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	1c7b      	adds	r3, r7, #1
 800266c:	1c0a      	adds	r2, r1, #0
 800266e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002670:	1c7b      	adds	r3, r7, #1
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002678:	1cbb      	adds	r3, r7, #2
 800267a:	881a      	ldrh	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002680:	e003      	b.n	800268a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002682:	1cbb      	adds	r3, r7, #2
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f000 fb76 	bl	8002d94 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_RCC_OscConfig+0x20>
 80026b2:	e08e      	b.n	80027d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026b4:	4bc5      	ldr	r3, [pc, #788]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	220c      	movs	r2, #12
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d00e      	beq.n	80026de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c0:	4bc2      	ldr	r3, [pc, #776]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	220c      	movs	r2, #12
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d117      	bne.n	80026fc <HAL_RCC_OscConfig+0x68>
 80026cc:	4bbf      	ldr	r3, [pc, #764]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	23c0      	movs	r3, #192	; 0xc0
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	401a      	ands	r2, r3
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10e      	bne.n	80026fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026de:	4bbb      	ldr	r3, [pc, #748]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	4013      	ands	r3, r2
 80026e8:	d100      	bne.n	80026ec <HAL_RCC_OscConfig+0x58>
 80026ea:	e071      	b.n	80027d0 <HAL_RCC_OscConfig+0x13c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_RCC_OscConfig+0x62>
 80026f4:	e06c      	b.n	80027d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f000 fb4c 	bl	8002d94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x80>
 8002704:	4bb1      	ldr	r3, [pc, #708]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4bb0      	ldr	r3, [pc, #704]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	0249      	lsls	r1, r1, #9
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e02f      	b.n	8002774 <HAL_RCC_OscConfig+0xe0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0xa2>
 800271c:	4bab      	ldr	r3, [pc, #684]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4baa      	ldr	r3, [pc, #680]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002722:	49ab      	ldr	r1, [pc, #684]	; (80029d0 <HAL_RCC_OscConfig+0x33c>)
 8002724:	400a      	ands	r2, r1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4ba8      	ldr	r3, [pc, #672]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4ba7      	ldr	r3, [pc, #668]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800272e:	49a9      	ldr	r1, [pc, #676]	; (80029d4 <HAL_RCC_OscConfig+0x340>)
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e01e      	b.n	8002774 <HAL_RCC_OscConfig+0xe0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d10e      	bne.n	800275c <HAL_RCC_OscConfig+0xc8>
 800273e:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4ba2      	ldr	r3, [pc, #648]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	02c9      	lsls	r1, r1, #11
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4b9f      	ldr	r3, [pc, #636]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xe0>
 800275c:	4b9b      	ldr	r3, [pc, #620]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002762:	499b      	ldr	r1, [pc, #620]	; (80029d0 <HAL_RCC_OscConfig+0x33c>)
 8002764:	400a      	ands	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4b98      	ldr	r3, [pc, #608]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b97      	ldr	r3, [pc, #604]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800276e:	4999      	ldr	r1, [pc, #612]	; (80029d4 <HAL_RCC_OscConfig+0x340>)
 8002770:	400a      	ands	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d014      	beq.n	80027a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7ff fac8 	bl	8001d10 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002786:	f7ff fac3 	bl	8001d10 <HAL_GetTick>
 800278a:	0002      	movs	r2, r0
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e2fd      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0xf2>
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7ff fab3 	bl	8001d10 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff faae 	bl	8001d10 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e2e8      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	029b      	lsls	r3, r3, #10
 80027ca:	4013      	ands	r3, r2
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x11c>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d100      	bne.n	80027de <HAL_RCC_OscConfig+0x14a>
 80027dc:	e06c      	b.n	80028b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	220c      	movs	r2, #12
 80027e4:	4013      	ands	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027e8:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	220c      	movs	r2, #12
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d11f      	bne.n	8002834 <HAL_RCC_OscConfig+0x1a0>
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	401a      	ands	r2, r3
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	429a      	cmp	r2, r3
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b71      	ldr	r3, [pc, #452]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d005      	beq.n	800281c <HAL_RCC_OscConfig+0x188>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e2bb      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	22f8      	movs	r2, #248	; 0xf8
 8002822:	4393      	bics	r3, r2
 8002824:	0019      	movs	r1, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00da      	lsls	r2, r3, #3
 800282c:	4b67      	ldr	r3, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e041      	b.n	80028b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d024      	beq.n	8002886 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b63      	ldr	r3, [pc, #396]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b62      	ldr	r3, [pc, #392]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002842:	2101      	movs	r1, #1
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff fa62 	bl	8001d10 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff fa5d 	bl	8001d10 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e297      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2202      	movs	r2, #2
 800286a:	4013      	ands	r3, r2
 800286c:	d0f1      	beq.n	8002852 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22f8      	movs	r2, #248	; 0xf8
 8002874:	4393      	bics	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00da      	lsls	r2, r3, #3
 800287e:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e018      	b.n	80028b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fa3d 	bl	8001d10 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff fa38 	bl	8001d10 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e272      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d1f1      	bne.n	800289c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2208      	movs	r2, #8
 80028be:	4013      	ands	r3, r2
 80028c0:	d036      	beq.n	8002930 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80028cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	430a      	orrs	r2, r1
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fa1b 	bl	8001d10 <HAL_GetTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e0:	f7ff fa16 	bl	8001d10 <HAL_GetTick>
 80028e4:	0002      	movs	r2, r0
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e250      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f1      	beq.n	80028e0 <HAL_RCC_OscConfig+0x24c>
 80028fc:	e018      	b.n	8002930 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fe:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002902:	4b32      	ldr	r3, [pc, #200]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fa01 	bl	8001d10 <HAL_GetTick>
 800290e:	0003      	movs	r3, r0
 8002910:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7ff f9fc 	bl	8001d10 <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e236      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d1f1      	bne.n	8002914 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2204      	movs	r2, #4
 8002936:	4013      	ands	r3, r2
 8002938:	d100      	bne.n	800293c <HAL_RCC_OscConfig+0x2a8>
 800293a:	e0b5      	b.n	8002aa8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293c:	201f      	movs	r0, #31
 800293e:	183b      	adds	r3, r7, r0
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	055b      	lsls	r3, r3, #21
 800294c:	4013      	ands	r3, r2
 800294e:	d110      	bne.n	8002972 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002952:	69da      	ldr	r2, [r3, #28]
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	0549      	lsls	r1, r1, #21
 800295a:	430a      	orrs	r2, r1
 800295c:	61da      	str	r2, [r3, #28]
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	055b      	lsls	r3, r3, #21
 8002966:	4013      	ands	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800296c:	183b      	adds	r3, r7, r0
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_OscConfig+0x344>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <HAL_RCC_OscConfig+0x344>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x344>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0049      	lsls	r1, r1, #1
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7ff f9c0 	bl	8001d10 <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002996:	f7ff f9bb 	bl	8001d10 <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b64      	cmp	r3, #100	; 0x64
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1f5      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x344>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10f      	bne.n	80029dc <HAL_RCC_OscConfig+0x348>
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_RCC_OscConfig+0x338>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	621a      	str	r2, [r3, #32]
 80029c8:	e036      	b.n	8002a38 <HAL_RCC_OscConfig+0x3a4>
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	40021000 	.word	0x40021000
 80029d0:	fffeffff 	.word	0xfffeffff
 80029d4:	fffbffff 	.word	0xfffbffff
 80029d8:	40007000 	.word	0x40007000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10c      	bne.n	80029fe <HAL_RCC_OscConfig+0x36a>
 80029e4:	4bca      	ldr	r3, [pc, #808]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	4bc9      	ldr	r3, [pc, #804]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	621a      	str	r2, [r3, #32]
 80029f0:	4bc7      	ldr	r3, [pc, #796]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	4bc6      	ldr	r3, [pc, #792]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 80029f6:	2104      	movs	r1, #4
 80029f8:	438a      	bics	r2, r1
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x3a4>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x38c>
 8002a06:	4bc2      	ldr	r3, [pc, #776]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	4bc1      	ldr	r3, [pc, #772]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	621a      	str	r2, [r3, #32]
 8002a12:	4bbf      	ldr	r3, [pc, #764]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	4bbe      	ldr	r3, [pc, #760]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x3a4>
 8002a20:	4bbb      	ldr	r3, [pc, #748]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	4bba      	ldr	r3, [pc, #744]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	438a      	bics	r2, r1
 8002a2a:	621a      	str	r2, [r3, #32]
 8002a2c:	4bb8      	ldr	r3, [pc, #736]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	4bb7      	ldr	r3, [pc, #732]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	2104      	movs	r1, #4
 8002a34:	438a      	bics	r2, r1
 8002a36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d014      	beq.n	8002a6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7ff f966 	bl	8001d10 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e009      	b.n	8002a5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7ff f961 	bl	8001d10 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4aaf      	ldr	r2, [pc, #700]	; (8002d14 <HAL_RCC_OscConfig+0x680>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e19a      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x3b6>
 8002a68:	e013      	b.n	8002a92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f951 	bl	8001d10 <HAL_GetTick>
 8002a6e:	0003      	movs	r3, r0
 8002a70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7ff f94c 	bl	8001d10 <HAL_GetTick>
 8002a78:	0002      	movs	r2, r0
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	4aa5      	ldr	r2, [pc, #660]	; (8002d14 <HAL_RCC_OscConfig+0x680>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e185      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	4ba1      	ldr	r3, [pc, #644]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a92:	231f      	movs	r3, #31
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b9c      	ldr	r3, [pc, #624]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	499d      	ldr	r1, [pc, #628]	; (8002d18 <HAL_RCC_OscConfig+0x684>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2210      	movs	r2, #16
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d063      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d12a      	bne.n	8002b10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aba:	4b95      	ldr	r3, [pc, #596]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abe:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ac6:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	4b91      	ldr	r3, [pc, #580]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f91d 	bl	8001d10 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002adc:	f7ff f918 	bl	8001d10 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e152      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002aee:	4b88      	ldr	r3, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	2202      	movs	r2, #2
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f1      	beq.n	8002adc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002af8:	4b85      	ldr	r3, [pc, #532]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	22f8      	movs	r2, #248	; 0xf8
 8002afe:	4393      	bics	r3, r2
 8002b00:	0019      	movs	r1, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	00da      	lsls	r2, r3, #3
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b0e:	e034      	b.n	8002b7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	3305      	adds	r3, #5
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b18:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1c:	4b7c      	ldr	r3, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b1e:	2104      	movs	r1, #4
 8002b20:	438a      	bics	r2, r1
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b24:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	22f8      	movs	r2, #248	; 0xf8
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	00da      	lsls	r2, r3, #3
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34
 8002b3a:	e01e      	b.n	8002b7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b40:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	2104      	movs	r1, #4
 8002b44:	430a      	orrs	r2, r1
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b48:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4c:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	438a      	bics	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b54:	f7ff f8dc 	bl	8001d10 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b5e:	f7ff f8d7 	bl	8001d10 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e111      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b70:	4b67      	ldr	r3, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d1f1      	bne.n	8002b5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d05c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b84:	4b62      	ldr	r3, [pc, #392]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	220c      	movs	r2, #12
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d00e      	beq.n	8002bae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b90:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	220c      	movs	r2, #12
 8002b96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d114      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b9c:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	23c0      	movs	r3, #192	; 0xc0
 8002ba2:	025b      	lsls	r3, r3, #9
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	23c0      	movs	r3, #192	; 0xc0
 8002ba8:	025b      	lsls	r3, r3, #9
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d10b      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bae:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5a8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d03c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0e6      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01b      	beq.n	8002c06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	4b4f      	ldr	r3, [pc, #316]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002bd4:	2180      	movs	r1, #128	; 0x80
 8002bd6:	0249      	lsls	r1, r1, #9
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff f898 	bl	8001d10 <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be6:	f7ff f893 	bl	8001d10 <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0cd      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002bf8:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	4013      	ands	r3, r2
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x552>
 8002c04:	e01b      	b.n	8002c3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c06:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c0c:	4943      	ldr	r1, [pc, #268]	; (8002d1c <HAL_RCC_OscConfig+0x688>)
 8002c0e:	400a      	ands	r2, r1
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7ff f87d 	bl	8001d10 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c1c:	f7ff f878 	bl	8001d10 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0b2      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	025b      	lsls	r3, r3, #9
 8002c36:	4013      	ands	r3, r2
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x588>
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d100      	bne.n	8002c48 <HAL_RCC_OscConfig+0x5b4>
 8002c46:	e0a4      	b.n	8002d92 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d100      	bne.n	8002c56 <HAL_RCC_OscConfig+0x5c2>
 8002c54:	e078      	b.n	8002d48 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d14c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c64:	492e      	ldr	r1, [pc, #184]	; (8002d20 <HAL_RCC_OscConfig+0x68c>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f851 	bl	8001d10 <HAL_GetTick>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c74:	f7ff f84c 	bl	8001d10 <HAL_GetTick>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e086      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c86:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	049b      	lsls	r3, r3, #18
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c92:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	220f      	movs	r2, #15
 8002c98:	4393      	bics	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_RCC_OscConfig+0x690>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	0449      	lsls	r1, r1, #17
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7ff f81f 	bl	8001d10 <HAL_GetTick>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7ff f81a 	bl	8001d10 <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e054      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	049b      	lsls	r3, r3, #18
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x644>
 8002cf6:	e04c      	b.n	8002d92 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	4908      	ldr	r1, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x68c>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff f804 	bl	8001d10 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x6a6>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000
 8002d14:	00001388 	.word	0x00001388
 8002d18:	efffffff 	.word	0xefffffff
 8002d1c:	fffeffff 	.word	0xfffeffff
 8002d20:	feffffff 	.word	0xfeffffff
 8002d24:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fff2 	bl	8001d10 <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e02c      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_RCC_OscConfig+0x708>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	049b      	lsls	r3, r3, #18
 8002d42:	4013      	ands	r3, r2
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x694>
 8002d46:	e024      	b.n	8002d92 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e01f      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x708>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCC_OscConfig+0x708>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	23c0      	movs	r3, #192	; 0xc0
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d10e      	bne.n	8002d8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	220f      	movs	r2, #15
 8002d74:	401a      	ands	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	23f0      	movs	r3, #240	; 0xf0
 8002d82:	039b      	lsls	r3, r3, #14
 8002d84:	401a      	ands	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b008      	add	sp, #32
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0bf      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b61      	ldr	r3, [pc, #388]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d911      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b5e      	ldr	r3, [pc, #376]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4393      	bics	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd4:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0a6      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	d015      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2204      	movs	r2, #4
 8002df6:	4013      	ands	r3, r2
 8002df8:	d006      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e00:	21e0      	movs	r1, #224	; 0xe0
 8002e02:	00c9      	lsls	r1, r1, #3
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b4d      	ldr	r3, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	22f0      	movs	r2, #240	; 0xf0
 8002e0e:	4393      	bics	r3, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d04c      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b44      	ldr	r3, [pc, #272]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4013      	ands	r3, r2
 8002e38:	d120      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07a      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	2380      	movs	r3, #128	; 0x80
 8002e4c:	049b      	lsls	r3, r3, #18
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d114      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06e      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	025b      	lsls	r3, r3, #9
 8002e66:	4013      	ands	r3, r2
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e062      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6e:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e05b      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e7c:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2203      	movs	r2, #3
 8002e82:	4393      	bics	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fe ff3e 	bl	8001d10 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e98:	e009      	b.n	8002eae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fe ff39 	bl	8001d10 <HAL_GetTick>
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_RCC_ClockConfig+0x1a4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e042      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1ec      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d211      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e020      	b.n	8002f34 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d009      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002efc:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_RCC_ClockConfig+0x1a8>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	0019      	movs	r1, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f10:	f000 f820 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f14:	0001      	movs	r1, r0
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	4013      	ands	r3, r2
 8002f20:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <HAL_RCC_ClockConfig+0x1ac>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	000a      	movs	r2, r1
 8002f26:	40da      	lsrs	r2, r3
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f7fe fea9 	bl	8001c84 <HAL_InitTick>
  
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b004      	add	sp, #16
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
 8002f44:	00001388 	.word	0x00001388
 8002f48:	fffff8ff 	.word	0xfffff8ff
 8002f4c:	08005c78 	.word	0x08005c78
 8002f50:	20000000 	.word	0x20000000

08002f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08f      	sub	sp, #60	; 0x3c
 8002f58:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f5a:	2314      	movs	r3, #20
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	4a38      	ldr	r2, [pc, #224]	; (8003040 <HAL_RCC_GetSysClockFreq+0xec>)
 8002f60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f62:	c313      	stmia	r3!, {r0, r1, r4}
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	4a36      	ldr	r2, [pc, #216]	; (8003044 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f6e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f80:	2300      	movs	r3, #0
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f88:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	220c      	movs	r2, #12
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d047      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xd4>
 8002f98:	d849      	bhi.n	800302e <HAL_RCC_GetSysClockFreq+0xda>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x50>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x56>
 8002fa2:	e044      	b.n	800302e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fa8:	e044      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	0c9b      	lsrs	r3, r3, #18
 8002fae:	220f      	movs	r2, #15
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2214      	movs	r2, #20
 8002fb4:	18ba      	adds	r2, r7, r2
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fba:	4b23      	ldr	r3, [pc, #140]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	1d3a      	adds	r2, r7, #4
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	23c0      	movs	r3, #192	; 0xc0
 8002fcc:	025b      	lsls	r3, r3, #9
 8002fce:	401a      	ands	r2, r3
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	025b      	lsls	r3, r3, #9
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d109      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fda:	481c      	ldr	r0, [pc, #112]	; (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fdc:	f7fd f89e 	bl	800011c <__udivsi3>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	4353      	muls	r3, r2
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	e01a      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	025b      	lsls	r3, r3, #9
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	23c0      	movs	r3, #192	; 0xc0
 8002ff6:	025b      	lsls	r3, r3, #9
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d109      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003000:	f7fd f88c 	bl	800011c <__udivsi3>
 8003004:	0003      	movs	r3, r0
 8003006:	001a      	movs	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	4353      	muls	r3, r2
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
 800300e:	e008      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003012:	480e      	ldr	r0, [pc, #56]	; (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003014:	f7fd f882 	bl	800011c <__udivsi3>
 8003018:	0003      	movs	r3, r0
 800301a:	001a      	movs	r2, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	4353      	muls	r3, r2
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_GetSysClockFreq+0xfc>)
 800302a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800302c:	e002      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003032:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b00f      	add	sp, #60	; 0x3c
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	08005bd8 	.word	0x08005bd8
 8003044:	08005be8 	.word	0x08005be8
 8003048:	40021000 	.word	0x40021000
 800304c:	007a1200 	.word	0x007a1200
 8003050:	02dc6c00 	.word	0x02dc6c00

08003054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_RCC_GetHCLKFreq+0x10>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	20000000 	.word	0x20000000

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800306c:	f7ff fff2 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003070:	0001      	movs	r1, r0
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	2207      	movs	r2, #7
 800307a:	4013      	ands	r3, r2
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	40d9      	lsrs	r1, r3
 8003082:	000b      	movs	r3, r1
}    
 8003084:	0018      	movs	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	40021000 	.word	0x40021000
 8003090:	08005c88 	.word	0x08005c88

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	025b      	lsls	r3, r3, #9
 80030ac:	4013      	ands	r3, r2
 80030ae:	d100      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80030b0:	e08e      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2017      	movs	r0, #23
 80030b4:	183b      	adds	r3, r7, r0
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b6e      	ldr	r3, [pc, #440]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	055b      	lsls	r3, r3, #21
 80030c2:	4013      	ands	r3, r2
 80030c4:	d110      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	4b6b      	ldr	r3, [pc, #428]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030cc:	2180      	movs	r1, #128	; 0x80
 80030ce:	0549      	lsls	r1, r1, #21
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
 80030d4:	4b67      	ldr	r3, [pc, #412]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	055b      	lsls	r3, r3, #21
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	183b      	adds	r3, r7, r0
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d11a      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f4:	4b60      	ldr	r3, [pc, #384]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	0049      	lsls	r1, r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe fe05 	bl	8001d10 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fe00 	bl	8001d10 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0a6      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	4013      	ands	r3, r2
 8003128:	d0f0      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800312a:	4b52      	ldr	r3, [pc, #328]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4013      	ands	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d034      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	23c0      	movs	r3, #192	; 0xc0
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4013      	ands	r3, r2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d02c      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800314c:	4b49      	ldr	r3, [pc, #292]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003152:	4013      	ands	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	0249      	lsls	r1, r1, #9
 8003160:	430a      	orrs	r2, r1
 8003162:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	4b42      	ldr	r3, [pc, #264]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800316a:	4945      	ldr	r1, [pc, #276]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800316c:	400a      	ands	r2, r1
 800316e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe fdc7 	bl	8001d10 <HAL_GetTick>
 8003182:	0003      	movs	r3, r0
 8003184:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fe fdc2 	bl	8001d10 <HAL_GetTick>
 800318c:	0002      	movs	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	4a3c      	ldr	r2, [pc, #240]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e067      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	4b35      	ldr	r3, [pc, #212]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	2202      	movs	r2, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a34      	ldr	r2, [pc, #208]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ba:	2317      	movs	r3, #23
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ca:	492f      	ldr	r1, [pc, #188]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	2203      	movs	r2, #3
 80031e0:	4393      	bics	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2202      	movs	r2, #2
 80031f4:	4013      	ands	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f8:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	4a23      	ldr	r2, [pc, #140]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003208:	430a      	orrs	r2, r1
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2220      	movs	r2, #32
 8003212:	4013      	ands	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003216:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	2210      	movs	r2, #16
 800321c:	4393      	bics	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003226:	430a      	orrs	r2, r1
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	4013      	ands	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003246:	430a      	orrs	r2, r1
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4013      	ands	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	4393      	bics	r3, r2
 800325e:	0019      	movs	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003266:	430a      	orrs	r2, r1
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	fffffcff 	.word	0xfffffcff
 8003280:	fffeffff 	.word	0xfffeffff
 8003284:	00001388 	.word	0x00001388
 8003288:	efffffff 	.word	0xefffffff
 800328c:	fffcffff 	.word	0xfffcffff

08003290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0a8      	b.n	80033f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	2382      	movs	r3, #130	; 0x82
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d009      	beq.n	80032ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	61da      	str	r2, [r3, #28]
 80032bc:	e005      	b.n	80032ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	225d      	movs	r2, #93	; 0x5d
 80032d4:	5c9b      	ldrb	r3, [r3, r2]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	225c      	movs	r2, #92	; 0x5c
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7fe fb82 	bl	80019f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	225d      	movs	r2, #93	; 0x5d
 80032f0:	2102      	movs	r1, #2
 80032f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	438a      	bics	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	23e0      	movs	r3, #224	; 0xe0
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	429a      	cmp	r2, r3
 800330e:	d902      	bls.n	8003316 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e002      	b.n	800331c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	015b      	lsls	r3, r3, #5
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	23f0      	movs	r3, #240	; 0xf0
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	429a      	cmp	r2, r3
 8003326:	d008      	beq.n	800333a <HAL_SPI_Init+0xaa>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	23e0      	movs	r3, #224	; 0xe0
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	429a      	cmp	r2, r3
 8003332:	d002      	beq.n	800333a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2382      	movs	r3, #130	; 0x82
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	401a      	ands	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	2384      	movs	r3, #132	; 0x84
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	400b      	ands	r3, r1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2102      	movs	r1, #2
 8003356:	400b      	ands	r3, r1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2101      	movs	r1, #1
 8003360:	400b      	ands	r3, r1
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6999      	ldr	r1, [r3, #24]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	400b      	ands	r3, r1
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	2138      	movs	r1, #56	; 0x38
 8003376:	400b      	ands	r3, r1
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2180      	movs	r1, #128	; 0x80
 8003380:	400b      	ands	r3, r1
 8003382:	431a      	orrs	r2, r3
 8003384:	0011      	movs	r1, r2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	019b      	lsls	r3, r3, #6
 800338e:	401a      	ands	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	2204      	movs	r2, #4
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2110      	movs	r1, #16
 80033a8:	400b      	ands	r3, r1
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2108      	movs	r1, #8
 80033b2:	400b      	ands	r3, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68d9      	ldr	r1, [r3, #12]
 80033ba:	23f0      	movs	r3, #240	; 0xf0
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	400b      	ands	r3, r1
 80033c0:	431a      	orrs	r2, r3
 80033c2:	0011      	movs	r1, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	015b      	lsls	r3, r3, #5
 80033ca:	401a      	ands	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4907      	ldr	r1, [pc, #28]	; (80033fc <HAL_SPI_Init+0x16c>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	225d      	movs	r2, #93	; 0x5d
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b004      	add	sp, #16
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	fffff7ff 	.word	0xfffff7ff

08003400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	001a      	movs	r2, r3
 800340e:	1cbb      	adds	r3, r7, #2
 8003410:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003412:	2301      	movs	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003416:	2323      	movs	r3, #35	; 0x23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	225c      	movs	r2, #92	; 0x5c
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_SPI_TransmitReceive+0x2c>
 8003428:	2302      	movs	r3, #2
 800342a:	e1b5      	b.n	8003798 <HAL_SPI_TransmitReceive+0x398>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	225c      	movs	r2, #92	; 0x5c
 8003430:	2101      	movs	r1, #1
 8003432:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003434:	f7fe fc6c 	bl	8001d10 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800343c:	201b      	movs	r0, #27
 800343e:	183b      	adds	r3, r7, r0
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	215d      	movs	r1, #93	; 0x5d
 8003444:	5c52      	ldrb	r2, [r2, r1]
 8003446:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800344e:	2312      	movs	r3, #18
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	1cba      	adds	r2, r7, #2
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003458:	183b      	adds	r3, r7, r0
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d011      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x84>
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	2382      	movs	r3, #130	; 0x82
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	429a      	cmp	r2, r3
 8003468:	d107      	bne.n	800347a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_SPI_TransmitReceive+0x7a>
 8003472:	183b      	adds	r3, r7, r0
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d004      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800347a:	2323      	movs	r3, #35	; 0x23
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
    goto error;
 8003482:	e17e      	b.n	8003782 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x98>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x98>
 8003490:	1cbb      	adds	r3, r7, #2
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003498:	2323      	movs	r3, #35	; 0x23
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
    goto error;
 80034a0:	e16f      	b.n	8003782 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	225d      	movs	r2, #93	; 0x5d
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d003      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	225d      	movs	r2, #93	; 0x5d
 80034b2:	2105      	movs	r1, #5
 80034b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1cba      	adds	r2, r7, #2
 80034c6:	2146      	movs	r1, #70	; 0x46
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1cba      	adds	r2, r7, #2
 80034d0:	2144      	movs	r1, #68	; 0x44
 80034d2:	8812      	ldrh	r2, [r2, #0]
 80034d4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1cba      	adds	r2, r7, #2
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1cba      	adds	r2, r7, #2
 80034e8:	8812      	ldrh	r2, [r2, #0]
 80034ea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	23e0      	movs	r3, #224	; 0xe0
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	429a      	cmp	r2, r3
 8003502:	d908      	bls.n	8003516 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	49a4      	ldr	r1, [pc, #656]	; (80037a0 <HAL_SPI_TransmitReceive+0x3a0>)
 8003510:	400a      	ands	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	e008      	b.n	8003528 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0149      	lsls	r1, r1, #5
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2240      	movs	r2, #64	; 0x40
 8003530:	4013      	ands	r3, r2
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d007      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	23e0      	movs	r3, #224	; 0xe0
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	429a      	cmp	r2, r3
 8003550:	d800      	bhi.n	8003554 <HAL_SPI_TransmitReceive+0x154>
 8003552:	e07f      	b.n	8003654 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x168>
 800355c:	2312      	movs	r3, #18
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d000      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x168>
 8003566:	e069      	b.n	800363c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358c:	e056      	b.n	800363c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x1d4>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x1d4>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d113      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2201      	movs	r2, #1
 80035dc:	4013      	ands	r3, r2
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d11c      	bne.n	800361c <HAL_SPI_TransmitReceive+0x21c>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2246      	movs	r2, #70	; 0x46
 80035e6:	5a9b      	ldrh	r3, [r3, r2]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	b292      	uxth	r2, r2
 80035fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2246      	movs	r2, #70	; 0x46
 800360a:	5a9b      	ldrh	r3, [r3, r2]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b299      	uxth	r1, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2246      	movs	r2, #70	; 0x46
 8003616:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800361c:	f7fe fb78 	bl	8001d10 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003628:	429a      	cmp	r2, r3
 800362a:	d807      	bhi.n	800363c <HAL_SPI_TransmitReceive+0x23c>
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3301      	adds	r3, #1
 8003630:	d004      	beq.n	800363c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003632:	2323      	movs	r3, #35	; 0x23
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2203      	movs	r2, #3
 8003638:	701a      	strb	r2, [r3, #0]
        goto error;
 800363a:	e0a2      	b.n	8003782 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1a3      	bne.n	800358e <HAL_SPI_TransmitReceive+0x18e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2246      	movs	r2, #70	; 0x46
 800364a:	5a9b      	ldrh	r3, [r3, r2]
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d19d      	bne.n	800358e <HAL_SPI_TransmitReceive+0x18e>
 8003652:	e085      	b.n	8003760 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x268>
 800365c:	2312      	movs	r3, #18
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d000      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x268>
 8003666:	e070      	b.n	800374a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368e:	e05c      	b.n	800374a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2202      	movs	r2, #2
 8003698:	4013      	ands	r3, r2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d11c      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x2d8>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x2d8>
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d114      	bne.n	80036d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2201      	movs	r2, #1
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d11e      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x324>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2246      	movs	r2, #70	; 0x46
 80036ea:	5a9b      	ldrh	r3, [r3, r2]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	001a      	movs	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2246      	movs	r2, #70	; 0x46
 8003712:	5a9b      	ldrh	r3, [r3, r2]
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b299      	uxth	r1, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2246      	movs	r2, #70	; 0x46
 800371e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003724:	f7fe faf4 	bl	8001d10 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003730:	429a      	cmp	r2, r3
 8003732:	d802      	bhi.n	800373a <HAL_SPI_TransmitReceive+0x33a>
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	3301      	adds	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x340>
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003740:	2323      	movs	r3, #35	; 0x23
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	2203      	movs	r2, #3
 8003746:	701a      	strb	r2, [r3, #0]
        goto error;
 8003748:	e01b      	b.n	8003782 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d19d      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x290>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2246      	movs	r2, #70	; 0x46
 8003758:	5a9b      	ldrh	r3, [r3, r2]
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d197      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	0018      	movs	r0, r3
 8003768:	f000 f94c 	bl	8003a04 <SPI_EndRxTxTransaction>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d007      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003770:	2323      	movs	r3, #35	; 0x23
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
 800377e:	e000      	b.n	8003782 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003780:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	225d      	movs	r2, #93	; 0x5d
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	225c      	movs	r2, #92	; 0x5c
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003792:	2323      	movs	r3, #35	; 0x23
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b00a      	add	sp, #40	; 0x28
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	ffffefff 	.word	0xffffefff

080037a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	1dfb      	adds	r3, r7, #7
 80037b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037b4:	f7fe faac 	bl	8001d10 <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	18d3      	adds	r3, r2, r3
 80037c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037c4:	f7fe faa4 	bl	8001d10 <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	0d1b      	lsrs	r3, r3, #20
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	4353      	muls	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037da:	e058      	b.n	800388e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	d055      	beq.n	800388e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037e2:	f7fe fa95 	bl	8001d10 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d902      	bls.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d142      	bne.n	800387e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	21e0      	movs	r1, #224	; 0xe0
 8003804:	438a      	bics	r2, r1
 8003806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	2382      	movs	r3, #130	; 0x82
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	429a      	cmp	r2, r3
 8003812:	d113      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	429a      	cmp	r2, r3
 800381e:	d005      	beq.n	800382c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	429a      	cmp	r2, r3
 800382a:	d107      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	438a      	bics	r2, r1
 800383a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003840:	2380      	movs	r3, #128	; 0x80
 8003842:	019b      	lsls	r3, r3, #6
 8003844:	429a      	cmp	r2, r3
 8003846:	d110      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003854:	400a      	ands	r2, r1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	0189      	lsls	r1, r1, #6
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	225d      	movs	r2, #93	; 0x5d
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	225c      	movs	r2, #92	; 0x5c
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e017      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3b01      	subs	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	425a      	negs	r2, r3
 800389e:	4153      	adcs	r3, r2
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	001a      	movs	r2, r3
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d197      	bne.n	80037dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b008      	add	sp, #32
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	20000000 	.word	0x20000000
 80038bc:	ffffdfff 	.word	0xffffdfff

080038c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038ce:	2317      	movs	r3, #23
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038d6:	f7fe fa1b 	bl	8001d10 <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	18d3      	adds	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80038e6:	f7fe fa13 	bl	8001d10 <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038f6:	4b41      	ldr	r3, [pc, #260]	; (80039fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	0013      	movs	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	00da      	lsls	r2, r3, #3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	0d1b      	lsrs	r3, r3, #20
 8003906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003908:	4353      	muls	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800390c:	e068      	b.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	23c0      	movs	r3, #192	; 0xc0
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	429a      	cmp	r2, r3
 8003916:	d10a      	bne.n	800392e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	2117      	movs	r1, #23
 8003926:	187b      	adds	r3, r7, r1
 8003928:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800392a:	187b      	adds	r3, r7, r1
 800392c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	d055      	beq.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003934:	f7fe f9ec 	bl	8001d10 <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	429a      	cmp	r2, r3
 8003942:	d902      	bls.n	800394a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	2b00      	cmp	r3, #0
 8003948:	d142      	bne.n	80039d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	21e0      	movs	r1, #224	; 0xe0
 8003956:	438a      	bics	r2, r1
 8003958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	2382      	movs	r3, #130	; 0x82
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	429a      	cmp	r2, r3
 8003964:	d113      	bne.n	800398e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	429a      	cmp	r2, r3
 8003970:	d005      	beq.n	800397e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	429a      	cmp	r2, r3
 800397c:	d107      	bne.n	800398e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	438a      	bics	r2, r1
 800398c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	429a      	cmp	r2, r3
 8003998:	d110      	bne.n	80039bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4916      	ldr	r1, [pc, #88]	; (8003a00 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80039a6:	400a      	ands	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	; 0x80
 80039b6:	0189      	lsls	r1, r1, #6
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	225d      	movs	r2, #93	; 0x5d
 80039c0:	2101      	movs	r1, #1
 80039c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	225c      	movs	r2, #92	; 0x5c
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e010      	b.n	80039f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3b01      	subs	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d18e      	bne.n	800390e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b00a      	add	sp, #40	; 0x28
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	20000000 	.word	0x20000000
 8003a00:	ffffdfff 	.word	0xffffdfff

08003a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	23c0      	movs	r3, #192	; 0xc0
 8003a14:	0159      	lsls	r1, r3, #5
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	0013      	movs	r3, r2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f7ff ff4e 	bl	80038c0 <SPI_WaitFifoStateUntilTimeout>
 8003a24:	1e03      	subs	r3, r0, #0
 8003a26:	d007      	beq.n	8003a38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e027      	b.n	8003a88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0013      	movs	r3, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	f7ff fead 	bl	80037a4 <SPI_WaitFlagStateUntilTimeout>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d007      	beq.n	8003a5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a52:	2220      	movs	r2, #32
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e014      	b.n	8003a88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	23c0      	movs	r3, #192	; 0xc0
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f7ff ff27 	bl	80038c0 <SPI_WaitFifoStateUntilTimeout>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d007      	beq.n	8003a86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e000      	b.n	8003a88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b004      	add	sp, #16
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e042      	b.n	8003b28 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	223d      	movs	r2, #61	; 0x3d
 8003aa6:	5c9b      	ldrb	r3, [r3, r2]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	223c      	movs	r2, #60	; 0x3c
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7fd ffe5 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	223d      	movs	r2, #61	; 0x3d
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	0019      	movs	r1, r3
 8003ad0:	0010      	movs	r0, r2
 8003ad2:	f000 f94b 	bl	8003d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2246      	movs	r2, #70	; 0x46
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	223e      	movs	r2, #62	; 0x3e
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2240      	movs	r2, #64	; 0x40
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	; 0x41
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2242      	movs	r2, #66	; 0x42
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2243      	movs	r2, #67	; 0x43
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2244      	movs	r2, #68	; 0x44
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2245      	movs	r2, #69	; 0x45
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	223d      	movs	r2, #61	; 0x3d
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	223d      	movs	r2, #61	; 0x3d
 8003b3c:	5c9b      	ldrb	r3, [r3, r2]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d001      	beq.n	8003b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e033      	b.n	8003bb0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	223d      	movs	r2, #61	; 0x3d
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <HAL_TIM_Base_Start+0x88>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <HAL_TIM_Base_Start+0x4a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d009      	beq.n	8003b7a <HAL_TIM_Base_Start+0x4a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <HAL_TIM_Base_Start+0x8c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_TIM_Base_Start+0x4a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <HAL_TIM_Base_Start+0x90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d111      	bne.n	8003b9e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2207      	movs	r2, #7
 8003b82:	4013      	ands	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d010      	beq.n	8003bae <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b9c:	e007      	b.n	8003bae <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b004      	add	sp, #16
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40014000 	.word	0x40014000

08003bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	223c      	movs	r2, #60	; 0x3c
 8003bda:	5c9b      	ldrb	r3, [r3, r2]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_ConfigClockSource+0x20>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0bc      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x19a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	2101      	movs	r1, #1
 8003bea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	223d      	movs	r2, #61	; 0x3d
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2277      	movs	r2, #119	; 0x77
 8003c00:	4393      	bics	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	0192      	lsls	r2, r2, #6
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0xde>
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	0192      	lsls	r2, r2, #6
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d900      	bls.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
 8003c28:	e088      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	0152      	lsls	r2, r2, #5
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d100      	bne.n	8003c34 <HAL_TIM_ConfigClockSource+0x70>
 8003c32:	e088      	b.n	8003d46 <HAL_TIM_ConfigClockSource+0x182>
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0152      	lsls	r2, r2, #5
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d900      	bls.n	8003c3e <HAL_TIM_ConfigClockSource+0x7a>
 8003c3c:	e07e      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c3e:	2b70      	cmp	r3, #112	; 0x70
 8003c40:	d018      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0xb0>
 8003c42:	d900      	bls.n	8003c46 <HAL_TIM_ConfigClockSource+0x82>
 8003c44:	e07a      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c46:	2b60      	cmp	r3, #96	; 0x60
 8003c48:	d04f      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0x126>
 8003c4a:	d900      	bls.n	8003c4e <HAL_TIM_ConfigClockSource+0x8a>
 8003c4c:	e076      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c4e:	2b50      	cmp	r3, #80	; 0x50
 8003c50:	d03b      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0x106>
 8003c52:	d900      	bls.n	8003c56 <HAL_TIM_ConfigClockSource+0x92>
 8003c54:	e072      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d057      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x146>
 8003c5a:	d900      	bls.n	8003c5e <HAL_TIM_ConfigClockSource+0x9a>
 8003c5c:	e06e      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c5e:	2b30      	cmp	r3, #48	; 0x30
 8003c60:	d063      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x166>
 8003c62:	d86b      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d060      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x166>
 8003c68:	d868      	bhi.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05d      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x166>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d05b      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0x166>
 8003c72:	e063      	b.n	8003d3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6899      	ldr	r1, [r3, #8]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f000 f96c 	bl	8003f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2277      	movs	r2, #119	; 0x77
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
      break;
 8003ca0:	e052      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f000 f955 	bl	8003f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	01c9      	lsls	r1, r1, #7
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]
      break;
 8003cc8:	e03e      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6859      	ldr	r1, [r3, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	f000 f8c8 	bl	8003e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2150      	movs	r1, #80	; 0x50
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 f922 	bl	8003f2c <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e02e      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	f000 f8e6 	bl	8003ec8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2160      	movs	r1, #96	; 0x60
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 f912 	bl	8003f2c <TIM_ITRx_SetConfig>
      break;
 8003d08:	e01e      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	001a      	movs	r2, r3
 8003d18:	f000 f8a8 	bl	8003e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f902 	bl	8003f2c <TIM_ITRx_SetConfig>
      break;
 8003d28:	e00e      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0019      	movs	r1, r3
 8003d34:	0010      	movs	r0, r2
 8003d36:	f000 f8f9 	bl	8003f2c <TIM_ITRx_SetConfig>
      break;
 8003d3a:	e005      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d3c:	230f      	movs	r3, #15
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
      break;
 8003d44:	e000      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d46:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	223d      	movs	r2, #61	; 0x3d
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223c      	movs	r2, #60	; 0x3c
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return status;
 8003d58:	230f      	movs	r3, #15
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	781b      	ldrb	r3, [r3, #0]
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b004      	add	sp, #16
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	ffff00ff 	.word	0xffff00ff

08003d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a34      	ldr	r2, [pc, #208]	; (8003e50 <TIM_Base_SetConfig+0xe4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d008      	beq.n	8003d96 <TIM_Base_SetConfig+0x2a>
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	05db      	lsls	r3, r3, #23
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0x2a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <TIM_Base_SetConfig+0xe8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2270      	movs	r2, #112	; 0x70
 8003d9a:	4393      	bics	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0xe4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	05db      	lsls	r3, r3, #23
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d013      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <TIM_Base_SetConfig+0xe8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00f      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <TIM_Base_SetConfig+0xec>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <TIM_Base_SetConfig+0xf0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <TIM_Base_SetConfig+0xf4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0x76>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a21      	ldr	r2, [pc, #132]	; (8003e64 <TIM_Base_SetConfig+0xf8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d108      	bne.n	8003df4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <TIM_Base_SetConfig+0xfc>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	4393      	bics	r3, r2
 8003dfa:	001a      	movs	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a0c      	ldr	r2, [pc, #48]	; (8003e50 <TIM_Base_SetConfig+0xe4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0xce>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a0d      	ldr	r2, [pc, #52]	; (8003e5c <TIM_Base_SetConfig+0xf0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0xce>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <TIM_Base_SetConfig+0xf4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0xce>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a0b      	ldr	r2, [pc, #44]	; (8003e64 <TIM_Base_SetConfig+0xf8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d103      	bne.n	8003e42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	615a      	str	r2, [r3, #20]
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b004      	add	sp, #16
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40002000 	.word	0x40002000
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800
 8003e68:	fffffcff 	.word	0xfffffcff

08003e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	2201      	movs	r2, #1
 8003e84:	4393      	bics	r3, r2
 8003e86:	001a      	movs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	22f0      	movs	r2, #240	; 0xf0
 8003e96:	4393      	bics	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	621a      	str	r2, [r3, #32]
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b006      	add	sp, #24
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	4393      	bics	r3, r2
 8003edc:	001a      	movs	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <TIM_TI2_ConfigInputStage+0x60>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	22a0      	movs	r2, #160	; 0xa0
 8003f04:	4393      	bics	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	ffff0fff 	.word	0xffff0fff

08003f2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2270      	movs	r2, #112	; 0x70
 8003f40:	4393      	bics	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b004      	add	sp, #16
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <TIM_ETR_SetConfig+0x3c>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	021a      	lsls	r2, r3, #8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b006      	add	sp, #24
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	ffff00ff 	.word	0xffff00ff

08003fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	223c      	movs	r2, #60	; 0x3c
 8003fae:	5c9b      	ldrb	r3, [r3, r2]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e047      	b.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	223c      	movs	r2, #60	; 0x3c
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	223d      	movs	r2, #61	; 0x3d
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2270      	movs	r2, #112	; 0x70
 8003fdc:	4393      	bics	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00f      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	429a      	cmp	r2, r3
 8004006:	d009      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a11      	ldr	r2, [pc, #68]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a10      	ldr	r2, [pc, #64]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2280      	movs	r2, #128	; 0x80
 8004020:	4393      	bics	r3, r2
 8004022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	223d      	movs	r2, #61	; 0x3d
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	223c      	movs	r2, #60	; 0x3c
 8004042:	2100      	movs	r1, #0
 8004044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	0018      	movs	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	b004      	add	sp, #16
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000400 	.word	0x40000400
 8004058:	40014000 	.word	0x40014000

0800405c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e044      	b.n	80040f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2274      	movs	r2, #116	; 0x74
 800407a:	2100      	movs	r1, #0
 800407c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0018      	movs	r0, r3
 8004082:	f7fd fd21 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	438a      	bics	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f000 f830 	bl	8004104 <UART_SetConfig>
 80040a4:	0003      	movs	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e024      	b.n	80040f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 f9ab 	bl	8004414 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_UART_Init+0xa4>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	212a      	movs	r1, #42	; 0x2a
 80040da:	438a      	bics	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2101      	movs	r1, #1
 80040ea:	430a      	orrs	r2, r1
 80040ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fa43 	bl	800457c <UART_CheckIdleState>
 80040f6:	0003      	movs	r3, r0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	ffffb7ff 	.word	0xffffb7ff

08004104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800410c:	231e      	movs	r3, #30
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4aaf      	ldr	r2, [pc, #700]	; (80043f0 <UART_SetConfig+0x2ec>)
 8004134:	4013      	ands	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4aaa      	ldr	r2, [pc, #680]	; (80043f4 <UART_SetConfig+0x2f0>)
 800414a:	4013      	ands	r3, r2
 800414c:	0019      	movs	r1, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4aa1      	ldr	r2, [pc, #644]	; (80043f8 <UART_SetConfig+0x2f4>)
 8004172:	4013      	ands	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a9d      	ldr	r2, [pc, #628]	; (80043fc <UART_SetConfig+0x2f8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d127      	bne.n	80041da <UART_SetConfig+0xd6>
 800418a:	4b9d      	ldr	r3, [pc, #628]	; (8004400 <UART_SetConfig+0x2fc>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	2203      	movs	r2, #3
 8004190:	4013      	ands	r3, r2
 8004192:	2b03      	cmp	r3, #3
 8004194:	d00d      	beq.n	80041b2 <UART_SetConfig+0xae>
 8004196:	d81b      	bhi.n	80041d0 <UART_SetConfig+0xcc>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d014      	beq.n	80041c6 <UART_SetConfig+0xc2>
 800419c:	d818      	bhi.n	80041d0 <UART_SetConfig+0xcc>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0xa4>
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d00a      	beq.n	80041bc <UART_SetConfig+0xb8>
 80041a6:	e013      	b.n	80041d0 <UART_SetConfig+0xcc>
 80041a8:	231f      	movs	r3, #31
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e065      	b.n	800427e <UART_SetConfig+0x17a>
 80041b2:	231f      	movs	r3, #31
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e060      	b.n	800427e <UART_SetConfig+0x17a>
 80041bc:	231f      	movs	r3, #31
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2204      	movs	r2, #4
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e05b      	b.n	800427e <UART_SetConfig+0x17a>
 80041c6:	231f      	movs	r3, #31
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2208      	movs	r2, #8
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e056      	b.n	800427e <UART_SetConfig+0x17a>
 80041d0:	231f      	movs	r3, #31
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	2210      	movs	r2, #16
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	e051      	b.n	800427e <UART_SetConfig+0x17a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a89      	ldr	r2, [pc, #548]	; (8004404 <UART_SetConfig+0x300>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d134      	bne.n	800424e <UART_SetConfig+0x14a>
 80041e4:	4b86      	ldr	r3, [pc, #536]	; (8004400 <UART_SetConfig+0x2fc>)
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	23c0      	movs	r3, #192	; 0xc0
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	4013      	ands	r3, r2
 80041ee:	22c0      	movs	r2, #192	; 0xc0
 80041f0:	0292      	lsls	r2, r2, #10
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d017      	beq.n	8004226 <UART_SetConfig+0x122>
 80041f6:	22c0      	movs	r2, #192	; 0xc0
 80041f8:	0292      	lsls	r2, r2, #10
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d822      	bhi.n	8004244 <UART_SetConfig+0x140>
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	0292      	lsls	r2, r2, #10
 8004202:	4293      	cmp	r3, r2
 8004204:	d019      	beq.n	800423a <UART_SetConfig+0x136>
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	0292      	lsls	r2, r2, #10
 800420a:	4293      	cmp	r3, r2
 800420c:	d81a      	bhi.n	8004244 <UART_SetConfig+0x140>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <UART_SetConfig+0x118>
 8004212:	2280      	movs	r2, #128	; 0x80
 8004214:	0252      	lsls	r2, r2, #9
 8004216:	4293      	cmp	r3, r2
 8004218:	d00a      	beq.n	8004230 <UART_SetConfig+0x12c>
 800421a:	e013      	b.n	8004244 <UART_SetConfig+0x140>
 800421c:	231f      	movs	r3, #31
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e02b      	b.n	800427e <UART_SetConfig+0x17a>
 8004226:	231f      	movs	r3, #31
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e026      	b.n	800427e <UART_SetConfig+0x17a>
 8004230:	231f      	movs	r3, #31
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2204      	movs	r2, #4
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e021      	b.n	800427e <UART_SetConfig+0x17a>
 800423a:	231f      	movs	r3, #31
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2208      	movs	r2, #8
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	e01c      	b.n	800427e <UART_SetConfig+0x17a>
 8004244:	231f      	movs	r3, #31
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2210      	movs	r2, #16
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e017      	b.n	800427e <UART_SetConfig+0x17a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6d      	ldr	r2, [pc, #436]	; (8004408 <UART_SetConfig+0x304>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d104      	bne.n	8004262 <UART_SetConfig+0x15e>
 8004258:	231f      	movs	r3, #31
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e00d      	b.n	800427e <UART_SetConfig+0x17a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a69      	ldr	r2, [pc, #420]	; (800440c <UART_SetConfig+0x308>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d104      	bne.n	8004276 <UART_SetConfig+0x172>
 800426c:	231f      	movs	r3, #31
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e003      	b.n	800427e <UART_SetConfig+0x17a>
 8004276:	231f      	movs	r3, #31
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	2210      	movs	r2, #16
 800427c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	429a      	cmp	r2, r3
 8004288:	d15d      	bne.n	8004346 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800428a:	231f      	movs	r3, #31
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d015      	beq.n	80042c0 <UART_SetConfig+0x1bc>
 8004294:	dc18      	bgt.n	80042c8 <UART_SetConfig+0x1c4>
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00d      	beq.n	80042b6 <UART_SetConfig+0x1b2>
 800429a:	dc15      	bgt.n	80042c8 <UART_SetConfig+0x1c4>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <UART_SetConfig+0x1a2>
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d005      	beq.n	80042b0 <UART_SetConfig+0x1ac>
 80042a4:	e010      	b.n	80042c8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a6:	f7fe fedf 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80042aa:	0003      	movs	r3, r0
 80042ac:	61bb      	str	r3, [r7, #24]
        break;
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b0:	4b57      	ldr	r3, [pc, #348]	; (8004410 <UART_SetConfig+0x30c>)
 80042b2:	61bb      	str	r3, [r7, #24]
        break;
 80042b4:	e00f      	b.n	80042d6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b6:	f7fe fe4d 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 80042ba:	0003      	movs	r3, r0
 80042bc:	61bb      	str	r3, [r7, #24]
        break;
 80042be:	e00a      	b.n	80042d6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	61bb      	str	r3, [r7, #24]
        break;
 80042c6:	e006      	b.n	80042d6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042cc:	231e      	movs	r3, #30
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
        break;
 80042d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d100      	bne.n	80042de <UART_SetConfig+0x1da>
 80042dc:	e07b      	b.n	80043d6 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	005a      	lsls	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	18d2      	adds	r2, r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0019      	movs	r1, r3
 80042f0:	0010      	movs	r0, r2
 80042f2:	f7fb ff13 	bl	800011c <__udivsi3>
 80042f6:	0003      	movs	r3, r0
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	d91c      	bls.n	800433c <UART_SetConfig+0x238>
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	025b      	lsls	r3, r3, #9
 8004308:	429a      	cmp	r2, r3
 800430a:	d217      	bcs.n	800433c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	b29a      	uxth	r2, r3
 8004310:	200e      	movs	r0, #14
 8004312:	183b      	adds	r3, r7, r0
 8004314:	210f      	movs	r1, #15
 8004316:	438a      	bics	r2, r1
 8004318:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	085b      	lsrs	r3, r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	2207      	movs	r2, #7
 8004322:	4013      	ands	r3, r2
 8004324:	b299      	uxth	r1, r3
 8004326:	183b      	adds	r3, r7, r0
 8004328:	183a      	adds	r2, r7, r0
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	183a      	adds	r2, r7, r0
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	60da      	str	r2, [r3, #12]
 800433a:	e04c      	b.n	80043d6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800433c:	231e      	movs	r3, #30
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e047      	b.n	80043d6 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004346:	231f      	movs	r3, #31
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d015      	beq.n	800437c <UART_SetConfig+0x278>
 8004350:	dc18      	bgt.n	8004384 <UART_SetConfig+0x280>
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00d      	beq.n	8004372 <UART_SetConfig+0x26e>
 8004356:	dc15      	bgt.n	8004384 <UART_SetConfig+0x280>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <UART_SetConfig+0x25e>
 800435c:	2b02      	cmp	r3, #2
 800435e:	d005      	beq.n	800436c <UART_SetConfig+0x268>
 8004360:	e010      	b.n	8004384 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004362:	f7fe fe81 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004366:	0003      	movs	r3, r0
 8004368:	61bb      	str	r3, [r7, #24]
        break;
 800436a:	e012      	b.n	8004392 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <UART_SetConfig+0x30c>)
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e00f      	b.n	8004392 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe fdef 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8004376:	0003      	movs	r3, r0
 8004378:	61bb      	str	r3, [r7, #24]
        break;
 800437a:	e00a      	b.n	8004392 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	021b      	lsls	r3, r3, #8
 8004380:	61bb      	str	r3, [r7, #24]
        break;
 8004382:	e006      	b.n	8004392 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004388:	231e      	movs	r3, #30
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
        break;
 8004390:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01e      	beq.n	80043d6 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	085a      	lsrs	r2, r3, #1
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	18d2      	adds	r2, r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0019      	movs	r1, r3
 80043a8:	0010      	movs	r0, r2
 80043aa:	f7fb feb7 	bl	800011c <__udivsi3>
 80043ae:	0003      	movs	r3, r0
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b0f      	cmp	r3, #15
 80043b8:	d909      	bls.n	80043ce <UART_SetConfig+0x2ca>
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	025b      	lsls	r3, r3, #9
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d204      	bcs.n	80043ce <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e003      	b.n	80043d6 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80043ce:	231e      	movs	r3, #30
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043e2:	231e      	movs	r3, #30
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	781b      	ldrb	r3, [r3, #0]
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b008      	add	sp, #32
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	efff69f3 	.word	0xefff69f3
 80043f4:	ffffcfff 	.word	0xffffcfff
 80043f8:	fffff4ff 	.word	0xfffff4ff
 80043fc:	40013800 	.word	0x40013800
 8004400:	40021000 	.word	0x40021000
 8004404:	40004400 	.word	0x40004400
 8004408:	40004800 	.word	0x40004800
 800440c:	40004c00 	.word	0x40004c00
 8004410:	007a1200 	.word	0x007a1200

08004414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	d00b      	beq.n	800443e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <UART_AdvFeatureConfig+0x144>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2202      	movs	r2, #2
 8004444:	4013      	ands	r3, r2
 8004446:	d00b      	beq.n	8004460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4a43      	ldr	r2, [pc, #268]	; (800455c <UART_AdvFeatureConfig+0x148>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2204      	movs	r2, #4
 8004466:	4013      	ands	r3, r2
 8004468:	d00b      	beq.n	8004482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a3b      	ldr	r2, [pc, #236]	; (8004560 <UART_AdvFeatureConfig+0x14c>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	2208      	movs	r2, #8
 8004488:	4013      	ands	r3, r2
 800448a:	d00b      	beq.n	80044a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4a34      	ldr	r2, [pc, #208]	; (8004564 <UART_AdvFeatureConfig+0x150>)
 8004494:	4013      	ands	r3, r2
 8004496:	0019      	movs	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2210      	movs	r2, #16
 80044aa:	4013      	ands	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <UART_AdvFeatureConfig+0x154>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2220      	movs	r2, #32
 80044cc:	4013      	ands	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4a25      	ldr	r2, [pc, #148]	; (800456c <UART_AdvFeatureConfig+0x158>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2240      	movs	r2, #64	; 0x40
 80044ee:	4013      	ands	r3, r2
 80044f0:	d01d      	beq.n	800452e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <UART_AdvFeatureConfig+0x15c>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	035b      	lsls	r3, r3, #13
 8004512:	429a      	cmp	r2, r3
 8004514:	d10b      	bne.n	800452e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a15      	ldr	r2, [pc, #84]	; (8004574 <UART_AdvFeatureConfig+0x160>)
 800451e:	4013      	ands	r3, r2
 8004520:	0019      	movs	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	4013      	ands	r3, r2
 8004536:	d00b      	beq.n	8004550 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <UART_AdvFeatureConfig+0x164>)
 8004540:	4013      	ands	r3, r2
 8004542:	0019      	movs	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fffdffff 	.word	0xfffdffff
 800455c:	fffeffff 	.word	0xfffeffff
 8004560:	fffbffff 	.word	0xfffbffff
 8004564:	ffff7fff 	.word	0xffff7fff
 8004568:	ffffefff 	.word	0xffffefff
 800456c:	ffffdfff 	.word	0xffffdfff
 8004570:	ffefffff 	.word	0xffefffff
 8004574:	ff9fffff 	.word	0xff9fffff
 8004578:	fff7ffff 	.word	0xfff7ffff

0800457c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2280      	movs	r2, #128	; 0x80
 8004588:	2100      	movs	r1, #0
 800458a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800458c:	f7fd fbc0 	bl	8001d10 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2208      	movs	r2, #8
 800459c:	4013      	ands	r3, r2
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d10c      	bne.n	80045bc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0391      	lsls	r1, r2, #14
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <UART_CheckIdleState+0x8c>)
 80045ac:	9200      	str	r2, [sp, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f000 f82c 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e021      	b.n	8004600 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d10c      	bne.n	80045e4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2280      	movs	r2, #128	; 0x80
 80045ce:	03d1      	lsls	r1, r2, #15
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <UART_CheckIdleState+0x8c>)
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f000 f818 	bl	800460c <UART_WaitOnFlagUntilTimeout>
 80045dc:	1e03      	subs	r3, r0, #0
 80045de:	d001      	beq.n	80045e4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e00d      	b.n	8004600 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2274      	movs	r2, #116	; 0x74
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b004      	add	sp, #16
 8004606:	bd80      	pop	{r7, pc}
 8004608:	01ffffff 	.word	0x01ffffff

0800460c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b094      	sub	sp, #80	; 0x50
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461c:	e0a3      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004620:	3301      	adds	r3, #1
 8004622:	d100      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004624:	e09f      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fd fb73 	bl	8001d10 <HAL_GetTick>
 800462a:	0002      	movs	r2, r0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <UART_WaitOnFlagUntilTimeout+0x30>
 8004636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004638:	2b00      	cmp	r3, #0
 800463a:	d13d      	bne.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463c:	f3ef 8310 	mrs	r3, PRIMASK
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
 8004646:	2301      	movs	r3, #1
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	46c0      	nop			; (mov r8, r8)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	494c      	ldr	r1, [pc, #304]	; (8004790 <UART_WaitOnFlagUntilTimeout+0x184>)
 800465e:	400a      	ands	r2, r1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004664:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466e:	f3ef 8310 	mrs	r3, PRIMASK
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004676:	643b      	str	r3, [r7, #64]	; 0x40
 8004678:	2301      	movs	r3, #1
 800467a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2101      	movs	r1, #1
 8004690:	438a      	bics	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2274      	movs	r2, #116	; 0x74
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e067      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2204      	movs	r2, #4
 80046c0:	4013      	ands	r3, r2
 80046c2:	d050      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	401a      	ands	r2, r3
 80046d0:	2380      	movs	r3, #128	; 0x80
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d146      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2280      	movs	r2, #128	; 0x80
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e2:	f3ef 8310 	mrs	r3, PRIMASK
 80046e6:	613b      	str	r3, [r7, #16]
  return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4923      	ldr	r1, [pc, #140]	; (8004790 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004704:	400a      	ands	r2, r1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f383 8810 	msr	PRIMASK, r3
}
 8004712:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004714:	f3ef 8310 	mrs	r3, PRIMASK
 8004718:	61fb      	str	r3, [r7, #28]
  return(result);
 800471a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	64bb      	str	r3, [r7, #72]	; 0x48
 800471e:	2301      	movs	r3, #1
 8004720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	438a      	bics	r2, r1
 8004738:	609a      	str	r2, [r3, #8]
 800473a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f383 8810 	msr	PRIMASK, r3
}
 8004744:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	2120      	movs	r1, #32
 8004758:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2274      	movs	r2, #116	; 0x74
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e010      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	425a      	negs	r2, r3
 8004776:	4153      	adcs	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	001a      	movs	r2, r3
 800477c:	1dfb      	adds	r3, r7, #7
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d100      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004784:	e74b      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	b014      	add	sp, #80	; 0x50
 800478e:	bd80      	pop	{r7, pc}
 8004790:	fffffe5f 	.word	0xfffffe5f

08004794 <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>:
#include "can_lib.h"

namespace PSR
{

CANBus::CANBus(CANBus::Interface& interface, const CANBus::Config& config)
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
    : _interface(interface), _config(config), _rxCallback(NULL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047ae:	c313      	stmia	r3!, {r0, r1, r4}
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	611a      	str	r2, [r3, #16]
{
}
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	0018      	movs	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	b005      	add	sp, #20
 80047be:	bd90      	pop	{r4, r7, pc}

080047c0 <_ZN3PSR6CANBus4InitEv>:

void CANBus::Init()
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	; 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;

    // Config filter ranges
    filter.FilterMaskIdLow  = (uint16_t)this->_config.FilterMask;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	001a      	movs	r2, r3
 80047d0:	2108      	movs	r1, #8
 80047d2:	187b      	adds	r3, r7, r1
 80047d4:	60da      	str	r2, [r3, #12]
    filter.FilterMaskIdHigh = (uint16_t)(this->_config.FilterMask >> 16);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	b29b      	uxth	r3, r3
 80047de:	001a      	movs	r2, r3
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	609a      	str	r2, [r3, #8]
    filter.FilterMode       = CAN_FILTERMODE_IDLIST;
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	2201      	movs	r2, #1
 80047e8:	619a      	str	r2, [r3, #24]

    // Config filter banks
    filter.FilterBank           = 0;
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2200      	movs	r2, #0
 80047f4:	611a      	str	r2, [r3, #16]
    filter.FilterActivation     = ENABLE;
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	2201      	movs	r2, #1
 80047fa:	621a      	str	r2, [r3, #32]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2201      	movs	r2, #1
 8004800:	61da      	str	r2, [r3, #28]

    // TODO: Fully understand filter setup
    // HAL_CAN_ConfigFilter(this->_interface, &filter);

    this->_interface.Init.AutoRetransmission = this->_config.AutoRetransmit ? ENABLE : DISABLE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	7a1b      	ldrb	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <_ZN3PSR6CANBus4InitEv+0x4e>
 800480a:	2201      	movs	r2, #1
 800480c:	e000      	b.n	8004810 <_ZN3PSR6CANBus4InitEv+0x50>
 800480e:	2200      	movs	r2, #0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	76da      	strb	r2, [r3, #27]
    HAL_CAN_Start(&this->_interface);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0018      	movs	r0, r3
 800481c:	f7fd fba4 	bl	8001f68 <HAL_CAN_Start>
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b00c      	add	sp, #48	; 0x30
 8004826:	bd80      	pop	{r7, pc}

08004828 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE>:

CANBus::TransmitStatus CANBus::Transmit(const Frame& frame)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;

    while (HAL_CAN_IsTxMessagePending(&this->_interface, CAN_TX_MAILBOX0 | CAN_TX_MAILBOX1 | CAN_TX_MAILBOX2))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2107      	movs	r1, #7
 8004838:	0018      	movs	r0, r3
 800483a:	f7fd fcb9 	bl	80021b0 <HAL_CAN_IsTxMessagePending>
 800483e:	0003      	movs	r3, r0
 8004840:	1e5a      	subs	r2, r3, #1
 8004842:	4193      	sbcs	r3, r2
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d000      	beq.n	800484c <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x24>
 800484a:	e7f2      	b.n	8004832 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xa>
    {
    }
    HAL_Delay(1);
 800484c:	2001      	movs	r0, #1
 800484e:	f7fd fa69 	bl	8001d24 <HAL_Delay>

    txHeader.ExtId = frame.IsExtended ? frame.Id & CANBus::EXT_ID_MASK : 0;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	795b      	ldrb	r3, [r3, #5]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x3c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	08da      	lsrs	r2, r3, #3
 8004862:	e000      	b.n	8004866 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x3e>
 8004864:	2200      	movs	r2, #0
 8004866:	230c      	movs	r3, #12
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	605a      	str	r2, [r3, #4]
    txHeader.StdId = frame.IsExtended ? 0 : frame.Id & CANBus::STD_ID_MASK;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	795b      	ldrb	r3, [r3, #5]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x50>
 8004874:	2200      	movs	r2, #0
 8004876:	e003      	b.n	8004880 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x58>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	055b      	lsls	r3, r3, #21
 800487e:	0d5a      	lsrs	r2, r3, #21
 8004880:	230c      	movs	r3, #12
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	601a      	str	r2, [r3, #0]
    txHeader.IDE   = frame.IsExtended ? CAN_ID_EXT : CAN_ID_STD;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	795b      	ldrb	r3, [r3, #5]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x6a>
 800488e:	2204      	movs	r2, #4
 8004890:	e000      	b.n	8004894 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x6c>
 8004892:	2200      	movs	r2, #0
 8004894:	210c      	movs	r1, #12
 8004896:	187b      	adds	r3, r7, r1
 8004898:	609a      	str	r2, [r3, #8]
    txHeader.DLC   = frame.Length;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	611a      	str	r2, [r3, #16]
    txHeader.RTR   = frame.IsRTR ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	791b      	ldrb	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x86>
 80048aa:	2202      	movs	r2, #2
 80048ac:	e000      	b.n	80048b0 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x88>
 80048ae:	2200      	movs	r2, #0
 80048b0:	210c      	movs	r1, #12
 80048b2:	187b      	adds	r3, r7, r1
 80048b4:	60da      	str	r2, [r3, #12]

    uint32_t mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&this->_interface, &txHeader, (uint8_t*)frame.Data.Bytes, &mailbox);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	3310      	adds	r3, #16
 80048be:	001a      	movs	r2, r3
 80048c0:	2527      	movs	r5, #39	; 0x27
 80048c2:	197c      	adds	r4, r7, r5
 80048c4:	2308      	movs	r3, #8
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	1879      	adds	r1, r7, r1
 80048ca:	f7fd fb93 	bl	8001ff4 <HAL_CAN_AddTxMessage>
 80048ce:	0003      	movs	r3, r0
 80048d0:	7023      	strb	r3, [r4, #0]

    switch (status)
 80048d2:	197b      	adds	r3, r7, r5
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xb8>
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d002      	beq.n	80048e4 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xbc>
 80048de:	e003      	b.n	80048e8 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc0>
    {
    case HAL_OK:
        return CANBus::Success;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e002      	b.n	80048ea <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc2>
    case HAL_ERROR:
        return CANBus::Error;
 80048e4:	2302      	movs	r3, #2
 80048e6:	e000      	b.n	80048ea <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc2>
    default:
        return CANBus::Unknown;
 80048e8:	2300      	movs	r3, #0
    }
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b00a      	add	sp, #40	; 0x28
 80048f0:	bdb0      	pop	{r4, r5, r7, pc}

080048f2 <_ZN3PSR7VescCANC1ERNS_6CANBusEh>:
#include "can_lib.h"

namespace PSR
{

VescCAN::VescCAN(CANBus& can, const uint8_t controllerId)
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	1dfb      	adds	r3, r7, #7
 80048fe:	701a      	strb	r2, [r3, #0]
    : _can(can), _controllerId(controllerId)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1dfa      	adds	r2, r7, #7
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	711a      	strb	r2, [r3, #4]
{
}
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b004      	add	sp, #16
 8004916:	bd80      	pop	{r7, pc}

08004918 <_ZN3PSR7VescCAN8CreateIdEm>:

uint32_t VescCAN::CreateId(uint32_t packet)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
    return this->_controllerId | (uint32_t)(packet) << 8;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	001a      	movs	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	4313      	orrs	r3, r2
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <_ZN3PSR7VescCAN12SetDutyCycleEf>:

void VescCAN::SetDutyCycle(float duty)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b08b      	sub	sp, #44	; 0x2c
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
    const uint32_t dutyMultiplier = 100000;
 8004942:	4b16      	ldr	r3, [pc, #88]	; (800499c <_ZN3PSR7VescCAN12SetDutyCycleEf+0x64>)
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t frameSize      = 4;
 8004946:	2304      	movs	r3, #4
 8004948:	623b      	str	r3, [r7, #32]

    CANBus::Frame frame;
    frame.IsExtended = true;
 800494a:	2408      	movs	r4, #8
 800494c:	193b      	adds	r3, r7, r4
 800494e:	2201      	movs	r2, #1
 8004950:	715a      	strb	r2, [r3, #5]
    frame.IsRTR      = false;
 8004952:	193b      	adds	r3, r7, r4
 8004954:	2200      	movs	r2, #0
 8004956:	711a      	strb	r2, [r3, #4]
    frame.Id         = CreateId(PacketId::SET_DUTY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2100      	movs	r1, #0
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff ffdb 	bl	8004918 <_ZN3PSR7VescCAN8CreateIdEm>
 8004962:	0002      	movs	r2, r0
 8004964:	193b      	adds	r3, r7, r4
 8004966:	601a      	str	r2, [r3, #0]
    frame.Length     = frameSize;
 8004968:	193b      	adds	r3, r7, r4
 800496a:	2204      	movs	r2, #4
 800496c:	609a      	str	r2, [r3, #8]
    frame.Data.Lower = (uint32_t)(duty * dutyMultiplier);
 800496e:	490c      	ldr	r1, [pc, #48]	; (80049a0 <_ZN3PSR7VescCAN12SetDutyCycleEf+0x68>)
 8004970:	6838      	ldr	r0, [r7, #0]
 8004972:	f7fb fc77 	bl	8000264 <__aeabi_fmul>
 8004976:	1c03      	adds	r3, r0, #0
 8004978:	1c18      	adds	r0, r3, #0
 800497a:	f7fb fc5b 	bl	8000234 <__aeabi_f2uiz>
 800497e:	0002      	movs	r2, r0
 8004980:	193b      	adds	r3, r7, r4
 8004982:	611a      	str	r2, [r3, #16]

    this->_can.Transmit(frame);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	193a      	adds	r2, r7, r4
 800498a:	0011      	movs	r1, r2
 800498c:	0018      	movs	r0, r3
 800498e:	f7ff ff4b 	bl	8004828 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE>
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b00b      	add	sp, #44	; 0x2c
 8004998:	bd90      	pop	{r4, r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	000186a0 	.word	0x000186a0
 80049a0:	47c35000 	.word	0x47c35000

080049a4 <__errno>:
 80049a4:	4b01      	ldr	r3, [pc, #4]	; (80049ac <__errno+0x8>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	2000000c 	.word	0x2000000c

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	2600      	movs	r6, #0
 80049b4:	4d0c      	ldr	r5, [pc, #48]	; (80049e8 <__libc_init_array+0x38>)
 80049b6:	4c0d      	ldr	r4, [pc, #52]	; (80049ec <__libc_init_array+0x3c>)
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	2600      	movs	r6, #0
 80049c2:	f001 f8fb 	bl	8005bbc <_init>
 80049c6:	4d0a      	ldr	r5, [pc, #40]	; (80049f0 <__libc_init_array+0x40>)
 80049c8:	4c0a      	ldr	r4, [pc, #40]	; (80049f4 <__libc_init_array+0x44>)
 80049ca:	1b64      	subs	r4, r4, r5
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	00b3      	lsls	r3, r6, #2
 80049d6:	58eb      	ldr	r3, [r5, r3]
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	00b3      	lsls	r3, r6, #2
 80049e0:	58eb      	ldr	r3, [r5, r3]
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	08005d28 	.word	0x08005d28
 80049ec:	08005d28 	.word	0x08005d28
 80049f0:	08005d28 	.word	0x08005d28
 80049f4:	08005d2c 	.word	0x08005d2c

080049f8 <memset>:
 80049f8:	0003      	movs	r3, r0
 80049fa:	1882      	adds	r2, r0, r2
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d100      	bne.n	8004a02 <memset+0xa>
 8004a00:	4770      	bx	lr
 8004a02:	7019      	strb	r1, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	e7f9      	b.n	80049fc <memset+0x4>

08004a08 <iprintf>:
 8004a08:	b40f      	push	{r0, r1, r2, r3}
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <iprintf+0x30>)
 8004a0c:	b513      	push	{r0, r1, r4, lr}
 8004a0e:	681c      	ldr	r4, [r3, #0]
 8004a10:	2c00      	cmp	r4, #0
 8004a12:	d005      	beq.n	8004a20 <iprintf+0x18>
 8004a14:	69a3      	ldr	r3, [r4, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <iprintf+0x18>
 8004a1a:	0020      	movs	r0, r4
 8004a1c:	f000 fa04 	bl	8004e28 <__sinit>
 8004a20:	ab05      	add	r3, sp, #20
 8004a22:	0020      	movs	r0, r4
 8004a24:	9a04      	ldr	r2, [sp, #16]
 8004a26:	68a1      	ldr	r1, [r4, #8]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	f000 fc21 	bl	8005270 <_vfiprintf_r>
 8004a2e:	bc16      	pop	{r1, r2, r4}
 8004a30:	bc08      	pop	{r3}
 8004a32:	b004      	add	sp, #16
 8004a34:	4718      	bx	r3
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	2000000c 	.word	0x2000000c

08004a3c <setvbuf>:
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	001d      	movs	r5, r3
 8004a40:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <setvbuf+0x17c>)
 8004a42:	b085      	sub	sp, #20
 8004a44:	681e      	ldr	r6, [r3, #0]
 8004a46:	0004      	movs	r4, r0
 8004a48:	000f      	movs	r7, r1
 8004a4a:	9200      	str	r2, [sp, #0]
 8004a4c:	2e00      	cmp	r6, #0
 8004a4e:	d005      	beq.n	8004a5c <setvbuf+0x20>
 8004a50:	69b3      	ldr	r3, [r6, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d102      	bne.n	8004a5c <setvbuf+0x20>
 8004a56:	0030      	movs	r0, r6
 8004a58:	f000 f9e6 	bl	8004e28 <__sinit>
 8004a5c:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <setvbuf+0x180>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d161      	bne.n	8004b26 <setvbuf+0xea>
 8004a62:	6874      	ldr	r4, [r6, #4]
 8004a64:	9b00      	ldr	r3, [sp, #0]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d005      	beq.n	8004a76 <setvbuf+0x3a>
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d900      	bls.n	8004a70 <setvbuf+0x34>
 8004a6e:	e09d      	b.n	8004bac <setvbuf+0x170>
 8004a70:	2d00      	cmp	r5, #0
 8004a72:	da00      	bge.n	8004a76 <setvbuf+0x3a>
 8004a74:	e09a      	b.n	8004bac <setvbuf+0x170>
 8004a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a78:	07db      	lsls	r3, r3, #31
 8004a7a:	d405      	bmi.n	8004a88 <setvbuf+0x4c>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	059b      	lsls	r3, r3, #22
 8004a80:	d402      	bmi.n	8004a88 <setvbuf+0x4c>
 8004a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a84:	f000 fa71 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004a88:	0021      	movs	r1, r4
 8004a8a:	0030      	movs	r0, r6
 8004a8c:	f000 f92a 	bl	8004ce4 <_fflush_r>
 8004a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a92:	2900      	cmp	r1, #0
 8004a94:	d008      	beq.n	8004aa8 <setvbuf+0x6c>
 8004a96:	0023      	movs	r3, r4
 8004a98:	3344      	adds	r3, #68	; 0x44
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	d002      	beq.n	8004aa4 <setvbuf+0x68>
 8004a9e:	0030      	movs	r0, r6
 8004aa0:	f000 fadc 	bl	800505c <_free_r>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61a3      	str	r3, [r4, #24]
 8004aac:	6063      	str	r3, [r4, #4]
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	d503      	bpl.n	8004abc <setvbuf+0x80>
 8004ab4:	0030      	movs	r0, r6
 8004ab6:	6921      	ldr	r1, [r4, #16]
 8004ab8:	f000 fad0 	bl	800505c <_free_r>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	4a40      	ldr	r2, [pc, #256]	; (8004bc0 <setvbuf+0x184>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	9b00      	ldr	r3, [sp, #0]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d100      	bne.n	8004acc <setvbuf+0x90>
 8004aca:	e069      	b.n	8004ba0 <setvbuf+0x164>
 8004acc:	ab03      	add	r3, sp, #12
 8004ace:	0021      	movs	r1, r4
 8004ad0:	0030      	movs	r0, r6
 8004ad2:	aa02      	add	r2, sp, #8
 8004ad4:	f000 fa4c 	bl	8004f70 <__swhatbuf_r>
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	4303      	orrs	r3, r0
 8004adc:	81a3      	strh	r3, [r4, #12]
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	d12b      	bne.n	8004b3a <setvbuf+0xfe>
 8004ae2:	9d02      	ldr	r5, [sp, #8]
 8004ae4:	0028      	movs	r0, r5
 8004ae6:	f000 faaf 	bl	8005048 <malloc>
 8004aea:	1e07      	subs	r7, r0, #0
 8004aec:	d153      	bne.n	8004b96 <setvbuf+0x15a>
 8004aee:	9b02      	ldr	r3, [sp, #8]
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	42ab      	cmp	r3, r5
 8004af4:	d149      	bne.n	8004b8a <setvbuf+0x14e>
 8004af6:	2501      	movs	r5, #1
 8004af8:	426d      	negs	r5, r5
 8004afa:	2302      	movs	r3, #2
 8004afc:	89a2      	ldrh	r2, [r4, #12]
 8004afe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004b00:	4313      	orrs	r3, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	60a2      	str	r2, [r4, #8]
 8004b06:	0022      	movs	r2, r4
 8004b08:	3247      	adds	r2, #71	; 0x47
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	6122      	str	r2, [r4, #16]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	6162      	str	r2, [r4, #20]
 8004b16:	4211      	tst	r1, r2
 8004b18:	d134      	bne.n	8004b84 <setvbuf+0x148>
 8004b1a:	059b      	lsls	r3, r3, #22
 8004b1c:	d432      	bmi.n	8004b84 <setvbuf+0x148>
 8004b1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b20:	f000 fa24 	bl	8004f6c <__retarget_lock_release_recursive>
 8004b24:	e02e      	b.n	8004b84 <setvbuf+0x148>
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <setvbuf+0x188>)
 8004b28:	429c      	cmp	r4, r3
 8004b2a:	d101      	bne.n	8004b30 <setvbuf+0xf4>
 8004b2c:	68b4      	ldr	r4, [r6, #8]
 8004b2e:	e799      	b.n	8004a64 <setvbuf+0x28>
 8004b30:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <setvbuf+0x18c>)
 8004b32:	429c      	cmp	r4, r3
 8004b34:	d196      	bne.n	8004a64 <setvbuf+0x28>
 8004b36:	68f4      	ldr	r4, [r6, #12]
 8004b38:	e794      	b.n	8004a64 <setvbuf+0x28>
 8004b3a:	2f00      	cmp	r7, #0
 8004b3c:	d0d2      	beq.n	8004ae4 <setvbuf+0xa8>
 8004b3e:	69b3      	ldr	r3, [r6, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <setvbuf+0x10e>
 8004b44:	0030      	movs	r0, r6
 8004b46:	f000 f96f 	bl	8004e28 <__sinit>
 8004b4a:	9b00      	ldr	r3, [sp, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <setvbuf+0x11a>
 8004b50:	89a2      	ldrh	r2, [r4, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	81a3      	strh	r3, [r4, #12]
 8004b56:	89a2      	ldrh	r2, [r4, #12]
 8004b58:	2308      	movs	r3, #8
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	6027      	str	r7, [r4, #0]
 8004b5e:	6127      	str	r7, [r4, #16]
 8004b60:	6165      	str	r5, [r4, #20]
 8004b62:	4019      	ands	r1, r3
 8004b64:	421a      	tst	r2, r3
 8004b66:	d01f      	beq.n	8004ba8 <setvbuf+0x16c>
 8004b68:	07d3      	lsls	r3, r2, #31
 8004b6a:	d51b      	bpl.n	8004ba4 <setvbuf+0x168>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	426d      	negs	r5, r5
 8004b70:	60a3      	str	r3, [r4, #8]
 8004b72:	61a5      	str	r5, [r4, #24]
 8004b74:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004b76:	2301      	movs	r3, #1
 8004b78:	000d      	movs	r5, r1
 8004b7a:	401d      	ands	r5, r3
 8004b7c:	4219      	tst	r1, r3
 8004b7e:	d118      	bne.n	8004bb2 <setvbuf+0x176>
 8004b80:	0593      	lsls	r3, r2, #22
 8004b82:	d5cc      	bpl.n	8004b1e <setvbuf+0xe2>
 8004b84:	0028      	movs	r0, r5
 8004b86:	b005      	add	sp, #20
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	9801      	ldr	r0, [sp, #4]
 8004b8c:	f000 fa5c 	bl	8005048 <malloc>
 8004b90:	9d01      	ldr	r5, [sp, #4]
 8004b92:	1e07      	subs	r7, r0, #0
 8004b94:	d0af      	beq.n	8004af6 <setvbuf+0xba>
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	89a2      	ldrh	r2, [r4, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	e7ce      	b.n	8004b3e <setvbuf+0x102>
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	e7aa      	b.n	8004afa <setvbuf+0xbe>
 8004ba4:	60a5      	str	r5, [r4, #8]
 8004ba6:	e7e5      	b.n	8004b74 <setvbuf+0x138>
 8004ba8:	60a1      	str	r1, [r4, #8]
 8004baa:	e7e3      	b.n	8004b74 <setvbuf+0x138>
 8004bac:	2501      	movs	r5, #1
 8004bae:	426d      	negs	r5, r5
 8004bb0:	e7e8      	b.n	8004b84 <setvbuf+0x148>
 8004bb2:	2500      	movs	r5, #0
 8004bb4:	e7e6      	b.n	8004b84 <setvbuf+0x148>
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	2000000c 	.word	0x2000000c
 8004bbc:	08005cb4 	.word	0x08005cb4
 8004bc0:	fffff35c 	.word	0xfffff35c
 8004bc4:	08005cd4 	.word	0x08005cd4
 8004bc8:	08005c94 	.word	0x08005c94

08004bcc <__sflush_r>:
 8004bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bce:	898b      	ldrh	r3, [r1, #12]
 8004bd0:	0005      	movs	r5, r0
 8004bd2:	000c      	movs	r4, r1
 8004bd4:	071a      	lsls	r2, r3, #28
 8004bd6:	d45f      	bmi.n	8004c98 <__sflush_r+0xcc>
 8004bd8:	684a      	ldr	r2, [r1, #4]
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	dc04      	bgt.n	8004be8 <__sflush_r+0x1c>
 8004bde:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004be0:	2a00      	cmp	r2, #0
 8004be2:	dc01      	bgt.n	8004be8 <__sflush_r+0x1c>
 8004be4:	2000      	movs	r0, #0
 8004be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004be8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d0fa      	beq.n	8004be4 <__sflush_r+0x18>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	682e      	ldr	r6, [r5, #0]
 8004bf4:	602a      	str	r2, [r5, #0]
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	0149      	lsls	r1, r1, #5
 8004bfa:	400a      	ands	r2, r1
 8004bfc:	420b      	tst	r3, r1
 8004bfe:	d034      	beq.n	8004c6a <__sflush_r+0x9e>
 8004c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	075b      	lsls	r3, r3, #29
 8004c06:	d506      	bpl.n	8004c16 <__sflush_r+0x4a>
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	1ac0      	subs	r0, r0, r3
 8004c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <__sflush_r+0x4a>
 8004c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c14:	1ac0      	subs	r0, r0, r3
 8004c16:	0002      	movs	r2, r0
 8004c18:	6a21      	ldr	r1, [r4, #32]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004c20:	47b8      	blx	r7
 8004c22:	89a1      	ldrh	r1, [r4, #12]
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	d106      	bne.n	8004c36 <__sflush_r+0x6a>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	2b1d      	cmp	r3, #29
 8004c2c:	d831      	bhi.n	8004c92 <__sflush_r+0xc6>
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <__sflush_r+0x114>)
 8004c30:	40da      	lsrs	r2, r3
 8004c32:	07d3      	lsls	r3, r2, #31
 8004c34:	d52d      	bpl.n	8004c92 <__sflush_r+0xc6>
 8004c36:	2300      	movs	r3, #0
 8004c38:	6063      	str	r3, [r4, #4]
 8004c3a:	6923      	ldr	r3, [r4, #16]
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	04cb      	lsls	r3, r1, #19
 8004c40:	d505      	bpl.n	8004c4e <__sflush_r+0x82>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <__sflush_r+0x80>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d100      	bne.n	8004c4e <__sflush_r+0x82>
 8004c4c:	6560      	str	r0, [r4, #84]	; 0x54
 8004c4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c50:	602e      	str	r6, [r5, #0]
 8004c52:	2900      	cmp	r1, #0
 8004c54:	d0c6      	beq.n	8004be4 <__sflush_r+0x18>
 8004c56:	0023      	movs	r3, r4
 8004c58:	3344      	adds	r3, #68	; 0x44
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	d002      	beq.n	8004c64 <__sflush_r+0x98>
 8004c5e:	0028      	movs	r0, r5
 8004c60:	f000 f9fc 	bl	800505c <_free_r>
 8004c64:	2000      	movs	r0, #0
 8004c66:	6360      	str	r0, [r4, #52]	; 0x34
 8004c68:	e7bd      	b.n	8004be6 <__sflush_r+0x1a>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	0028      	movs	r0, r5
 8004c6e:	6a21      	ldr	r1, [r4, #32]
 8004c70:	47b8      	blx	r7
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d1c5      	bne.n	8004c02 <__sflush_r+0x36>
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0c2      	beq.n	8004c02 <__sflush_r+0x36>
 8004c7c:	2b1d      	cmp	r3, #29
 8004c7e:	d001      	beq.n	8004c84 <__sflush_r+0xb8>
 8004c80:	2b16      	cmp	r3, #22
 8004c82:	d101      	bne.n	8004c88 <__sflush_r+0xbc>
 8004c84:	602e      	str	r6, [r5, #0]
 8004c86:	e7ad      	b.n	8004be4 <__sflush_r+0x18>
 8004c88:	2340      	movs	r3, #64	; 0x40
 8004c8a:	89a2      	ldrh	r2, [r4, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	e7a9      	b.n	8004be6 <__sflush_r+0x1a>
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	430b      	orrs	r3, r1
 8004c96:	e7fa      	b.n	8004c8e <__sflush_r+0xc2>
 8004c98:	690f      	ldr	r7, [r1, #16]
 8004c9a:	2f00      	cmp	r7, #0
 8004c9c:	d0a2      	beq.n	8004be4 <__sflush_r+0x18>
 8004c9e:	680a      	ldr	r2, [r1, #0]
 8004ca0:	600f      	str	r7, [r1, #0]
 8004ca2:	1bd2      	subs	r2, r2, r7
 8004ca4:	9201      	str	r2, [sp, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	079b      	lsls	r3, r3, #30
 8004caa:	d100      	bne.n	8004cae <__sflush_r+0xe2>
 8004cac:	694a      	ldr	r2, [r1, #20]
 8004cae:	60a2      	str	r2, [r4, #8]
 8004cb0:	9b01      	ldr	r3, [sp, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dc00      	bgt.n	8004cb8 <__sflush_r+0xec>
 8004cb6:	e795      	b.n	8004be4 <__sflush_r+0x18>
 8004cb8:	003a      	movs	r2, r7
 8004cba:	0028      	movs	r0, r5
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	6a21      	ldr	r1, [r4, #32]
 8004cc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cc2:	47b0      	blx	r6
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	dc06      	bgt.n	8004cd6 <__sflush_r+0x10a>
 8004cc8:	2340      	movs	r3, #64	; 0x40
 8004cca:	2001      	movs	r0, #1
 8004ccc:	89a2      	ldrh	r2, [r4, #12]
 8004cce:	4240      	negs	r0, r0
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	e787      	b.n	8004be6 <__sflush_r+0x1a>
 8004cd6:	9b01      	ldr	r3, [sp, #4]
 8004cd8:	183f      	adds	r7, r7, r0
 8004cda:	1a1b      	subs	r3, r3, r0
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	e7e7      	b.n	8004cb0 <__sflush_r+0xe4>
 8004ce0:	20400001 	.word	0x20400001

08004ce4 <_fflush_r>:
 8004ce4:	690b      	ldr	r3, [r1, #16]
 8004ce6:	b570      	push	{r4, r5, r6, lr}
 8004ce8:	0005      	movs	r5, r0
 8004cea:	000c      	movs	r4, r1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <_fflush_r+0x12>
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	0028      	movs	r0, r5
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d004      	beq.n	8004d04 <_fflush_r+0x20>
 8004cfa:	6983      	ldr	r3, [r0, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <_fflush_r+0x20>
 8004d00:	f000 f892 	bl	8004e28 <__sinit>
 8004d04:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <_fflush_r+0x74>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d11b      	bne.n	8004d42 <_fflush_r+0x5e>
 8004d0a:	686c      	ldr	r4, [r5, #4]
 8004d0c:	220c      	movs	r2, #12
 8004d0e:	5ea3      	ldrsh	r3, [r4, r2]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ed      	beq.n	8004cf0 <_fflush_r+0xc>
 8004d14:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d16:	07d2      	lsls	r2, r2, #31
 8004d18:	d404      	bmi.n	8004d24 <_fflush_r+0x40>
 8004d1a:	059b      	lsls	r3, r3, #22
 8004d1c:	d402      	bmi.n	8004d24 <_fflush_r+0x40>
 8004d1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d20:	f000 f923 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004d24:	0028      	movs	r0, r5
 8004d26:	0021      	movs	r1, r4
 8004d28:	f7ff ff50 	bl	8004bcc <__sflush_r>
 8004d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2e:	0005      	movs	r5, r0
 8004d30:	07db      	lsls	r3, r3, #31
 8004d32:	d4de      	bmi.n	8004cf2 <_fflush_r+0xe>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	059b      	lsls	r3, r3, #22
 8004d38:	d4db      	bmi.n	8004cf2 <_fflush_r+0xe>
 8004d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3c:	f000 f916 	bl	8004f6c <__retarget_lock_release_recursive>
 8004d40:	e7d7      	b.n	8004cf2 <_fflush_r+0xe>
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <_fflush_r+0x78>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	d101      	bne.n	8004d4c <_fflush_r+0x68>
 8004d48:	68ac      	ldr	r4, [r5, #8]
 8004d4a:	e7df      	b.n	8004d0c <_fflush_r+0x28>
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <_fflush_r+0x7c>)
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	d1dc      	bne.n	8004d0c <_fflush_r+0x28>
 8004d52:	68ec      	ldr	r4, [r5, #12]
 8004d54:	e7da      	b.n	8004d0c <_fflush_r+0x28>
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	08005cb4 	.word	0x08005cb4
 8004d5c:	08005cd4 	.word	0x08005cd4
 8004d60:	08005c94 	.word	0x08005c94

08004d64 <std>:
 8004d64:	2300      	movs	r3, #0
 8004d66:	b510      	push	{r4, lr}
 8004d68:	0004      	movs	r4, r0
 8004d6a:	6003      	str	r3, [r0, #0]
 8004d6c:	6043      	str	r3, [r0, #4]
 8004d6e:	6083      	str	r3, [r0, #8]
 8004d70:	8181      	strh	r1, [r0, #12]
 8004d72:	6643      	str	r3, [r0, #100]	; 0x64
 8004d74:	0019      	movs	r1, r3
 8004d76:	81c2      	strh	r2, [r0, #14]
 8004d78:	6103      	str	r3, [r0, #16]
 8004d7a:	6143      	str	r3, [r0, #20]
 8004d7c:	6183      	str	r3, [r0, #24]
 8004d7e:	2208      	movs	r2, #8
 8004d80:	305c      	adds	r0, #92	; 0x5c
 8004d82:	f7ff fe39 	bl	80049f8 <memset>
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <std+0x38>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	6263      	str	r3, [r4, #36]	; 0x24
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <std+0x3c>)
 8004d8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d90:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <std+0x40>)
 8004d92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d94:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <std+0x44>)
 8004d96:	6323      	str	r3, [r4, #48]	; 0x30
 8004d98:	bd10      	pop	{r4, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	0800580d 	.word	0x0800580d
 8004da0:	08005835 	.word	0x08005835
 8004da4:	0800586d 	.word	0x0800586d
 8004da8:	08005899 	.word	0x08005899

08004dac <_cleanup_r>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	4902      	ldr	r1, [pc, #8]	; (8004db8 <_cleanup_r+0xc>)
 8004db0:	f000 f8ba 	bl	8004f28 <_fwalk_reent>
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	08004ce5 	.word	0x08004ce5

08004dbc <__sfmoreglue>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	2568      	movs	r5, #104	; 0x68
 8004dc0:	1e4a      	subs	r2, r1, #1
 8004dc2:	4355      	muls	r5, r2
 8004dc4:	000e      	movs	r6, r1
 8004dc6:	0029      	movs	r1, r5
 8004dc8:	3174      	adds	r1, #116	; 0x74
 8004dca:	f000 f9b3 	bl	8005134 <_malloc_r>
 8004dce:	1e04      	subs	r4, r0, #0
 8004dd0:	d008      	beq.n	8004de4 <__sfmoreglue+0x28>
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	002a      	movs	r2, r5
 8004dd6:	6001      	str	r1, [r0, #0]
 8004dd8:	6046      	str	r6, [r0, #4]
 8004dda:	300c      	adds	r0, #12
 8004ddc:	60a0      	str	r0, [r4, #8]
 8004dde:	3268      	adds	r2, #104	; 0x68
 8004de0:	f7ff fe0a 	bl	80049f8 <memset>
 8004de4:	0020      	movs	r0, r4
 8004de6:	bd70      	pop	{r4, r5, r6, pc}

08004de8 <__sfp_lock_acquire>:
 8004de8:	b510      	push	{r4, lr}
 8004dea:	4802      	ldr	r0, [pc, #8]	; (8004df4 <__sfp_lock_acquire+0xc>)
 8004dec:	f000 f8bd 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004df0:	bd10      	pop	{r4, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	200001f1 	.word	0x200001f1

08004df8 <__sfp_lock_release>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	4802      	ldr	r0, [pc, #8]	; (8004e04 <__sfp_lock_release+0xc>)
 8004dfc:	f000 f8b6 	bl	8004f6c <__retarget_lock_release_recursive>
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	200001f1 	.word	0x200001f1

08004e08 <__sinit_lock_acquire>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	4802      	ldr	r0, [pc, #8]	; (8004e14 <__sinit_lock_acquire+0xc>)
 8004e0c:	f000 f8ad 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	200001f2 	.word	0x200001f2

08004e18 <__sinit_lock_release>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4802      	ldr	r0, [pc, #8]	; (8004e24 <__sinit_lock_release+0xc>)
 8004e1c:	f000 f8a6 	bl	8004f6c <__retarget_lock_release_recursive>
 8004e20:	bd10      	pop	{r4, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	200001f2 	.word	0x200001f2

08004e28 <__sinit>:
 8004e28:	b513      	push	{r0, r1, r4, lr}
 8004e2a:	0004      	movs	r4, r0
 8004e2c:	f7ff ffec 	bl	8004e08 <__sinit_lock_acquire>
 8004e30:	69a3      	ldr	r3, [r4, #24]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <__sinit+0x14>
 8004e36:	f7ff ffef 	bl	8004e18 <__sinit_lock_release>
 8004e3a:	bd13      	pop	{r0, r1, r4, pc}
 8004e3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004e3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004e40:	6523      	str	r3, [r4, #80]	; 0x50
 8004e42:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <__sinit+0x68>)
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <__sinit+0x6c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e4a:	9301      	str	r3, [sp, #4]
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	d101      	bne.n	8004e54 <__sinit+0x2c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	61a3      	str	r3, [r4, #24]
 8004e54:	0020      	movs	r0, r4
 8004e56:	f000 f81f 	bl	8004e98 <__sfp>
 8004e5a:	6060      	str	r0, [r4, #4]
 8004e5c:	0020      	movs	r0, r4
 8004e5e:	f000 f81b 	bl	8004e98 <__sfp>
 8004e62:	60a0      	str	r0, [r4, #8]
 8004e64:	0020      	movs	r0, r4
 8004e66:	f000 f817 	bl	8004e98 <__sfp>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	60e0      	str	r0, [r4, #12]
 8004e70:	6860      	ldr	r0, [r4, #4]
 8004e72:	f7ff ff77 	bl	8004d64 <std>
 8004e76:	2201      	movs	r2, #1
 8004e78:	2109      	movs	r1, #9
 8004e7a:	68a0      	ldr	r0, [r4, #8]
 8004e7c:	f7ff ff72 	bl	8004d64 <std>
 8004e80:	2202      	movs	r2, #2
 8004e82:	2112      	movs	r1, #18
 8004e84:	68e0      	ldr	r0, [r4, #12]
 8004e86:	f7ff ff6d 	bl	8004d64 <std>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61a3      	str	r3, [r4, #24]
 8004e8e:	e7d2      	b.n	8004e36 <__sinit+0xe>
 8004e90:	08005c90 	.word	0x08005c90
 8004e94:	08004dad 	.word	0x08004dad

08004e98 <__sfp>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	0007      	movs	r7, r0
 8004e9c:	f7ff ffa4 	bl	8004de8 <__sfp_lock_acquire>
 8004ea0:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <__sfp+0x88>)
 8004ea2:	681e      	ldr	r6, [r3, #0]
 8004ea4:	69b3      	ldr	r3, [r6, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <__sfp+0x18>
 8004eaa:	0030      	movs	r0, r6
 8004eac:	f7ff ffbc 	bl	8004e28 <__sinit>
 8004eb0:	3648      	adds	r6, #72	; 0x48
 8004eb2:	68b4      	ldr	r4, [r6, #8]
 8004eb4:	6873      	ldr	r3, [r6, #4]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	d504      	bpl.n	8004ec4 <__sfp+0x2c>
 8004eba:	6833      	ldr	r3, [r6, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d022      	beq.n	8004f06 <__sfp+0x6e>
 8004ec0:	6836      	ldr	r6, [r6, #0]
 8004ec2:	e7f6      	b.n	8004eb2 <__sfp+0x1a>
 8004ec4:	220c      	movs	r2, #12
 8004ec6:	5ea5      	ldrsh	r5, [r4, r2]
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	d11a      	bne.n	8004f02 <__sfp+0x6a>
 8004ecc:	0020      	movs	r0, r4
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <__sfp+0x8c>)
 8004ed0:	3058      	adds	r0, #88	; 0x58
 8004ed2:	60e3      	str	r3, [r4, #12]
 8004ed4:	6665      	str	r5, [r4, #100]	; 0x64
 8004ed6:	f000 f847 	bl	8004f68 <__retarget_lock_init_recursive>
 8004eda:	f7ff ff8d 	bl	8004df8 <__sfp_lock_release>
 8004ede:	0020      	movs	r0, r4
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	0029      	movs	r1, r5
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	60a5      	str	r5, [r4, #8]
 8004ee8:	6065      	str	r5, [r4, #4]
 8004eea:	6125      	str	r5, [r4, #16]
 8004eec:	6165      	str	r5, [r4, #20]
 8004eee:	61a5      	str	r5, [r4, #24]
 8004ef0:	305c      	adds	r0, #92	; 0x5c
 8004ef2:	f7ff fd81 	bl	80049f8 <memset>
 8004ef6:	6365      	str	r5, [r4, #52]	; 0x34
 8004ef8:	63a5      	str	r5, [r4, #56]	; 0x38
 8004efa:	64a5      	str	r5, [r4, #72]	; 0x48
 8004efc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004efe:	0020      	movs	r0, r4
 8004f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f02:	3468      	adds	r4, #104	; 0x68
 8004f04:	e7d7      	b.n	8004eb6 <__sfp+0x1e>
 8004f06:	2104      	movs	r1, #4
 8004f08:	0038      	movs	r0, r7
 8004f0a:	f7ff ff57 	bl	8004dbc <__sfmoreglue>
 8004f0e:	1e04      	subs	r4, r0, #0
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	d1d5      	bne.n	8004ec0 <__sfp+0x28>
 8004f14:	f7ff ff70 	bl	8004df8 <__sfp_lock_release>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	e7ef      	b.n	8004efe <__sfp+0x66>
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	08005c90 	.word	0x08005c90
 8004f24:	ffff0001 	.word	0xffff0001

08004f28 <_fwalk_reent>:
 8004f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2a:	0004      	movs	r4, r0
 8004f2c:	0006      	movs	r6, r0
 8004f2e:	2700      	movs	r7, #0
 8004f30:	9101      	str	r1, [sp, #4]
 8004f32:	3448      	adds	r4, #72	; 0x48
 8004f34:	6863      	ldr	r3, [r4, #4]
 8004f36:	68a5      	ldr	r5, [r4, #8]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	9b00      	ldr	r3, [sp, #0]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	d504      	bpl.n	8004f4c <_fwalk_reent+0x24>
 8004f42:	6824      	ldr	r4, [r4, #0]
 8004f44:	2c00      	cmp	r4, #0
 8004f46:	d1f5      	bne.n	8004f34 <_fwalk_reent+0xc>
 8004f48:	0038      	movs	r0, r7
 8004f4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f4c:	89ab      	ldrh	r3, [r5, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d908      	bls.n	8004f64 <_fwalk_reent+0x3c>
 8004f52:	220e      	movs	r2, #14
 8004f54:	5eab      	ldrsh	r3, [r5, r2]
 8004f56:	3301      	adds	r3, #1
 8004f58:	d004      	beq.n	8004f64 <_fwalk_reent+0x3c>
 8004f5a:	0029      	movs	r1, r5
 8004f5c:	0030      	movs	r0, r6
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	4798      	blx	r3
 8004f62:	4307      	orrs	r7, r0
 8004f64:	3568      	adds	r5, #104	; 0x68
 8004f66:	e7e8      	b.n	8004f3a <_fwalk_reent+0x12>

08004f68 <__retarget_lock_init_recursive>:
 8004f68:	4770      	bx	lr

08004f6a <__retarget_lock_acquire_recursive>:
 8004f6a:	4770      	bx	lr

08004f6c <__retarget_lock_release_recursive>:
 8004f6c:	4770      	bx	lr
	...

08004f70 <__swhatbuf_r>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	000e      	movs	r6, r1
 8004f74:	001d      	movs	r5, r3
 8004f76:	230e      	movs	r3, #14
 8004f78:	5ec9      	ldrsh	r1, [r1, r3]
 8004f7a:	0014      	movs	r4, r2
 8004f7c:	b096      	sub	sp, #88	; 0x58
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	da08      	bge.n	8004f94 <__swhatbuf_r+0x24>
 8004f82:	220c      	movs	r2, #12
 8004f84:	5eb3      	ldrsh	r3, [r6, r2]
 8004f86:	2200      	movs	r2, #0
 8004f88:	602a      	str	r2, [r5, #0]
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	d411      	bmi.n	8004fb2 <__swhatbuf_r+0x42>
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	e00f      	b.n	8004fb4 <__swhatbuf_r+0x44>
 8004f94:	466a      	mov	r2, sp
 8004f96:	f000 fd79 	bl	8005a8c <_fstat_r>
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	dbf1      	blt.n	8004f82 <__swhatbuf_r+0x12>
 8004f9e:	23f0      	movs	r3, #240	; 0xf0
 8004fa0:	9901      	ldr	r1, [sp, #4]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	4019      	ands	r1, r3
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <__swhatbuf_r+0x4c>)
 8004fa8:	18c9      	adds	r1, r1, r3
 8004faa:	424b      	negs	r3, r1
 8004fac:	4159      	adcs	r1, r3
 8004fae:	6029      	str	r1, [r5, #0]
 8004fb0:	e7ed      	b.n	8004f8e <__swhatbuf_r+0x1e>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	b016      	add	sp, #88	; 0x58
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	ffffe000 	.word	0xffffe000

08004fc0 <__smakebuf_r>:
 8004fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc2:	2602      	movs	r6, #2
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	0005      	movs	r5, r0
 8004fc8:	000c      	movs	r4, r1
 8004fca:	4233      	tst	r3, r6
 8004fcc:	d006      	beq.n	8004fdc <__smakebuf_r+0x1c>
 8004fce:	0023      	movs	r3, r4
 8004fd0:	3347      	adds	r3, #71	; 0x47
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	6163      	str	r3, [r4, #20]
 8004fda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004fdc:	466a      	mov	r2, sp
 8004fde:	ab01      	add	r3, sp, #4
 8004fe0:	f7ff ffc6 	bl	8004f70 <__swhatbuf_r>
 8004fe4:	9900      	ldr	r1, [sp, #0]
 8004fe6:	0007      	movs	r7, r0
 8004fe8:	0028      	movs	r0, r5
 8004fea:	f000 f8a3 	bl	8005134 <_malloc_r>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d108      	bne.n	8005004 <__smakebuf_r+0x44>
 8004ff2:	220c      	movs	r2, #12
 8004ff4:	5ea3      	ldrsh	r3, [r4, r2]
 8004ff6:	059a      	lsls	r2, r3, #22
 8004ff8:	d4ef      	bmi.n	8004fda <__smakebuf_r+0x1a>
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	431e      	orrs	r6, r3
 8005000:	81a6      	strh	r6, [r4, #12]
 8005002:	e7e4      	b.n	8004fce <__smakebuf_r+0xe>
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <__smakebuf_r+0x84>)
 8005006:	62ab      	str	r3, [r5, #40]	; 0x28
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	89a2      	ldrh	r2, [r4, #12]
 800500c:	6020      	str	r0, [r4, #0]
 800500e:	4313      	orrs	r3, r2
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	9b00      	ldr	r3, [sp, #0]
 8005014:	6120      	str	r0, [r4, #16]
 8005016:	6163      	str	r3, [r4, #20]
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <__smakebuf_r+0x7a>
 800501e:	0028      	movs	r0, r5
 8005020:	230e      	movs	r3, #14
 8005022:	5ee1      	ldrsh	r1, [r4, r3]
 8005024:	f000 fd44 	bl	8005ab0 <_isatty_r>
 8005028:	2800      	cmp	r0, #0
 800502a:	d006      	beq.n	800503a <__smakebuf_r+0x7a>
 800502c:	2203      	movs	r2, #3
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	4393      	bics	r3, r2
 8005032:	001a      	movs	r2, r3
 8005034:	2301      	movs	r3, #1
 8005036:	4313      	orrs	r3, r2
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	89a0      	ldrh	r0, [r4, #12]
 800503c:	4307      	orrs	r7, r0
 800503e:	81a7      	strh	r7, [r4, #12]
 8005040:	e7cb      	b.n	8004fda <__smakebuf_r+0x1a>
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	08004dad 	.word	0x08004dad

08005048 <malloc>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4b03      	ldr	r3, [pc, #12]	; (8005058 <malloc+0x10>)
 800504c:	0001      	movs	r1, r0
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	f000 f870 	bl	8005134 <_malloc_r>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	2000000c 	.word	0x2000000c

0800505c <_free_r>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	0005      	movs	r5, r0
 8005060:	2900      	cmp	r1, #0
 8005062:	d010      	beq.n	8005086 <_free_r+0x2a>
 8005064:	1f0c      	subs	r4, r1, #4
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	da00      	bge.n	800506e <_free_r+0x12>
 800506c:	18e4      	adds	r4, r4, r3
 800506e:	0028      	movs	r0, r5
 8005070:	f000 fd50 	bl	8005b14 <__malloc_lock>
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <_free_r+0x90>)
 8005076:	6813      	ldr	r3, [r2, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d105      	bne.n	8005088 <_free_r+0x2c>
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	6014      	str	r4, [r2, #0]
 8005080:	0028      	movs	r0, r5
 8005082:	f000 fd4f 	bl	8005b24 <__malloc_unlock>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	42a3      	cmp	r3, r4
 800508a:	d908      	bls.n	800509e <_free_r+0x42>
 800508c:	6821      	ldr	r1, [r4, #0]
 800508e:	1860      	adds	r0, r4, r1
 8005090:	4283      	cmp	r3, r0
 8005092:	d1f3      	bne.n	800507c <_free_r+0x20>
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	1841      	adds	r1, r0, r1
 800509a:	6021      	str	r1, [r4, #0]
 800509c:	e7ee      	b.n	800507c <_free_r+0x20>
 800509e:	001a      	movs	r2, r3
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <_free_r+0x4e>
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	d9f9      	bls.n	800509e <_free_r+0x42>
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	1850      	adds	r0, r2, r1
 80050ae:	42a0      	cmp	r0, r4
 80050b0:	d10b      	bne.n	80050ca <_free_r+0x6e>
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	1809      	adds	r1, r1, r0
 80050b6:	1850      	adds	r0, r2, r1
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	4283      	cmp	r3, r0
 80050bc:	d1e0      	bne.n	8005080 <_free_r+0x24>
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	1841      	adds	r1, r0, r1
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	6053      	str	r3, [r2, #4]
 80050c8:	e7da      	b.n	8005080 <_free_r+0x24>
 80050ca:	42a0      	cmp	r0, r4
 80050cc:	d902      	bls.n	80050d4 <_free_r+0x78>
 80050ce:	230c      	movs	r3, #12
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	e7d5      	b.n	8005080 <_free_r+0x24>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	1860      	adds	r0, r4, r1
 80050d8:	4283      	cmp	r3, r0
 80050da:	d103      	bne.n	80050e4 <_free_r+0x88>
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	1841      	adds	r1, r0, r1
 80050e2:	6021      	str	r1, [r4, #0]
 80050e4:	6063      	str	r3, [r4, #4]
 80050e6:	6054      	str	r4, [r2, #4]
 80050e8:	e7ca      	b.n	8005080 <_free_r+0x24>
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	200001f4 	.word	0x200001f4

080050f0 <sbrk_aligned>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4e0f      	ldr	r6, [pc, #60]	; (8005130 <sbrk_aligned+0x40>)
 80050f4:	000d      	movs	r5, r1
 80050f6:	6831      	ldr	r1, [r6, #0]
 80050f8:	0004      	movs	r4, r0
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d102      	bne.n	8005104 <sbrk_aligned+0x14>
 80050fe:	f000 fb73 	bl	80057e8 <_sbrk_r>
 8005102:	6030      	str	r0, [r6, #0]
 8005104:	0029      	movs	r1, r5
 8005106:	0020      	movs	r0, r4
 8005108:	f000 fb6e 	bl	80057e8 <_sbrk_r>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d00a      	beq.n	8005126 <sbrk_aligned+0x36>
 8005110:	2303      	movs	r3, #3
 8005112:	1cc5      	adds	r5, r0, #3
 8005114:	439d      	bics	r5, r3
 8005116:	42a8      	cmp	r0, r5
 8005118:	d007      	beq.n	800512a <sbrk_aligned+0x3a>
 800511a:	1a29      	subs	r1, r5, r0
 800511c:	0020      	movs	r0, r4
 800511e:	f000 fb63 	bl	80057e8 <_sbrk_r>
 8005122:	1c43      	adds	r3, r0, #1
 8005124:	d101      	bne.n	800512a <sbrk_aligned+0x3a>
 8005126:	2501      	movs	r5, #1
 8005128:	426d      	negs	r5, r5
 800512a:	0028      	movs	r0, r5
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	200001f8 	.word	0x200001f8

08005134 <_malloc_r>:
 8005134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005136:	2203      	movs	r2, #3
 8005138:	1ccb      	adds	r3, r1, #3
 800513a:	4393      	bics	r3, r2
 800513c:	3308      	adds	r3, #8
 800513e:	0006      	movs	r6, r0
 8005140:	001f      	movs	r7, r3
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d232      	bcs.n	80051ac <_malloc_r+0x78>
 8005146:	270c      	movs	r7, #12
 8005148:	42b9      	cmp	r1, r7
 800514a:	d831      	bhi.n	80051b0 <_malloc_r+0x7c>
 800514c:	0030      	movs	r0, r6
 800514e:	f000 fce1 	bl	8005b14 <__malloc_lock>
 8005152:	4d32      	ldr	r5, [pc, #200]	; (800521c <_malloc_r+0xe8>)
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	001c      	movs	r4, r3
 8005158:	2c00      	cmp	r4, #0
 800515a:	d12e      	bne.n	80051ba <_malloc_r+0x86>
 800515c:	0039      	movs	r1, r7
 800515e:	0030      	movs	r0, r6
 8005160:	f7ff ffc6 	bl	80050f0 <sbrk_aligned>
 8005164:	0004      	movs	r4, r0
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d11e      	bne.n	80051a8 <_malloc_r+0x74>
 800516a:	682c      	ldr	r4, [r5, #0]
 800516c:	0025      	movs	r5, r4
 800516e:	2d00      	cmp	r5, #0
 8005170:	d14a      	bne.n	8005208 <_malloc_r+0xd4>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0029      	movs	r1, r5
 8005176:	18e3      	adds	r3, r4, r3
 8005178:	0030      	movs	r0, r6
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	f000 fb34 	bl	80057e8 <_sbrk_r>
 8005180:	9b01      	ldr	r3, [sp, #4]
 8005182:	4283      	cmp	r3, r0
 8005184:	d143      	bne.n	800520e <_malloc_r+0xda>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	3703      	adds	r7, #3
 800518a:	1aff      	subs	r7, r7, r3
 800518c:	2303      	movs	r3, #3
 800518e:	439f      	bics	r7, r3
 8005190:	3708      	adds	r7, #8
 8005192:	2f0c      	cmp	r7, #12
 8005194:	d200      	bcs.n	8005198 <_malloc_r+0x64>
 8005196:	270c      	movs	r7, #12
 8005198:	0039      	movs	r1, r7
 800519a:	0030      	movs	r0, r6
 800519c:	f7ff ffa8 	bl	80050f0 <sbrk_aligned>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d034      	beq.n	800520e <_malloc_r+0xda>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	19df      	adds	r7, r3, r7
 80051a8:	6027      	str	r7, [r4, #0]
 80051aa:	e013      	b.n	80051d4 <_malloc_r+0xa0>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dacb      	bge.n	8005148 <_malloc_r+0x14>
 80051b0:	230c      	movs	r3, #12
 80051b2:	2500      	movs	r5, #0
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	0028      	movs	r0, r5
 80051b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	1bd1      	subs	r1, r2, r7
 80051be:	d420      	bmi.n	8005202 <_malloc_r+0xce>
 80051c0:	290b      	cmp	r1, #11
 80051c2:	d917      	bls.n	80051f4 <_malloc_r+0xc0>
 80051c4:	19e2      	adds	r2, r4, r7
 80051c6:	6027      	str	r7, [r4, #0]
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	d111      	bne.n	80051f0 <_malloc_r+0xbc>
 80051cc:	602a      	str	r2, [r5, #0]
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	6011      	str	r1, [r2, #0]
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	0030      	movs	r0, r6
 80051d6:	0025      	movs	r5, r4
 80051d8:	f000 fca4 	bl	8005b24 <__malloc_unlock>
 80051dc:	2207      	movs	r2, #7
 80051de:	350b      	adds	r5, #11
 80051e0:	1d23      	adds	r3, r4, #4
 80051e2:	4395      	bics	r5, r2
 80051e4:	1aea      	subs	r2, r5, r3
 80051e6:	429d      	cmp	r5, r3
 80051e8:	d0e5      	beq.n	80051b6 <_malloc_r+0x82>
 80051ea:	1b5b      	subs	r3, r3, r5
 80051ec:	50a3      	str	r3, [r4, r2]
 80051ee:	e7e2      	b.n	80051b6 <_malloc_r+0x82>
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e7ec      	b.n	80051ce <_malloc_r+0x9a>
 80051f4:	6862      	ldr	r2, [r4, #4]
 80051f6:	42a3      	cmp	r3, r4
 80051f8:	d101      	bne.n	80051fe <_malloc_r+0xca>
 80051fa:	602a      	str	r2, [r5, #0]
 80051fc:	e7ea      	b.n	80051d4 <_malloc_r+0xa0>
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	e7e8      	b.n	80051d4 <_malloc_r+0xa0>
 8005202:	0023      	movs	r3, r4
 8005204:	6864      	ldr	r4, [r4, #4]
 8005206:	e7a7      	b.n	8005158 <_malloc_r+0x24>
 8005208:	002c      	movs	r4, r5
 800520a:	686d      	ldr	r5, [r5, #4]
 800520c:	e7af      	b.n	800516e <_malloc_r+0x3a>
 800520e:	230c      	movs	r3, #12
 8005210:	0030      	movs	r0, r6
 8005212:	6033      	str	r3, [r6, #0]
 8005214:	f000 fc86 	bl	8005b24 <__malloc_unlock>
 8005218:	e7cd      	b.n	80051b6 <_malloc_r+0x82>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200001f4 	.word	0x200001f4

08005220 <__sfputc_r>:
 8005220:	6893      	ldr	r3, [r2, #8]
 8005222:	b510      	push	{r4, lr}
 8005224:	3b01      	subs	r3, #1
 8005226:	6093      	str	r3, [r2, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da04      	bge.n	8005236 <__sfputc_r+0x16>
 800522c:	6994      	ldr	r4, [r2, #24]
 800522e:	42a3      	cmp	r3, r4
 8005230:	db07      	blt.n	8005242 <__sfputc_r+0x22>
 8005232:	290a      	cmp	r1, #10
 8005234:	d005      	beq.n	8005242 <__sfputc_r+0x22>
 8005236:	6813      	ldr	r3, [r2, #0]
 8005238:	1c58      	adds	r0, r3, #1
 800523a:	6010      	str	r0, [r2, #0]
 800523c:	7019      	strb	r1, [r3, #0]
 800523e:	0008      	movs	r0, r1
 8005240:	bd10      	pop	{r4, pc}
 8005242:	f000 fb2f 	bl	80058a4 <__swbuf_r>
 8005246:	0001      	movs	r1, r0
 8005248:	e7f9      	b.n	800523e <__sfputc_r+0x1e>

0800524a <__sfputs_r>:
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524c:	0006      	movs	r6, r0
 800524e:	000f      	movs	r7, r1
 8005250:	0014      	movs	r4, r2
 8005252:	18d5      	adds	r5, r2, r3
 8005254:	42ac      	cmp	r4, r5
 8005256:	d101      	bne.n	800525c <__sfputs_r+0x12>
 8005258:	2000      	movs	r0, #0
 800525a:	e007      	b.n	800526c <__sfputs_r+0x22>
 800525c:	7821      	ldrb	r1, [r4, #0]
 800525e:	003a      	movs	r2, r7
 8005260:	0030      	movs	r0, r6
 8005262:	f7ff ffdd 	bl	8005220 <__sfputc_r>
 8005266:	3401      	adds	r4, #1
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d1f3      	bne.n	8005254 <__sfputs_r+0xa>
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005270 <_vfiprintf_r>:
 8005270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005272:	b0a1      	sub	sp, #132	; 0x84
 8005274:	0006      	movs	r6, r0
 8005276:	000c      	movs	r4, r1
 8005278:	001f      	movs	r7, r3
 800527a:	9203      	str	r2, [sp, #12]
 800527c:	2800      	cmp	r0, #0
 800527e:	d004      	beq.n	800528a <_vfiprintf_r+0x1a>
 8005280:	6983      	ldr	r3, [r0, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <_vfiprintf_r+0x1a>
 8005286:	f7ff fdcf 	bl	8004e28 <__sinit>
 800528a:	4b8e      	ldr	r3, [pc, #568]	; (80054c4 <_vfiprintf_r+0x254>)
 800528c:	429c      	cmp	r4, r3
 800528e:	d11c      	bne.n	80052ca <_vfiprintf_r+0x5a>
 8005290:	6874      	ldr	r4, [r6, #4]
 8005292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005294:	07db      	lsls	r3, r3, #31
 8005296:	d405      	bmi.n	80052a4 <_vfiprintf_r+0x34>
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	059b      	lsls	r3, r3, #22
 800529c:	d402      	bmi.n	80052a4 <_vfiprintf_r+0x34>
 800529e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a0:	f7ff fe63 	bl	8004f6a <__retarget_lock_acquire_recursive>
 80052a4:	89a3      	ldrh	r3, [r4, #12]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	d502      	bpl.n	80052b0 <_vfiprintf_r+0x40>
 80052aa:	6923      	ldr	r3, [r4, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d11d      	bne.n	80052ec <_vfiprintf_r+0x7c>
 80052b0:	0021      	movs	r1, r4
 80052b2:	0030      	movs	r0, r6
 80052b4:	f000 fb60 	bl	8005978 <__swsetup_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d017      	beq.n	80052ec <_vfiprintf_r+0x7c>
 80052bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d50d      	bpl.n	80052de <_vfiprintf_r+0x6e>
 80052c2:	2001      	movs	r0, #1
 80052c4:	4240      	negs	r0, r0
 80052c6:	b021      	add	sp, #132	; 0x84
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ca:	4b7f      	ldr	r3, [pc, #508]	; (80054c8 <_vfiprintf_r+0x258>)
 80052cc:	429c      	cmp	r4, r3
 80052ce:	d101      	bne.n	80052d4 <_vfiprintf_r+0x64>
 80052d0:	68b4      	ldr	r4, [r6, #8]
 80052d2:	e7de      	b.n	8005292 <_vfiprintf_r+0x22>
 80052d4:	4b7d      	ldr	r3, [pc, #500]	; (80054cc <_vfiprintf_r+0x25c>)
 80052d6:	429c      	cmp	r4, r3
 80052d8:	d1db      	bne.n	8005292 <_vfiprintf_r+0x22>
 80052da:	68f4      	ldr	r4, [r6, #12]
 80052dc:	e7d9      	b.n	8005292 <_vfiprintf_r+0x22>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d4ee      	bmi.n	80052c2 <_vfiprintf_r+0x52>
 80052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e6:	f7ff fe41 	bl	8004f6c <__retarget_lock_release_recursive>
 80052ea:	e7ea      	b.n	80052c2 <_vfiprintf_r+0x52>
 80052ec:	2300      	movs	r3, #0
 80052ee:	ad08      	add	r5, sp, #32
 80052f0:	616b      	str	r3, [r5, #20]
 80052f2:	3320      	adds	r3, #32
 80052f4:	766b      	strb	r3, [r5, #25]
 80052f6:	3310      	adds	r3, #16
 80052f8:	76ab      	strb	r3, [r5, #26]
 80052fa:	9707      	str	r7, [sp, #28]
 80052fc:	9f03      	ldr	r7, [sp, #12]
 80052fe:	783b      	ldrb	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <_vfiprintf_r+0x98>
 8005304:	2b25      	cmp	r3, #37	; 0x25
 8005306:	d14e      	bne.n	80053a6 <_vfiprintf_r+0x136>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	1afb      	subs	r3, r7, r3
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	429f      	cmp	r7, r3
 8005312:	d00d      	beq.n	8005330 <_vfiprintf_r+0xc0>
 8005314:	9b05      	ldr	r3, [sp, #20]
 8005316:	0021      	movs	r1, r4
 8005318:	0030      	movs	r0, r6
 800531a:	9a03      	ldr	r2, [sp, #12]
 800531c:	f7ff ff95 	bl	800524a <__sfputs_r>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d100      	bne.n	8005326 <_vfiprintf_r+0xb6>
 8005324:	e0b5      	b.n	8005492 <_vfiprintf_r+0x222>
 8005326:	696a      	ldr	r2, [r5, #20]
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	4694      	mov	ip, r2
 800532c:	4463      	add	r3, ip
 800532e:	616b      	str	r3, [r5, #20]
 8005330:	783b      	ldrb	r3, [r7, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d100      	bne.n	8005338 <_vfiprintf_r+0xc8>
 8005336:	e0ac      	b.n	8005492 <_vfiprintf_r+0x222>
 8005338:	2201      	movs	r2, #1
 800533a:	1c7b      	adds	r3, r7, #1
 800533c:	9303      	str	r3, [sp, #12]
 800533e:	2300      	movs	r3, #0
 8005340:	4252      	negs	r2, r2
 8005342:	606a      	str	r2, [r5, #4]
 8005344:	a904      	add	r1, sp, #16
 8005346:	3254      	adds	r2, #84	; 0x54
 8005348:	1852      	adds	r2, r2, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	60eb      	str	r3, [r5, #12]
 800534e:	60ab      	str	r3, [r5, #8]
 8005350:	7013      	strb	r3, [r2, #0]
 8005352:	65ab      	str	r3, [r5, #88]	; 0x58
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	2205      	movs	r2, #5
 8005358:	7819      	ldrb	r1, [r3, #0]
 800535a:	485d      	ldr	r0, [pc, #372]	; (80054d0 <_vfiprintf_r+0x260>)
 800535c:	f000 fbce 	bl	8005afc <memchr>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	1c5f      	adds	r7, r3, #1
 8005364:	2800      	cmp	r0, #0
 8005366:	d120      	bne.n	80053aa <_vfiprintf_r+0x13a>
 8005368:	682a      	ldr	r2, [r5, #0]
 800536a:	06d3      	lsls	r3, r2, #27
 800536c:	d504      	bpl.n	8005378 <_vfiprintf_r+0x108>
 800536e:	2353      	movs	r3, #83	; 0x53
 8005370:	a904      	add	r1, sp, #16
 8005372:	185b      	adds	r3, r3, r1
 8005374:	2120      	movs	r1, #32
 8005376:	7019      	strb	r1, [r3, #0]
 8005378:	0713      	lsls	r3, r2, #28
 800537a:	d504      	bpl.n	8005386 <_vfiprintf_r+0x116>
 800537c:	2353      	movs	r3, #83	; 0x53
 800537e:	a904      	add	r1, sp, #16
 8005380:	185b      	adds	r3, r3, r1
 8005382:	212b      	movs	r1, #43	; 0x2b
 8005384:	7019      	strb	r1, [r3, #0]
 8005386:	9b03      	ldr	r3, [sp, #12]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b2a      	cmp	r3, #42	; 0x2a
 800538c:	d016      	beq.n	80053bc <_vfiprintf_r+0x14c>
 800538e:	2100      	movs	r1, #0
 8005390:	68eb      	ldr	r3, [r5, #12]
 8005392:	9f03      	ldr	r7, [sp, #12]
 8005394:	783a      	ldrb	r2, [r7, #0]
 8005396:	1c78      	adds	r0, r7, #1
 8005398:	3a30      	subs	r2, #48	; 0x30
 800539a:	4684      	mov	ip, r0
 800539c:	2a09      	cmp	r2, #9
 800539e:	d94f      	bls.n	8005440 <_vfiprintf_r+0x1d0>
 80053a0:	2900      	cmp	r1, #0
 80053a2:	d111      	bne.n	80053c8 <_vfiprintf_r+0x158>
 80053a4:	e017      	b.n	80053d6 <_vfiprintf_r+0x166>
 80053a6:	3701      	adds	r7, #1
 80053a8:	e7a9      	b.n	80052fe <_vfiprintf_r+0x8e>
 80053aa:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <_vfiprintf_r+0x260>)
 80053ac:	682a      	ldr	r2, [r5, #0]
 80053ae:	1ac0      	subs	r0, r0, r3
 80053b0:	2301      	movs	r3, #1
 80053b2:	4083      	lsls	r3, r0
 80053b4:	4313      	orrs	r3, r2
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	9703      	str	r7, [sp, #12]
 80053ba:	e7cb      	b.n	8005354 <_vfiprintf_r+0xe4>
 80053bc:	9b07      	ldr	r3, [sp, #28]
 80053be:	1d19      	adds	r1, r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	9107      	str	r1, [sp, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db01      	blt.n	80053cc <_vfiprintf_r+0x15c>
 80053c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053ca:	e004      	b.n	80053d6 <_vfiprintf_r+0x166>
 80053cc:	425b      	negs	r3, r3
 80053ce:	60eb      	str	r3, [r5, #12]
 80053d0:	2302      	movs	r3, #2
 80053d2:	4313      	orrs	r3, r2
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	783b      	ldrb	r3, [r7, #0]
 80053d8:	2b2e      	cmp	r3, #46	; 0x2e
 80053da:	d10a      	bne.n	80053f2 <_vfiprintf_r+0x182>
 80053dc:	787b      	ldrb	r3, [r7, #1]
 80053de:	2b2a      	cmp	r3, #42	; 0x2a
 80053e0:	d137      	bne.n	8005452 <_vfiprintf_r+0x1e2>
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	3702      	adds	r7, #2
 80053e6:	1d1a      	adds	r2, r3, #4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	9207      	str	r2, [sp, #28]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	db2d      	blt.n	800544c <_vfiprintf_r+0x1dc>
 80053f0:	9309      	str	r3, [sp, #36]	; 0x24
 80053f2:	2203      	movs	r2, #3
 80053f4:	7839      	ldrb	r1, [r7, #0]
 80053f6:	4837      	ldr	r0, [pc, #220]	; (80054d4 <_vfiprintf_r+0x264>)
 80053f8:	f000 fb80 	bl	8005afc <memchr>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d007      	beq.n	8005410 <_vfiprintf_r+0x1a0>
 8005400:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <_vfiprintf_r+0x264>)
 8005402:	682a      	ldr	r2, [r5, #0]
 8005404:	1ac0      	subs	r0, r0, r3
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	4083      	lsls	r3, r0
 800540a:	4313      	orrs	r3, r2
 800540c:	3701      	adds	r7, #1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	7839      	ldrb	r1, [r7, #0]
 8005412:	1c7b      	adds	r3, r7, #1
 8005414:	2206      	movs	r2, #6
 8005416:	4830      	ldr	r0, [pc, #192]	; (80054d8 <_vfiprintf_r+0x268>)
 8005418:	9303      	str	r3, [sp, #12]
 800541a:	7629      	strb	r1, [r5, #24]
 800541c:	f000 fb6e 	bl	8005afc <memchr>
 8005420:	2800      	cmp	r0, #0
 8005422:	d045      	beq.n	80054b0 <_vfiprintf_r+0x240>
 8005424:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <_vfiprintf_r+0x26c>)
 8005426:	2b00      	cmp	r3, #0
 8005428:	d127      	bne.n	800547a <_vfiprintf_r+0x20a>
 800542a:	2207      	movs	r2, #7
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	3307      	adds	r3, #7
 8005430:	4393      	bics	r3, r2
 8005432:	3308      	adds	r3, #8
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	696b      	ldr	r3, [r5, #20]
 8005438:	9a04      	ldr	r2, [sp, #16]
 800543a:	189b      	adds	r3, r3, r2
 800543c:	616b      	str	r3, [r5, #20]
 800543e:	e75d      	b.n	80052fc <_vfiprintf_r+0x8c>
 8005440:	210a      	movs	r1, #10
 8005442:	434b      	muls	r3, r1
 8005444:	4667      	mov	r7, ip
 8005446:	189b      	adds	r3, r3, r2
 8005448:	3909      	subs	r1, #9
 800544a:	e7a3      	b.n	8005394 <_vfiprintf_r+0x124>
 800544c:	2301      	movs	r3, #1
 800544e:	425b      	negs	r3, r3
 8005450:	e7ce      	b.n	80053f0 <_vfiprintf_r+0x180>
 8005452:	2300      	movs	r3, #0
 8005454:	001a      	movs	r2, r3
 8005456:	3701      	adds	r7, #1
 8005458:	606b      	str	r3, [r5, #4]
 800545a:	7839      	ldrb	r1, [r7, #0]
 800545c:	1c78      	adds	r0, r7, #1
 800545e:	3930      	subs	r1, #48	; 0x30
 8005460:	4684      	mov	ip, r0
 8005462:	2909      	cmp	r1, #9
 8005464:	d903      	bls.n	800546e <_vfiprintf_r+0x1fe>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0c3      	beq.n	80053f2 <_vfiprintf_r+0x182>
 800546a:	9209      	str	r2, [sp, #36]	; 0x24
 800546c:	e7c1      	b.n	80053f2 <_vfiprintf_r+0x182>
 800546e:	230a      	movs	r3, #10
 8005470:	435a      	muls	r2, r3
 8005472:	4667      	mov	r7, ip
 8005474:	1852      	adds	r2, r2, r1
 8005476:	3b09      	subs	r3, #9
 8005478:	e7ef      	b.n	800545a <_vfiprintf_r+0x1ea>
 800547a:	ab07      	add	r3, sp, #28
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	0022      	movs	r2, r4
 8005480:	0029      	movs	r1, r5
 8005482:	0030      	movs	r0, r6
 8005484:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <_vfiprintf_r+0x270>)
 8005486:	e000      	b.n	800548a <_vfiprintf_r+0x21a>
 8005488:	bf00      	nop
 800548a:	9004      	str	r0, [sp, #16]
 800548c:	9b04      	ldr	r3, [sp, #16]
 800548e:	3301      	adds	r3, #1
 8005490:	d1d1      	bne.n	8005436 <_vfiprintf_r+0x1c6>
 8005492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005494:	07db      	lsls	r3, r3, #31
 8005496:	d405      	bmi.n	80054a4 <_vfiprintf_r+0x234>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	059b      	lsls	r3, r3, #22
 800549c:	d402      	bmi.n	80054a4 <_vfiprintf_r+0x234>
 800549e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a0:	f7ff fd64 	bl	8004f6c <__retarget_lock_release_recursive>
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	065b      	lsls	r3, r3, #25
 80054a8:	d500      	bpl.n	80054ac <_vfiprintf_r+0x23c>
 80054aa:	e70a      	b.n	80052c2 <_vfiprintf_r+0x52>
 80054ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80054ae:	e70a      	b.n	80052c6 <_vfiprintf_r+0x56>
 80054b0:	ab07      	add	r3, sp, #28
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	0022      	movs	r2, r4
 80054b6:	0029      	movs	r1, r5
 80054b8:	0030      	movs	r0, r6
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <_vfiprintf_r+0x270>)
 80054bc:	f000 f882 	bl	80055c4 <_printf_i>
 80054c0:	e7e3      	b.n	800548a <_vfiprintf_r+0x21a>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	08005cb4 	.word	0x08005cb4
 80054c8:	08005cd4 	.word	0x08005cd4
 80054cc:	08005c94 	.word	0x08005c94
 80054d0:	08005cf4 	.word	0x08005cf4
 80054d4:	08005cfa 	.word	0x08005cfa
 80054d8:	08005cfe 	.word	0x08005cfe
 80054dc:	00000000 	.word	0x00000000
 80054e0:	0800524b 	.word	0x0800524b

080054e4 <_printf_common>:
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e6:	0015      	movs	r5, r2
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	688a      	ldr	r2, [r1, #8]
 80054ec:	690b      	ldr	r3, [r1, #16]
 80054ee:	000c      	movs	r4, r1
 80054f0:	9000      	str	r0, [sp, #0]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	da00      	bge.n	80054f8 <_printf_common+0x14>
 80054f6:	0013      	movs	r3, r2
 80054f8:	0022      	movs	r2, r4
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	3243      	adds	r2, #67	; 0x43
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	2a00      	cmp	r2, #0
 8005502:	d001      	beq.n	8005508 <_printf_common+0x24>
 8005504:	3301      	adds	r3, #1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	069b      	lsls	r3, r3, #26
 800550c:	d502      	bpl.n	8005514 <_printf_common+0x30>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	3302      	adds	r3, #2
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	2306      	movs	r3, #6
 8005518:	0017      	movs	r7, r2
 800551a:	401f      	ands	r7, r3
 800551c:	421a      	tst	r2, r3
 800551e:	d027      	beq.n	8005570 <_printf_common+0x8c>
 8005520:	0023      	movs	r3, r4
 8005522:	3343      	adds	r3, #67	; 0x43
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	1e5a      	subs	r2, r3, #1
 8005528:	4193      	sbcs	r3, r2
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d430      	bmi.n	8005592 <_printf_common+0xae>
 8005530:	0022      	movs	r2, r4
 8005532:	9901      	ldr	r1, [sp, #4]
 8005534:	9800      	ldr	r0, [sp, #0]
 8005536:	9e08      	ldr	r6, [sp, #32]
 8005538:	3243      	adds	r2, #67	; 0x43
 800553a:	47b0      	blx	r6
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d025      	beq.n	800558c <_printf_common+0xa8>
 8005540:	2306      	movs	r3, #6
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	682a      	ldr	r2, [r5, #0]
 8005546:	68e1      	ldr	r1, [r4, #12]
 8005548:	2500      	movs	r5, #0
 800554a:	4003      	ands	r3, r0
 800554c:	2b04      	cmp	r3, #4
 800554e:	d103      	bne.n	8005558 <_printf_common+0x74>
 8005550:	1a8d      	subs	r5, r1, r2
 8005552:	43eb      	mvns	r3, r5
 8005554:	17db      	asrs	r3, r3, #31
 8005556:	401d      	ands	r5, r3
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	6922      	ldr	r2, [r4, #16]
 800555c:	4293      	cmp	r3, r2
 800555e:	dd01      	ble.n	8005564 <_printf_common+0x80>
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	18ed      	adds	r5, r5, r3
 8005564:	2700      	movs	r7, #0
 8005566:	42bd      	cmp	r5, r7
 8005568:	d120      	bne.n	80055ac <_printf_common+0xc8>
 800556a:	2000      	movs	r0, #0
 800556c:	e010      	b.n	8005590 <_printf_common+0xac>
 800556e:	3701      	adds	r7, #1
 8005570:	68e3      	ldr	r3, [r4, #12]
 8005572:	682a      	ldr	r2, [r5, #0]
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	42bb      	cmp	r3, r7
 8005578:	ddd2      	ble.n	8005520 <_printf_common+0x3c>
 800557a:	0022      	movs	r2, r4
 800557c:	2301      	movs	r3, #1
 800557e:	9901      	ldr	r1, [sp, #4]
 8005580:	9800      	ldr	r0, [sp, #0]
 8005582:	9e08      	ldr	r6, [sp, #32]
 8005584:	3219      	adds	r2, #25
 8005586:	47b0      	blx	r6
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d1f0      	bne.n	800556e <_printf_common+0x8a>
 800558c:	2001      	movs	r0, #1
 800558e:	4240      	negs	r0, r0
 8005590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005592:	2030      	movs	r0, #48	; 0x30
 8005594:	18e1      	adds	r1, r4, r3
 8005596:	3143      	adds	r1, #67	; 0x43
 8005598:	7008      	strb	r0, [r1, #0]
 800559a:	0021      	movs	r1, r4
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	3145      	adds	r1, #69	; 0x45
 80055a0:	7809      	ldrb	r1, [r1, #0]
 80055a2:	18a2      	adds	r2, r4, r2
 80055a4:	3243      	adds	r2, #67	; 0x43
 80055a6:	3302      	adds	r3, #2
 80055a8:	7011      	strb	r1, [r2, #0]
 80055aa:	e7c1      	b.n	8005530 <_printf_common+0x4c>
 80055ac:	0022      	movs	r2, r4
 80055ae:	2301      	movs	r3, #1
 80055b0:	9901      	ldr	r1, [sp, #4]
 80055b2:	9800      	ldr	r0, [sp, #0]
 80055b4:	9e08      	ldr	r6, [sp, #32]
 80055b6:	321a      	adds	r2, #26
 80055b8:	47b0      	blx	r6
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	d0e6      	beq.n	800558c <_printf_common+0xa8>
 80055be:	3701      	adds	r7, #1
 80055c0:	e7d1      	b.n	8005566 <_printf_common+0x82>
	...

080055c4 <_printf_i>:
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b08b      	sub	sp, #44	; 0x2c
 80055c8:	9206      	str	r2, [sp, #24]
 80055ca:	000a      	movs	r2, r1
 80055cc:	3243      	adds	r2, #67	; 0x43
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	9005      	str	r0, [sp, #20]
 80055d2:	9204      	str	r2, [sp, #16]
 80055d4:	7e0a      	ldrb	r2, [r1, #24]
 80055d6:	000c      	movs	r4, r1
 80055d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80055da:	2a78      	cmp	r2, #120	; 0x78
 80055dc:	d807      	bhi.n	80055ee <_printf_i+0x2a>
 80055de:	2a62      	cmp	r2, #98	; 0x62
 80055e0:	d809      	bhi.n	80055f6 <_printf_i+0x32>
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d100      	bne.n	80055e8 <_printf_i+0x24>
 80055e6:	e0c1      	b.n	800576c <_printf_i+0x1a8>
 80055e8:	2a58      	cmp	r2, #88	; 0x58
 80055ea:	d100      	bne.n	80055ee <_printf_i+0x2a>
 80055ec:	e08c      	b.n	8005708 <_printf_i+0x144>
 80055ee:	0026      	movs	r6, r4
 80055f0:	3642      	adds	r6, #66	; 0x42
 80055f2:	7032      	strb	r2, [r6, #0]
 80055f4:	e022      	b.n	800563c <_printf_i+0x78>
 80055f6:	0010      	movs	r0, r2
 80055f8:	3863      	subs	r0, #99	; 0x63
 80055fa:	2815      	cmp	r0, #21
 80055fc:	d8f7      	bhi.n	80055ee <_printf_i+0x2a>
 80055fe:	f7fa fd83 	bl	8000108 <__gnu_thumb1_case_shi>
 8005602:	0016      	.short	0x0016
 8005604:	fff6001f 	.word	0xfff6001f
 8005608:	fff6fff6 	.word	0xfff6fff6
 800560c:	001ffff6 	.word	0x001ffff6
 8005610:	fff6fff6 	.word	0xfff6fff6
 8005614:	fff6fff6 	.word	0xfff6fff6
 8005618:	003600a8 	.word	0x003600a8
 800561c:	fff6009a 	.word	0xfff6009a
 8005620:	00b9fff6 	.word	0x00b9fff6
 8005624:	0036fff6 	.word	0x0036fff6
 8005628:	fff6fff6 	.word	0xfff6fff6
 800562c:	009e      	.short	0x009e
 800562e:	0026      	movs	r6, r4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	3642      	adds	r6, #66	; 0x42
 8005634:	1d11      	adds	r1, r2, #4
 8005636:	6019      	str	r1, [r3, #0]
 8005638:	6813      	ldr	r3, [r2, #0]
 800563a:	7033      	strb	r3, [r6, #0]
 800563c:	2301      	movs	r3, #1
 800563e:	e0a7      	b.n	8005790 <_printf_i+0x1cc>
 8005640:	6808      	ldr	r0, [r1, #0]
 8005642:	6819      	ldr	r1, [r3, #0]
 8005644:	1d0a      	adds	r2, r1, #4
 8005646:	0605      	lsls	r5, r0, #24
 8005648:	d50b      	bpl.n	8005662 <_printf_i+0x9e>
 800564a:	680d      	ldr	r5, [r1, #0]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	2d00      	cmp	r5, #0
 8005650:	da03      	bge.n	800565a <_printf_i+0x96>
 8005652:	232d      	movs	r3, #45	; 0x2d
 8005654:	9a04      	ldr	r2, [sp, #16]
 8005656:	426d      	negs	r5, r5
 8005658:	7013      	strb	r3, [r2, #0]
 800565a:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <_printf_i+0x21c>)
 800565c:	270a      	movs	r7, #10
 800565e:	9303      	str	r3, [sp, #12]
 8005660:	e01b      	b.n	800569a <_printf_i+0xd6>
 8005662:	680d      	ldr	r5, [r1, #0]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	0641      	lsls	r1, r0, #25
 8005668:	d5f1      	bpl.n	800564e <_printf_i+0x8a>
 800566a:	b22d      	sxth	r5, r5
 800566c:	e7ef      	b.n	800564e <_printf_i+0x8a>
 800566e:	680d      	ldr	r5, [r1, #0]
 8005670:	6819      	ldr	r1, [r3, #0]
 8005672:	1d08      	adds	r0, r1, #4
 8005674:	6018      	str	r0, [r3, #0]
 8005676:	062e      	lsls	r6, r5, #24
 8005678:	d501      	bpl.n	800567e <_printf_i+0xba>
 800567a:	680d      	ldr	r5, [r1, #0]
 800567c:	e003      	b.n	8005686 <_printf_i+0xc2>
 800567e:	066d      	lsls	r5, r5, #25
 8005680:	d5fb      	bpl.n	800567a <_printf_i+0xb6>
 8005682:	680d      	ldr	r5, [r1, #0]
 8005684:	b2ad      	uxth	r5, r5
 8005686:	4b56      	ldr	r3, [pc, #344]	; (80057e0 <_printf_i+0x21c>)
 8005688:	2708      	movs	r7, #8
 800568a:	9303      	str	r3, [sp, #12]
 800568c:	2a6f      	cmp	r2, #111	; 0x6f
 800568e:	d000      	beq.n	8005692 <_printf_i+0xce>
 8005690:	3702      	adds	r7, #2
 8005692:	0023      	movs	r3, r4
 8005694:	2200      	movs	r2, #0
 8005696:	3343      	adds	r3, #67	; 0x43
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	60a3      	str	r3, [r4, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	db03      	blt.n	80056aa <_printf_i+0xe6>
 80056a2:	2204      	movs	r2, #4
 80056a4:	6821      	ldr	r1, [r4, #0]
 80056a6:	4391      	bics	r1, r2
 80056a8:	6021      	str	r1, [r4, #0]
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	d102      	bne.n	80056b4 <_printf_i+0xf0>
 80056ae:	9e04      	ldr	r6, [sp, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00c      	beq.n	80056ce <_printf_i+0x10a>
 80056b4:	9e04      	ldr	r6, [sp, #16]
 80056b6:	0028      	movs	r0, r5
 80056b8:	0039      	movs	r1, r7
 80056ba:	f7fa fdb5 	bl	8000228 <__aeabi_uidivmod>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	3e01      	subs	r6, #1
 80056c2:	5c5b      	ldrb	r3, [r3, r1]
 80056c4:	7033      	strb	r3, [r6, #0]
 80056c6:	002b      	movs	r3, r5
 80056c8:	0005      	movs	r5, r0
 80056ca:	429f      	cmp	r7, r3
 80056cc:	d9f3      	bls.n	80056b6 <_printf_i+0xf2>
 80056ce:	2f08      	cmp	r7, #8
 80056d0:	d109      	bne.n	80056e6 <_printf_i+0x122>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	07db      	lsls	r3, r3, #31
 80056d6:	d506      	bpl.n	80056e6 <_printf_i+0x122>
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	6922      	ldr	r2, [r4, #16]
 80056dc:	4293      	cmp	r3, r2
 80056de:	dc02      	bgt.n	80056e6 <_printf_i+0x122>
 80056e0:	2330      	movs	r3, #48	; 0x30
 80056e2:	3e01      	subs	r6, #1
 80056e4:	7033      	strb	r3, [r6, #0]
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	1b9b      	subs	r3, r3, r6
 80056ea:	6123      	str	r3, [r4, #16]
 80056ec:	9b07      	ldr	r3, [sp, #28]
 80056ee:	0021      	movs	r1, r4
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	9805      	ldr	r0, [sp, #20]
 80056f4:	9b06      	ldr	r3, [sp, #24]
 80056f6:	aa09      	add	r2, sp, #36	; 0x24
 80056f8:	f7ff fef4 	bl	80054e4 <_printf_common>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d14c      	bne.n	800579a <_printf_i+0x1d6>
 8005700:	2001      	movs	r0, #1
 8005702:	4240      	negs	r0, r0
 8005704:	b00b      	add	sp, #44	; 0x2c
 8005706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005708:	3145      	adds	r1, #69	; 0x45
 800570a:	700a      	strb	r2, [r1, #0]
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <_printf_i+0x21c>)
 800570e:	9203      	str	r2, [sp, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	ca20      	ldmia	r2!, {r5}
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	0608      	lsls	r0, r1, #24
 800571a:	d516      	bpl.n	800574a <_printf_i+0x186>
 800571c:	07cb      	lsls	r3, r1, #31
 800571e:	d502      	bpl.n	8005726 <_printf_i+0x162>
 8005720:	2320      	movs	r3, #32
 8005722:	4319      	orrs	r1, r3
 8005724:	6021      	str	r1, [r4, #0]
 8005726:	2710      	movs	r7, #16
 8005728:	2d00      	cmp	r5, #0
 800572a:	d1b2      	bne.n	8005692 <_printf_i+0xce>
 800572c:	2320      	movs	r3, #32
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	439a      	bics	r2, r3
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	e7ad      	b.n	8005692 <_printf_i+0xce>
 8005736:	2220      	movs	r2, #32
 8005738:	6809      	ldr	r1, [r1, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	0022      	movs	r2, r4
 8005740:	2178      	movs	r1, #120	; 0x78
 8005742:	3245      	adds	r2, #69	; 0x45
 8005744:	7011      	strb	r1, [r2, #0]
 8005746:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <_printf_i+0x220>)
 8005748:	e7e1      	b.n	800570e <_printf_i+0x14a>
 800574a:	0648      	lsls	r0, r1, #25
 800574c:	d5e6      	bpl.n	800571c <_printf_i+0x158>
 800574e:	b2ad      	uxth	r5, r5
 8005750:	e7e4      	b.n	800571c <_printf_i+0x158>
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	680d      	ldr	r5, [r1, #0]
 8005756:	1d10      	adds	r0, r2, #4
 8005758:	6949      	ldr	r1, [r1, #20]
 800575a:	6018      	str	r0, [r3, #0]
 800575c:	6813      	ldr	r3, [r2, #0]
 800575e:	062e      	lsls	r6, r5, #24
 8005760:	d501      	bpl.n	8005766 <_printf_i+0x1a2>
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	e002      	b.n	800576c <_printf_i+0x1a8>
 8005766:	066d      	lsls	r5, r5, #25
 8005768:	d5fb      	bpl.n	8005762 <_printf_i+0x19e>
 800576a:	8019      	strh	r1, [r3, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	9e04      	ldr	r6, [sp, #16]
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	e7bb      	b.n	80056ec <_printf_i+0x128>
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	1d11      	adds	r1, r2, #4
 8005778:	6019      	str	r1, [r3, #0]
 800577a:	6816      	ldr	r6, [r2, #0]
 800577c:	2100      	movs	r1, #0
 800577e:	0030      	movs	r0, r6
 8005780:	6862      	ldr	r2, [r4, #4]
 8005782:	f000 f9bb 	bl	8005afc <memchr>
 8005786:	2800      	cmp	r0, #0
 8005788:	d001      	beq.n	800578e <_printf_i+0x1ca>
 800578a:	1b80      	subs	r0, r0, r6
 800578c:	6060      	str	r0, [r4, #4]
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	2300      	movs	r3, #0
 8005794:	9a04      	ldr	r2, [sp, #16]
 8005796:	7013      	strb	r3, [r2, #0]
 8005798:	e7a8      	b.n	80056ec <_printf_i+0x128>
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	0032      	movs	r2, r6
 800579e:	9906      	ldr	r1, [sp, #24]
 80057a0:	9805      	ldr	r0, [sp, #20]
 80057a2:	9d07      	ldr	r5, [sp, #28]
 80057a4:	47a8      	blx	r5
 80057a6:	1c43      	adds	r3, r0, #1
 80057a8:	d0aa      	beq.n	8005700 <_printf_i+0x13c>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	079b      	lsls	r3, r3, #30
 80057ae:	d415      	bmi.n	80057dc <_printf_i+0x218>
 80057b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b2:	68e0      	ldr	r0, [r4, #12]
 80057b4:	4298      	cmp	r0, r3
 80057b6:	daa5      	bge.n	8005704 <_printf_i+0x140>
 80057b8:	0018      	movs	r0, r3
 80057ba:	e7a3      	b.n	8005704 <_printf_i+0x140>
 80057bc:	0022      	movs	r2, r4
 80057be:	2301      	movs	r3, #1
 80057c0:	9906      	ldr	r1, [sp, #24]
 80057c2:	9805      	ldr	r0, [sp, #20]
 80057c4:	9e07      	ldr	r6, [sp, #28]
 80057c6:	3219      	adds	r2, #25
 80057c8:	47b0      	blx	r6
 80057ca:	1c43      	adds	r3, r0, #1
 80057cc:	d098      	beq.n	8005700 <_printf_i+0x13c>
 80057ce:	3501      	adds	r5, #1
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	42ab      	cmp	r3, r5
 80057d8:	dcf0      	bgt.n	80057bc <_printf_i+0x1f8>
 80057da:	e7e9      	b.n	80057b0 <_printf_i+0x1ec>
 80057dc:	2500      	movs	r5, #0
 80057de:	e7f7      	b.n	80057d0 <_printf_i+0x20c>
 80057e0:	08005d05 	.word	0x08005d05
 80057e4:	08005d16 	.word	0x08005d16

080057e8 <_sbrk_r>:
 80057e8:	2300      	movs	r3, #0
 80057ea:	b570      	push	{r4, r5, r6, lr}
 80057ec:	4d06      	ldr	r5, [pc, #24]	; (8005808 <_sbrk_r+0x20>)
 80057ee:	0004      	movs	r4, r0
 80057f0:	0008      	movs	r0, r1
 80057f2:	602b      	str	r3, [r5, #0]
 80057f4:	f7fc f9cc 	bl	8001b90 <_sbrk>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d103      	bne.n	8005804 <_sbrk_r+0x1c>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d000      	beq.n	8005804 <_sbrk_r+0x1c>
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	200001fc 	.word	0x200001fc

0800580c <__sread>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	000c      	movs	r4, r1
 8005810:	250e      	movs	r5, #14
 8005812:	5f49      	ldrsh	r1, [r1, r5]
 8005814:	f000 f98e 	bl	8005b34 <_read_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	db03      	blt.n	8005824 <__sread+0x18>
 800581c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800581e:	181b      	adds	r3, r3, r0
 8005820:	6563      	str	r3, [r4, #84]	; 0x54
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	4a02      	ldr	r2, [pc, #8]	; (8005830 <__sread+0x24>)
 8005828:	4013      	ands	r3, r2
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	e7f9      	b.n	8005822 <__sread+0x16>
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	ffffefff 	.word	0xffffefff

08005834 <__swrite>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	001f      	movs	r7, r3
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	0005      	movs	r5, r0
 800583c:	000c      	movs	r4, r1
 800583e:	0016      	movs	r6, r2
 8005840:	05db      	lsls	r3, r3, #23
 8005842:	d505      	bpl.n	8005850 <__swrite+0x1c>
 8005844:	230e      	movs	r3, #14
 8005846:	5ec9      	ldrsh	r1, [r1, r3]
 8005848:	2200      	movs	r2, #0
 800584a:	2302      	movs	r3, #2
 800584c:	f000 f942 	bl	8005ad4 <_lseek_r>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <__swrite+0x34>)
 8005854:	0028      	movs	r0, r5
 8005856:	4013      	ands	r3, r2
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	0032      	movs	r2, r6
 800585c:	230e      	movs	r3, #14
 800585e:	5ee1      	ldrsh	r1, [r4, r3]
 8005860:	003b      	movs	r3, r7
 8005862:	f000 f875 	bl	8005950 <_write_r>
 8005866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005868:	ffffefff 	.word	0xffffefff

0800586c <__sseek>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	000c      	movs	r4, r1
 8005870:	250e      	movs	r5, #14
 8005872:	5f49      	ldrsh	r1, [r1, r5]
 8005874:	f000 f92e 	bl	8005ad4 <_lseek_r>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	1c42      	adds	r2, r0, #1
 800587c:	d103      	bne.n	8005886 <__sseek+0x1a>
 800587e:	4a05      	ldr	r2, [pc, #20]	; (8005894 <__sseek+0x28>)
 8005880:	4013      	ands	r3, r2
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	bd70      	pop	{r4, r5, r6, pc}
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	0152      	lsls	r2, r2, #5
 800588a:	4313      	orrs	r3, r2
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	6560      	str	r0, [r4, #84]	; 0x54
 8005890:	e7f8      	b.n	8005884 <__sseek+0x18>
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	ffffefff 	.word	0xffffefff

08005898 <__sclose>:
 8005898:	b510      	push	{r4, lr}
 800589a:	230e      	movs	r3, #14
 800589c:	5ec9      	ldrsh	r1, [r1, r3]
 800589e:	f000 f8e3 	bl	8005a68 <_close_r>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <__swbuf_r>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	0005      	movs	r5, r0
 80058a8:	000e      	movs	r6, r1
 80058aa:	0014      	movs	r4, r2
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d004      	beq.n	80058ba <__swbuf_r+0x16>
 80058b0:	6983      	ldr	r3, [r0, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <__swbuf_r+0x16>
 80058b6:	f7ff fab7 	bl	8004e28 <__sinit>
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <__swbuf_r+0xa0>)
 80058bc:	429c      	cmp	r4, r3
 80058be:	d12e      	bne.n	800591e <__swbuf_r+0x7a>
 80058c0:	686c      	ldr	r4, [r5, #4]
 80058c2:	69a3      	ldr	r3, [r4, #24]
 80058c4:	60a3      	str	r3, [r4, #8]
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	d532      	bpl.n	8005932 <__swbuf_r+0x8e>
 80058cc:	6923      	ldr	r3, [r4, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02f      	beq.n	8005932 <__swbuf_r+0x8e>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	6922      	ldr	r2, [r4, #16]
 80058d6:	b2f7      	uxtb	r7, r6
 80058d8:	1a98      	subs	r0, r3, r2
 80058da:	6963      	ldr	r3, [r4, #20]
 80058dc:	b2f6      	uxtb	r6, r6
 80058de:	4283      	cmp	r3, r0
 80058e0:	dc05      	bgt.n	80058ee <__swbuf_r+0x4a>
 80058e2:	0021      	movs	r1, r4
 80058e4:	0028      	movs	r0, r5
 80058e6:	f7ff f9fd 	bl	8004ce4 <_fflush_r>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d127      	bne.n	800593e <__swbuf_r+0x9a>
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	3001      	adds	r0, #1
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60a3      	str	r3, [r4, #8]
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	6022      	str	r2, [r4, #0]
 80058fc:	701f      	strb	r7, [r3, #0]
 80058fe:	6963      	ldr	r3, [r4, #20]
 8005900:	4283      	cmp	r3, r0
 8005902:	d004      	beq.n	800590e <__swbuf_r+0x6a>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	07db      	lsls	r3, r3, #31
 8005908:	d507      	bpl.n	800591a <__swbuf_r+0x76>
 800590a:	2e0a      	cmp	r6, #10
 800590c:	d105      	bne.n	800591a <__swbuf_r+0x76>
 800590e:	0021      	movs	r1, r4
 8005910:	0028      	movs	r0, r5
 8005912:	f7ff f9e7 	bl	8004ce4 <_fflush_r>
 8005916:	2800      	cmp	r0, #0
 8005918:	d111      	bne.n	800593e <__swbuf_r+0x9a>
 800591a:	0030      	movs	r0, r6
 800591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591e:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <__swbuf_r+0xa4>)
 8005920:	429c      	cmp	r4, r3
 8005922:	d101      	bne.n	8005928 <__swbuf_r+0x84>
 8005924:	68ac      	ldr	r4, [r5, #8]
 8005926:	e7cc      	b.n	80058c2 <__swbuf_r+0x1e>
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <__swbuf_r+0xa8>)
 800592a:	429c      	cmp	r4, r3
 800592c:	d1c9      	bne.n	80058c2 <__swbuf_r+0x1e>
 800592e:	68ec      	ldr	r4, [r5, #12]
 8005930:	e7c7      	b.n	80058c2 <__swbuf_r+0x1e>
 8005932:	0021      	movs	r1, r4
 8005934:	0028      	movs	r0, r5
 8005936:	f000 f81f 	bl	8005978 <__swsetup_r>
 800593a:	2800      	cmp	r0, #0
 800593c:	d0c9      	beq.n	80058d2 <__swbuf_r+0x2e>
 800593e:	2601      	movs	r6, #1
 8005940:	4276      	negs	r6, r6
 8005942:	e7ea      	b.n	800591a <__swbuf_r+0x76>
 8005944:	08005cb4 	.word	0x08005cb4
 8005948:	08005cd4 	.word	0x08005cd4
 800594c:	08005c94 	.word	0x08005c94

08005950 <_write_r>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	0004      	movs	r4, r0
 8005954:	0008      	movs	r0, r1
 8005956:	0011      	movs	r1, r2
 8005958:	001a      	movs	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	4d05      	ldr	r5, [pc, #20]	; (8005974 <_write_r+0x24>)
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f000 f924 	bl	8005bac <_write>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d103      	bne.n	8005970 <_write_r+0x20>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d000      	beq.n	8005970 <_write_r+0x20>
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	200001fc 	.word	0x200001fc

08005978 <__swsetup_r>:
 8005978:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <__swsetup_r+0xe0>)
 800597a:	b570      	push	{r4, r5, r6, lr}
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	0006      	movs	r6, r0
 8005980:	000c      	movs	r4, r1
 8005982:	2d00      	cmp	r5, #0
 8005984:	d005      	beq.n	8005992 <__swsetup_r+0x1a>
 8005986:	69ab      	ldr	r3, [r5, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <__swsetup_r+0x1a>
 800598c:	0028      	movs	r0, r5
 800598e:	f7ff fa4b 	bl	8004e28 <__sinit>
 8005992:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <__swsetup_r+0xe4>)
 8005994:	429c      	cmp	r4, r3
 8005996:	d10f      	bne.n	80059b8 <__swsetup_r+0x40>
 8005998:	686c      	ldr	r4, [r5, #4]
 800599a:	230c      	movs	r3, #12
 800599c:	5ee2      	ldrsh	r2, [r4, r3]
 800599e:	b293      	uxth	r3, r2
 80059a0:	0711      	lsls	r1, r2, #28
 80059a2:	d42d      	bmi.n	8005a00 <__swsetup_r+0x88>
 80059a4:	06d9      	lsls	r1, r3, #27
 80059a6:	d411      	bmi.n	80059cc <__swsetup_r+0x54>
 80059a8:	2309      	movs	r3, #9
 80059aa:	2001      	movs	r0, #1
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	3337      	adds	r3, #55	; 0x37
 80059b0:	4313      	orrs	r3, r2
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	4240      	negs	r0, r0
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <__swsetup_r+0xe8>)
 80059ba:	429c      	cmp	r4, r3
 80059bc:	d101      	bne.n	80059c2 <__swsetup_r+0x4a>
 80059be:	68ac      	ldr	r4, [r5, #8]
 80059c0:	e7eb      	b.n	800599a <__swsetup_r+0x22>
 80059c2:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <__swsetup_r+0xec>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	d1e8      	bne.n	800599a <__swsetup_r+0x22>
 80059c8:	68ec      	ldr	r4, [r5, #12]
 80059ca:	e7e6      	b.n	800599a <__swsetup_r+0x22>
 80059cc:	075b      	lsls	r3, r3, #29
 80059ce:	d513      	bpl.n	80059f8 <__swsetup_r+0x80>
 80059d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d2:	2900      	cmp	r1, #0
 80059d4:	d008      	beq.n	80059e8 <__swsetup_r+0x70>
 80059d6:	0023      	movs	r3, r4
 80059d8:	3344      	adds	r3, #68	; 0x44
 80059da:	4299      	cmp	r1, r3
 80059dc:	d002      	beq.n	80059e4 <__swsetup_r+0x6c>
 80059de:	0030      	movs	r0, r6
 80059e0:	f7ff fb3c 	bl	800505c <_free_r>
 80059e4:	2300      	movs	r3, #0
 80059e6:	6363      	str	r3, [r4, #52]	; 0x34
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	4393      	bics	r3, r2
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	2300      	movs	r3, #0
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	2308      	movs	r3, #8
 80059fa:	89a2      	ldrh	r2, [r4, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	81a3      	strh	r3, [r4, #12]
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <__swsetup_r+0xa6>
 8005a06:	21a0      	movs	r1, #160	; 0xa0
 8005a08:	2280      	movs	r2, #128	; 0x80
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	0089      	lsls	r1, r1, #2
 8005a0e:	0092      	lsls	r2, r2, #2
 8005a10:	400b      	ands	r3, r1
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <__swsetup_r+0xa6>
 8005a16:	0021      	movs	r1, r4
 8005a18:	0030      	movs	r0, r6
 8005a1a:	f7ff fad1 	bl	8004fc0 <__smakebuf_r>
 8005a1e:	220c      	movs	r2, #12
 8005a20:	5ea3      	ldrsh	r3, [r4, r2]
 8005a22:	2001      	movs	r0, #1
 8005a24:	001a      	movs	r2, r3
 8005a26:	b299      	uxth	r1, r3
 8005a28:	4002      	ands	r2, r0
 8005a2a:	4203      	tst	r3, r0
 8005a2c:	d00f      	beq.n	8005a4e <__swsetup_r+0xd6>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	60a2      	str	r2, [r4, #8]
 8005a32:	6962      	ldr	r2, [r4, #20]
 8005a34:	4252      	negs	r2, r2
 8005a36:	61a2      	str	r2, [r4, #24]
 8005a38:	2000      	movs	r0, #0
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	4282      	cmp	r2, r0
 8005a3e:	d1ba      	bne.n	80059b6 <__swsetup_r+0x3e>
 8005a40:	060a      	lsls	r2, r1, #24
 8005a42:	d5b8      	bpl.n	80059b6 <__swsetup_r+0x3e>
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	4313      	orrs	r3, r2
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	3801      	subs	r0, #1
 8005a4c:	e7b3      	b.n	80059b6 <__swsetup_r+0x3e>
 8005a4e:	0788      	lsls	r0, r1, #30
 8005a50:	d400      	bmi.n	8005a54 <__swsetup_r+0xdc>
 8005a52:	6962      	ldr	r2, [r4, #20]
 8005a54:	60a2      	str	r2, [r4, #8]
 8005a56:	e7ef      	b.n	8005a38 <__swsetup_r+0xc0>
 8005a58:	2000000c 	.word	0x2000000c
 8005a5c:	08005cb4 	.word	0x08005cb4
 8005a60:	08005cd4 	.word	0x08005cd4
 8005a64:	08005c94 	.word	0x08005c94

08005a68 <_close_r>:
 8005a68:	2300      	movs	r3, #0
 8005a6a:	b570      	push	{r4, r5, r6, lr}
 8005a6c:	4d06      	ldr	r5, [pc, #24]	; (8005a88 <_close_r+0x20>)
 8005a6e:	0004      	movs	r4, r0
 8005a70:	0008      	movs	r0, r1
 8005a72:	602b      	str	r3, [r5, #0]
 8005a74:	f000 f872 	bl	8005b5c <_close>
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d103      	bne.n	8005a84 <_close_r+0x1c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d000      	beq.n	8005a84 <_close_r+0x1c>
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	200001fc 	.word	0x200001fc

08005a8c <_fstat_r>:
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	b570      	push	{r4, r5, r6, lr}
 8005a90:	4d06      	ldr	r5, [pc, #24]	; (8005aac <_fstat_r+0x20>)
 8005a92:	0004      	movs	r4, r0
 8005a94:	0008      	movs	r0, r1
 8005a96:	0011      	movs	r1, r2
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	f000 f867 	bl	8005b6c <_fstat>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d103      	bne.n	8005aaa <_fstat_r+0x1e>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d000      	beq.n	8005aaa <_fstat_r+0x1e>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	200001fc 	.word	0x200001fc

08005ab0 <_isatty_r>:
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	b570      	push	{r4, r5, r6, lr}
 8005ab4:	4d06      	ldr	r5, [pc, #24]	; (8005ad0 <_isatty_r+0x20>)
 8005ab6:	0004      	movs	r4, r0
 8005ab8:	0008      	movs	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f000 f85e 	bl	8005b7c <_isatty>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d103      	bne.n	8005acc <_isatty_r+0x1c>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d000      	beq.n	8005acc <_isatty_r+0x1c>
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	200001fc 	.word	0x200001fc

08005ad4 <_lseek_r>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	0004      	movs	r4, r0
 8005ad8:	0008      	movs	r0, r1
 8005ada:	0011      	movs	r1, r2
 8005adc:	001a      	movs	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4d05      	ldr	r5, [pc, #20]	; (8005af8 <_lseek_r+0x24>)
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f000 f852 	bl	8005b8c <_lseek>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d103      	bne.n	8005af4 <_lseek_r+0x20>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d000      	beq.n	8005af4 <_lseek_r+0x20>
 8005af2:	6023      	str	r3, [r4, #0]
 8005af4:	bd70      	pop	{r4, r5, r6, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	200001fc 	.word	0x200001fc

08005afc <memchr>:
 8005afc:	b2c9      	uxtb	r1, r1
 8005afe:	1882      	adds	r2, r0, r2
 8005b00:	4290      	cmp	r0, r2
 8005b02:	d101      	bne.n	8005b08 <memchr+0xc>
 8005b04:	2000      	movs	r0, #0
 8005b06:	4770      	bx	lr
 8005b08:	7803      	ldrb	r3, [r0, #0]
 8005b0a:	428b      	cmp	r3, r1
 8005b0c:	d0fb      	beq.n	8005b06 <memchr+0xa>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	e7f6      	b.n	8005b00 <memchr+0x4>
	...

08005b14 <__malloc_lock>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4802      	ldr	r0, [pc, #8]	; (8005b20 <__malloc_lock+0xc>)
 8005b18:	f7ff fa27 	bl	8004f6a <__retarget_lock_acquire_recursive>
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	200001f0 	.word	0x200001f0

08005b24 <__malloc_unlock>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4802      	ldr	r0, [pc, #8]	; (8005b30 <__malloc_unlock+0xc>)
 8005b28:	f7ff fa20 	bl	8004f6c <__retarget_lock_release_recursive>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	200001f0 	.word	0x200001f0

08005b34 <_read_r>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	0004      	movs	r4, r0
 8005b38:	0008      	movs	r0, r1
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	001a      	movs	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	4d05      	ldr	r5, [pc, #20]	; (8005b58 <_read_r+0x24>)
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f000 f82a 	bl	8005b9c <_read>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d103      	bne.n	8005b54 <_read_r+0x20>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d000      	beq.n	8005b54 <_read_r+0x20>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	200001fc 	.word	0x200001fc

08005b5c <_close>:
 8005b5c:	2258      	movs	r2, #88	; 0x58
 8005b5e:	2001      	movs	r0, #1
 8005b60:	4b01      	ldr	r3, [pc, #4]	; (8005b68 <_close+0xc>)
 8005b62:	4240      	negs	r0, r0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	4770      	bx	lr
 8005b68:	200001fc 	.word	0x200001fc

08005b6c <_fstat>:
 8005b6c:	2258      	movs	r2, #88	; 0x58
 8005b6e:	2001      	movs	r0, #1
 8005b70:	4b01      	ldr	r3, [pc, #4]	; (8005b78 <_fstat+0xc>)
 8005b72:	4240      	negs	r0, r0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	4770      	bx	lr
 8005b78:	200001fc 	.word	0x200001fc

08005b7c <_isatty>:
 8005b7c:	2258      	movs	r2, #88	; 0x58
 8005b7e:	4b02      	ldr	r3, [pc, #8]	; (8005b88 <_isatty+0xc>)
 8005b80:	2000      	movs	r0, #0
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	4770      	bx	lr
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	200001fc 	.word	0x200001fc

08005b8c <_lseek>:
 8005b8c:	2258      	movs	r2, #88	; 0x58
 8005b8e:	2001      	movs	r0, #1
 8005b90:	4b01      	ldr	r3, [pc, #4]	; (8005b98 <_lseek+0xc>)
 8005b92:	4240      	negs	r0, r0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	4770      	bx	lr
 8005b98:	200001fc 	.word	0x200001fc

08005b9c <_read>:
 8005b9c:	2258      	movs	r2, #88	; 0x58
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	4b01      	ldr	r3, [pc, #4]	; (8005ba8 <_read+0xc>)
 8005ba2:	4240      	negs	r0, r0
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	4770      	bx	lr
 8005ba8:	200001fc 	.word	0x200001fc

08005bac <_write>:
 8005bac:	2258      	movs	r2, #88	; 0x58
 8005bae:	2001      	movs	r0, #1
 8005bb0:	4b01      	ldr	r3, [pc, #4]	; (8005bb8 <_write+0xc>)
 8005bb2:	4240      	negs	r0, r0
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	4770      	bx	lr
 8005bb8:	200001fc 	.word	0x200001fc

08005bbc <_init>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	46c0      	nop			; (mov r8, r8)
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr

08005bc8 <_fini>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr

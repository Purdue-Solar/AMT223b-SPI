
STM32F0_AMT223-B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048f4  080048f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  0800496c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800496c  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d01  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6c  00000000  00000000  00034d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00038a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da49  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014610  00000000  00000000  00057339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02b3  00000000  00000000  0006b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bbfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  0010bc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0010fa94  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0010fad0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004824 	.word	0x08004824

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004824 	.word	0x08004824

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0244      	lsls	r4, r0, #9
 800022a:	0045      	lsls	r5, r0, #1
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a64      	lsrs	r4, r4, #9
 8000230:	1c0f      	adds	r7, r1, #0
 8000232:	0e2d      	lsrs	r5, r5, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2d00      	cmp	r5, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fmul+0x1c>
 800023a:	e08d      	b.n	8000358 <__aeabi_fmul+0x138>
 800023c:	2dff      	cmp	r5, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fmul+0x22>
 8000240:	e092      	b.n	8000368 <__aeabi_fmul+0x148>
 8000242:	2300      	movs	r3, #0
 8000244:	2080      	movs	r0, #128	; 0x80
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	00e4      	lsls	r4, r4, #3
 800024c:	04c0      	lsls	r0, r0, #19
 800024e:	4304      	orrs	r4, r0
 8000250:	3d7f      	subs	r5, #127	; 0x7f
 8000252:	0278      	lsls	r0, r7, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	007b      	lsls	r3, r7, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fff      	lsrs	r7, r7, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d100      	bne.n	8000264 <__aeabi_fmul+0x44>
 8000262:	e070      	b.n	8000346 <__aeabi_fmul+0x126>
 8000264:	2bff      	cmp	r3, #255	; 0xff
 8000266:	d100      	bne.n	800026a <__aeabi_fmul+0x4a>
 8000268:	e086      	b.n	8000378 <__aeabi_fmul+0x158>
 800026a:	4642      	mov	r2, r8
 800026c:	00d0      	lsls	r0, r2, #3
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	3b7f      	subs	r3, #127	; 0x7f
 8000272:	18ed      	adds	r5, r5, r3
 8000274:	2300      	movs	r3, #0
 8000276:	04d2      	lsls	r2, r2, #19
 8000278:	4302      	orrs	r2, r0
 800027a:	4690      	mov	r8, r2
 800027c:	469c      	mov	ip, r3
 800027e:	0031      	movs	r1, r6
 8000280:	464b      	mov	r3, r9
 8000282:	4079      	eors	r1, r7
 8000284:	1c68      	adds	r0, r5, #1
 8000286:	2b0f      	cmp	r3, #15
 8000288:	d81c      	bhi.n	80002c4 <__aeabi_fmul+0xa4>
 800028a:	4a76      	ldr	r2, [pc, #472]	; (8000464 <__aeabi_fmul+0x244>)
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	58d3      	ldr	r3, [r2, r3]
 8000290:	469f      	mov	pc, r3
 8000292:	0039      	movs	r1, r7
 8000294:	4644      	mov	r4, r8
 8000296:	46e2      	mov	sl, ip
 8000298:	4653      	mov	r3, sl
 800029a:	2b02      	cmp	r3, #2
 800029c:	d00f      	beq.n	80002be <__aeabi_fmul+0x9e>
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d100      	bne.n	80002a4 <__aeabi_fmul+0x84>
 80002a2:	e0d7      	b.n	8000454 <__aeabi_fmul+0x234>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d137      	bne.n	8000318 <__aeabi_fmul+0xf8>
 80002a8:	2000      	movs	r0, #0
 80002aa:	2400      	movs	r4, #0
 80002ac:	05c0      	lsls	r0, r0, #23
 80002ae:	4320      	orrs	r0, r4
 80002b0:	07c9      	lsls	r1, r1, #31
 80002b2:	4308      	orrs	r0, r1
 80002b4:	bce0      	pop	{r5, r6, r7}
 80002b6:	46ba      	mov	sl, r7
 80002b8:	46b1      	mov	r9, r6
 80002ba:	46a8      	mov	r8, r5
 80002bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002be:	20ff      	movs	r0, #255	; 0xff
 80002c0:	2400      	movs	r4, #0
 80002c2:	e7f3      	b.n	80002ac <__aeabi_fmul+0x8c>
 80002c4:	0c26      	lsrs	r6, r4, #16
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c22      	lsrs	r2, r4, #16
 80002ca:	4644      	mov	r4, r8
 80002cc:	0424      	lsls	r4, r4, #16
 80002ce:	0c24      	lsrs	r4, r4, #16
 80002d0:	4643      	mov	r3, r8
 80002d2:	0027      	movs	r7, r4
 80002d4:	0c1b      	lsrs	r3, r3, #16
 80002d6:	4357      	muls	r7, r2
 80002d8:	4374      	muls	r4, r6
 80002da:	435a      	muls	r2, r3
 80002dc:	435e      	muls	r6, r3
 80002de:	1912      	adds	r2, r2, r4
 80002e0:	0c3b      	lsrs	r3, r7, #16
 80002e2:	189b      	adds	r3, r3, r2
 80002e4:	429c      	cmp	r4, r3
 80002e6:	d903      	bls.n	80002f0 <__aeabi_fmul+0xd0>
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0252      	lsls	r2, r2, #9
 80002ec:	4694      	mov	ip, r2
 80002ee:	4466      	add	r6, ip
 80002f0:	043f      	lsls	r7, r7, #16
 80002f2:	041a      	lsls	r2, r3, #16
 80002f4:	0c3f      	lsrs	r7, r7, #16
 80002f6:	19d2      	adds	r2, r2, r7
 80002f8:	0194      	lsls	r4, r2, #6
 80002fa:	1e67      	subs	r7, r4, #1
 80002fc:	41bc      	sbcs	r4, r7
 80002fe:	0c1b      	lsrs	r3, r3, #16
 8000300:	0e92      	lsrs	r2, r2, #26
 8000302:	199b      	adds	r3, r3, r6
 8000304:	4314      	orrs	r4, r2
 8000306:	019b      	lsls	r3, r3, #6
 8000308:	431c      	orrs	r4, r3
 800030a:	011b      	lsls	r3, r3, #4
 800030c:	d400      	bmi.n	8000310 <__aeabi_fmul+0xf0>
 800030e:	e09b      	b.n	8000448 <__aeabi_fmul+0x228>
 8000310:	2301      	movs	r3, #1
 8000312:	0862      	lsrs	r2, r4, #1
 8000314:	401c      	ands	r4, r3
 8000316:	4314      	orrs	r4, r2
 8000318:	0002      	movs	r2, r0
 800031a:	327f      	adds	r2, #127	; 0x7f
 800031c:	2a00      	cmp	r2, #0
 800031e:	dd64      	ble.n	80003ea <__aeabi_fmul+0x1ca>
 8000320:	0763      	lsls	r3, r4, #29
 8000322:	d004      	beq.n	800032e <__aeabi_fmul+0x10e>
 8000324:	230f      	movs	r3, #15
 8000326:	4023      	ands	r3, r4
 8000328:	2b04      	cmp	r3, #4
 800032a:	d000      	beq.n	800032e <__aeabi_fmul+0x10e>
 800032c:	3404      	adds	r4, #4
 800032e:	0123      	lsls	r3, r4, #4
 8000330:	d503      	bpl.n	800033a <__aeabi_fmul+0x11a>
 8000332:	0002      	movs	r2, r0
 8000334:	4b4c      	ldr	r3, [pc, #304]	; (8000468 <__aeabi_fmul+0x248>)
 8000336:	3280      	adds	r2, #128	; 0x80
 8000338:	401c      	ands	r4, r3
 800033a:	2afe      	cmp	r2, #254	; 0xfe
 800033c:	dcbf      	bgt.n	80002be <__aeabi_fmul+0x9e>
 800033e:	01a4      	lsls	r4, r4, #6
 8000340:	0a64      	lsrs	r4, r4, #9
 8000342:	b2d0      	uxtb	r0, r2
 8000344:	e7b2      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000346:	4643      	mov	r3, r8
 8000348:	2b00      	cmp	r3, #0
 800034a:	d13d      	bne.n	80003c8 <__aeabi_fmul+0x1a8>
 800034c:	464a      	mov	r2, r9
 800034e:	3301      	adds	r3, #1
 8000350:	431a      	orrs	r2, r3
 8000352:	4691      	mov	r9, r2
 8000354:	469c      	mov	ip, r3
 8000356:	e792      	b.n	800027e <__aeabi_fmul+0x5e>
 8000358:	2c00      	cmp	r4, #0
 800035a:	d129      	bne.n	80003b0 <__aeabi_fmul+0x190>
 800035c:	2304      	movs	r3, #4
 800035e:	4699      	mov	r9, r3
 8000360:	3b03      	subs	r3, #3
 8000362:	2500      	movs	r5, #0
 8000364:	469a      	mov	sl, r3
 8000366:	e774      	b.n	8000252 <__aeabi_fmul+0x32>
 8000368:	2c00      	cmp	r4, #0
 800036a:	d11b      	bne.n	80003a4 <__aeabi_fmul+0x184>
 800036c:	2308      	movs	r3, #8
 800036e:	4699      	mov	r9, r3
 8000370:	3b06      	subs	r3, #6
 8000372:	25ff      	movs	r5, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e76c      	b.n	8000252 <__aeabi_fmul+0x32>
 8000378:	4643      	mov	r3, r8
 800037a:	35ff      	adds	r5, #255	; 0xff
 800037c:	2b00      	cmp	r3, #0
 800037e:	d10b      	bne.n	8000398 <__aeabi_fmul+0x178>
 8000380:	2302      	movs	r3, #2
 8000382:	464a      	mov	r2, r9
 8000384:	431a      	orrs	r2, r3
 8000386:	4691      	mov	r9, r2
 8000388:	469c      	mov	ip, r3
 800038a:	e778      	b.n	800027e <__aeabi_fmul+0x5e>
 800038c:	4653      	mov	r3, sl
 800038e:	0031      	movs	r1, r6
 8000390:	2b02      	cmp	r3, #2
 8000392:	d000      	beq.n	8000396 <__aeabi_fmul+0x176>
 8000394:	e783      	b.n	800029e <__aeabi_fmul+0x7e>
 8000396:	e792      	b.n	80002be <__aeabi_fmul+0x9e>
 8000398:	2303      	movs	r3, #3
 800039a:	464a      	mov	r2, r9
 800039c:	431a      	orrs	r2, r3
 800039e:	4691      	mov	r9, r2
 80003a0:	469c      	mov	ip, r3
 80003a2:	e76c      	b.n	800027e <__aeabi_fmul+0x5e>
 80003a4:	230c      	movs	r3, #12
 80003a6:	4699      	mov	r9, r3
 80003a8:	3b09      	subs	r3, #9
 80003aa:	25ff      	movs	r5, #255	; 0xff
 80003ac:	469a      	mov	sl, r3
 80003ae:	e750      	b.n	8000252 <__aeabi_fmul+0x32>
 80003b0:	0020      	movs	r0, r4
 80003b2:	f000 fc29 	bl	8000c08 <__clzsi2>
 80003b6:	2576      	movs	r5, #118	; 0x76
 80003b8:	1f43      	subs	r3, r0, #5
 80003ba:	409c      	lsls	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	426d      	negs	r5, r5
 80003c0:	4699      	mov	r9, r3
 80003c2:	469a      	mov	sl, r3
 80003c4:	1a2d      	subs	r5, r5, r0
 80003c6:	e744      	b.n	8000252 <__aeabi_fmul+0x32>
 80003c8:	4640      	mov	r0, r8
 80003ca:	f000 fc1d 	bl	8000c08 <__clzsi2>
 80003ce:	4642      	mov	r2, r8
 80003d0:	1f43      	subs	r3, r0, #5
 80003d2:	409a      	lsls	r2, r3
 80003d4:	2300      	movs	r3, #0
 80003d6:	1a2d      	subs	r5, r5, r0
 80003d8:	4690      	mov	r8, r2
 80003da:	469c      	mov	ip, r3
 80003dc:	3d76      	subs	r5, #118	; 0x76
 80003de:	e74e      	b.n	800027e <__aeabi_fmul+0x5e>
 80003e0:	2480      	movs	r4, #128	; 0x80
 80003e2:	2100      	movs	r1, #0
 80003e4:	20ff      	movs	r0, #255	; 0xff
 80003e6:	03e4      	lsls	r4, r4, #15
 80003e8:	e760      	b.n	80002ac <__aeabi_fmul+0x8c>
 80003ea:	2301      	movs	r3, #1
 80003ec:	1a9b      	subs	r3, r3, r2
 80003ee:	2b1b      	cmp	r3, #27
 80003f0:	dd00      	ble.n	80003f4 <__aeabi_fmul+0x1d4>
 80003f2:	e759      	b.n	80002a8 <__aeabi_fmul+0x88>
 80003f4:	0022      	movs	r2, r4
 80003f6:	309e      	adds	r0, #158	; 0x9e
 80003f8:	40da      	lsrs	r2, r3
 80003fa:	4084      	lsls	r4, r0
 80003fc:	0013      	movs	r3, r2
 80003fe:	1e62      	subs	r2, r4, #1
 8000400:	4194      	sbcs	r4, r2
 8000402:	431c      	orrs	r4, r3
 8000404:	0763      	lsls	r3, r4, #29
 8000406:	d004      	beq.n	8000412 <__aeabi_fmul+0x1f2>
 8000408:	230f      	movs	r3, #15
 800040a:	4023      	ands	r3, r4
 800040c:	2b04      	cmp	r3, #4
 800040e:	d000      	beq.n	8000412 <__aeabi_fmul+0x1f2>
 8000410:	3404      	adds	r4, #4
 8000412:	0163      	lsls	r3, r4, #5
 8000414:	d51a      	bpl.n	800044c <__aeabi_fmul+0x22c>
 8000416:	2001      	movs	r0, #1
 8000418:	2400      	movs	r4, #0
 800041a:	e747      	b.n	80002ac <__aeabi_fmul+0x8c>
 800041c:	2080      	movs	r0, #128	; 0x80
 800041e:	03c0      	lsls	r0, r0, #15
 8000420:	4204      	tst	r4, r0
 8000422:	d009      	beq.n	8000438 <__aeabi_fmul+0x218>
 8000424:	4643      	mov	r3, r8
 8000426:	4203      	tst	r3, r0
 8000428:	d106      	bne.n	8000438 <__aeabi_fmul+0x218>
 800042a:	4644      	mov	r4, r8
 800042c:	4304      	orrs	r4, r0
 800042e:	0264      	lsls	r4, r4, #9
 8000430:	0039      	movs	r1, r7
 8000432:	20ff      	movs	r0, #255	; 0xff
 8000434:	0a64      	lsrs	r4, r4, #9
 8000436:	e739      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000438:	2080      	movs	r0, #128	; 0x80
 800043a:	03c0      	lsls	r0, r0, #15
 800043c:	4304      	orrs	r4, r0
 800043e:	0264      	lsls	r4, r4, #9
 8000440:	0031      	movs	r1, r6
 8000442:	20ff      	movs	r0, #255	; 0xff
 8000444:	0a64      	lsrs	r4, r4, #9
 8000446:	e731      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000448:	0028      	movs	r0, r5
 800044a:	e765      	b.n	8000318 <__aeabi_fmul+0xf8>
 800044c:	01a4      	lsls	r4, r4, #6
 800044e:	2000      	movs	r0, #0
 8000450:	0a64      	lsrs	r4, r4, #9
 8000452:	e72b      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000454:	2080      	movs	r0, #128	; 0x80
 8000456:	03c0      	lsls	r0, r0, #15
 8000458:	4304      	orrs	r4, r0
 800045a:	0264      	lsls	r4, r4, #9
 800045c:	20ff      	movs	r0, #255	; 0xff
 800045e:	0a64      	lsrs	r4, r4, #9
 8000460:	e724      	b.n	80002ac <__aeabi_fmul+0x8c>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	0800485c 	.word	0x0800485c
 8000468:	f7ffffff 	.word	0xf7ffffff

0800046c <__aeabi_f2iz>:
 800046c:	0241      	lsls	r1, r0, #9
 800046e:	0042      	lsls	r2, r0, #1
 8000470:	0fc3      	lsrs	r3, r0, #31
 8000472:	0a49      	lsrs	r1, r1, #9
 8000474:	2000      	movs	r0, #0
 8000476:	0e12      	lsrs	r2, r2, #24
 8000478:	2a7e      	cmp	r2, #126	; 0x7e
 800047a:	dd03      	ble.n	8000484 <__aeabi_f2iz+0x18>
 800047c:	2a9d      	cmp	r2, #157	; 0x9d
 800047e:	dd02      	ble.n	8000486 <__aeabi_f2iz+0x1a>
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <__aeabi_f2iz+0x3c>)
 8000482:	1898      	adds	r0, r3, r2
 8000484:	4770      	bx	lr
 8000486:	2080      	movs	r0, #128	; 0x80
 8000488:	0400      	lsls	r0, r0, #16
 800048a:	4301      	orrs	r1, r0
 800048c:	2a95      	cmp	r2, #149	; 0x95
 800048e:	dc07      	bgt.n	80004a0 <__aeabi_f2iz+0x34>
 8000490:	2096      	movs	r0, #150	; 0x96
 8000492:	1a82      	subs	r2, r0, r2
 8000494:	40d1      	lsrs	r1, r2
 8000496:	4248      	negs	r0, r1
 8000498:	2b00      	cmp	r3, #0
 800049a:	d1f3      	bne.n	8000484 <__aeabi_f2iz+0x18>
 800049c:	0008      	movs	r0, r1
 800049e:	e7f1      	b.n	8000484 <__aeabi_f2iz+0x18>
 80004a0:	3a96      	subs	r2, #150	; 0x96
 80004a2:	4091      	lsls	r1, r2
 80004a4:	e7f7      	b.n	8000496 <__aeabi_f2iz+0x2a>
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	7fffffff 	.word	0x7fffffff

080004ac <__aeabi_ddiv>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	4657      	mov	r7, sl
 80004b0:	464e      	mov	r6, r9
 80004b2:	4645      	mov	r5, r8
 80004b4:	46de      	mov	lr, fp
 80004b6:	b5e0      	push	{r5, r6, r7, lr}
 80004b8:	4681      	mov	r9, r0
 80004ba:	0005      	movs	r5, r0
 80004bc:	030c      	lsls	r4, r1, #12
 80004be:	0048      	lsls	r0, r1, #1
 80004c0:	4692      	mov	sl, r2
 80004c2:	001f      	movs	r7, r3
 80004c4:	b085      	sub	sp, #20
 80004c6:	0b24      	lsrs	r4, r4, #12
 80004c8:	0d40      	lsrs	r0, r0, #21
 80004ca:	0fce      	lsrs	r6, r1, #31
 80004cc:	2800      	cmp	r0, #0
 80004ce:	d100      	bne.n	80004d2 <__aeabi_ddiv+0x26>
 80004d0:	e156      	b.n	8000780 <__aeabi_ddiv+0x2d4>
 80004d2:	4bd4      	ldr	r3, [pc, #848]	; (8000824 <__aeabi_ddiv+0x378>)
 80004d4:	4298      	cmp	r0, r3
 80004d6:	d100      	bne.n	80004da <__aeabi_ddiv+0x2e>
 80004d8:	e172      	b.n	80007c0 <__aeabi_ddiv+0x314>
 80004da:	0f6b      	lsrs	r3, r5, #29
 80004dc:	00e4      	lsls	r4, r4, #3
 80004de:	431c      	orrs	r4, r3
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	041b      	lsls	r3, r3, #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	4698      	mov	r8, r3
 80004e8:	4bcf      	ldr	r3, [pc, #828]	; (8000828 <__aeabi_ddiv+0x37c>)
 80004ea:	00ed      	lsls	r5, r5, #3
 80004ec:	469b      	mov	fp, r3
 80004ee:	2300      	movs	r3, #0
 80004f0:	4699      	mov	r9, r3
 80004f2:	4483      	add	fp, r0
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	033c      	lsls	r4, r7, #12
 80004f8:	007b      	lsls	r3, r7, #1
 80004fa:	4650      	mov	r0, sl
 80004fc:	0b24      	lsrs	r4, r4, #12
 80004fe:	0d5b      	lsrs	r3, r3, #21
 8000500:	0fff      	lsrs	r7, r7, #31
 8000502:	2b00      	cmp	r3, #0
 8000504:	d100      	bne.n	8000508 <__aeabi_ddiv+0x5c>
 8000506:	e11f      	b.n	8000748 <__aeabi_ddiv+0x29c>
 8000508:	4ac6      	ldr	r2, [pc, #792]	; (8000824 <__aeabi_ddiv+0x378>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d100      	bne.n	8000510 <__aeabi_ddiv+0x64>
 800050e:	e162      	b.n	80007d6 <__aeabi_ddiv+0x32a>
 8000510:	49c5      	ldr	r1, [pc, #788]	; (8000828 <__aeabi_ddiv+0x37c>)
 8000512:	0f42      	lsrs	r2, r0, #29
 8000514:	468c      	mov	ip, r1
 8000516:	00e4      	lsls	r4, r4, #3
 8000518:	4659      	mov	r1, fp
 800051a:	4314      	orrs	r4, r2
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	4463      	add	r3, ip
 8000520:	0412      	lsls	r2, r2, #16
 8000522:	1acb      	subs	r3, r1, r3
 8000524:	4314      	orrs	r4, r2
 8000526:	469b      	mov	fp, r3
 8000528:	00c2      	lsls	r2, r0, #3
 800052a:	2000      	movs	r0, #0
 800052c:	0033      	movs	r3, r6
 800052e:	407b      	eors	r3, r7
 8000530:	469a      	mov	sl, r3
 8000532:	464b      	mov	r3, r9
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d827      	bhi.n	8000588 <__aeabi_ddiv+0xdc>
 8000538:	49bc      	ldr	r1, [pc, #752]	; (800082c <__aeabi_ddiv+0x380>)
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	58cb      	ldr	r3, [r1, r3]
 800053e:	469f      	mov	pc, r3
 8000540:	46b2      	mov	sl, r6
 8000542:	9b00      	ldr	r3, [sp, #0]
 8000544:	2b02      	cmp	r3, #2
 8000546:	d016      	beq.n	8000576 <__aeabi_ddiv+0xca>
 8000548:	2b03      	cmp	r3, #3
 800054a:	d100      	bne.n	800054e <__aeabi_ddiv+0xa2>
 800054c:	e28e      	b.n	8000a6c <__aeabi_ddiv+0x5c0>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d000      	beq.n	8000554 <__aeabi_ddiv+0xa8>
 8000552:	e0d9      	b.n	8000708 <__aeabi_ddiv+0x25c>
 8000554:	2300      	movs	r3, #0
 8000556:	2400      	movs	r4, #0
 8000558:	2500      	movs	r5, #0
 800055a:	4652      	mov	r2, sl
 800055c:	051b      	lsls	r3, r3, #20
 800055e:	4323      	orrs	r3, r4
 8000560:	07d2      	lsls	r2, r2, #31
 8000562:	4313      	orrs	r3, r2
 8000564:	0028      	movs	r0, r5
 8000566:	0019      	movs	r1, r3
 8000568:	b005      	add	sp, #20
 800056a:	bcf0      	pop	{r4, r5, r6, r7}
 800056c:	46bb      	mov	fp, r7
 800056e:	46b2      	mov	sl, r6
 8000570:	46a9      	mov	r9, r5
 8000572:	46a0      	mov	r8, r4
 8000574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000576:	2400      	movs	r4, #0
 8000578:	2500      	movs	r5, #0
 800057a:	4baa      	ldr	r3, [pc, #680]	; (8000824 <__aeabi_ddiv+0x378>)
 800057c:	e7ed      	b.n	800055a <__aeabi_ddiv+0xae>
 800057e:	46ba      	mov	sl, r7
 8000580:	46a0      	mov	r8, r4
 8000582:	0015      	movs	r5, r2
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	e7dc      	b.n	8000542 <__aeabi_ddiv+0x96>
 8000588:	4544      	cmp	r4, r8
 800058a:	d200      	bcs.n	800058e <__aeabi_ddiv+0xe2>
 800058c:	e1c7      	b.n	800091e <__aeabi_ddiv+0x472>
 800058e:	d100      	bne.n	8000592 <__aeabi_ddiv+0xe6>
 8000590:	e1c2      	b.n	8000918 <__aeabi_ddiv+0x46c>
 8000592:	2301      	movs	r3, #1
 8000594:	425b      	negs	r3, r3
 8000596:	469c      	mov	ip, r3
 8000598:	002e      	movs	r6, r5
 800059a:	4640      	mov	r0, r8
 800059c:	2500      	movs	r5, #0
 800059e:	44e3      	add	fp, ip
 80005a0:	0223      	lsls	r3, r4, #8
 80005a2:	0e14      	lsrs	r4, r2, #24
 80005a4:	431c      	orrs	r4, r3
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	4699      	mov	r9, r3
 80005aa:	0423      	lsls	r3, r4, #16
 80005ac:	0c1f      	lsrs	r7, r3, #16
 80005ae:	0212      	lsls	r2, r2, #8
 80005b0:	4649      	mov	r1, r9
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9701      	str	r7, [sp, #4]
 80005b6:	f7ff fe2d 	bl	8000214 <__aeabi_uidivmod>
 80005ba:	0002      	movs	r2, r0
 80005bc:	437a      	muls	r2, r7
 80005be:	040b      	lsls	r3, r1, #16
 80005c0:	0c31      	lsrs	r1, r6, #16
 80005c2:	4680      	mov	r8, r0
 80005c4:	4319      	orrs	r1, r3
 80005c6:	428a      	cmp	r2, r1
 80005c8:	d907      	bls.n	80005da <__aeabi_ddiv+0x12e>
 80005ca:	2301      	movs	r3, #1
 80005cc:	425b      	negs	r3, r3
 80005ce:	469c      	mov	ip, r3
 80005d0:	1909      	adds	r1, r1, r4
 80005d2:	44e0      	add	r8, ip
 80005d4:	428c      	cmp	r4, r1
 80005d6:	d800      	bhi.n	80005da <__aeabi_ddiv+0x12e>
 80005d8:	e207      	b.n	80009ea <__aeabi_ddiv+0x53e>
 80005da:	1a88      	subs	r0, r1, r2
 80005dc:	4649      	mov	r1, r9
 80005de:	f7ff fe19 	bl	8000214 <__aeabi_uidivmod>
 80005e2:	0409      	lsls	r1, r1, #16
 80005e4:	468c      	mov	ip, r1
 80005e6:	0431      	lsls	r1, r6, #16
 80005e8:	4666      	mov	r6, ip
 80005ea:	9a01      	ldr	r2, [sp, #4]
 80005ec:	0c09      	lsrs	r1, r1, #16
 80005ee:	4342      	muls	r2, r0
 80005f0:	0003      	movs	r3, r0
 80005f2:	4331      	orrs	r1, r6
 80005f4:	428a      	cmp	r2, r1
 80005f6:	d904      	bls.n	8000602 <__aeabi_ddiv+0x156>
 80005f8:	1909      	adds	r1, r1, r4
 80005fa:	3b01      	subs	r3, #1
 80005fc:	428c      	cmp	r4, r1
 80005fe:	d800      	bhi.n	8000602 <__aeabi_ddiv+0x156>
 8000600:	e1ed      	b.n	80009de <__aeabi_ddiv+0x532>
 8000602:	1a88      	subs	r0, r1, r2
 8000604:	4642      	mov	r2, r8
 8000606:	0412      	lsls	r2, r2, #16
 8000608:	431a      	orrs	r2, r3
 800060a:	4690      	mov	r8, r2
 800060c:	4641      	mov	r1, r8
 800060e:	9b00      	ldr	r3, [sp, #0]
 8000610:	040e      	lsls	r6, r1, #16
 8000612:	0c1b      	lsrs	r3, r3, #16
 8000614:	001f      	movs	r7, r3
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	9b00      	ldr	r3, [sp, #0]
 800061a:	0c36      	lsrs	r6, r6, #16
 800061c:	041b      	lsls	r3, r3, #16
 800061e:	0c19      	lsrs	r1, r3, #16
 8000620:	000b      	movs	r3, r1
 8000622:	4373      	muls	r3, r6
 8000624:	0c12      	lsrs	r2, r2, #16
 8000626:	437e      	muls	r6, r7
 8000628:	9103      	str	r1, [sp, #12]
 800062a:	4351      	muls	r1, r2
 800062c:	437a      	muls	r2, r7
 800062e:	0c1f      	lsrs	r7, r3, #16
 8000630:	46bc      	mov	ip, r7
 8000632:	1876      	adds	r6, r6, r1
 8000634:	4466      	add	r6, ip
 8000636:	42b1      	cmp	r1, r6
 8000638:	d903      	bls.n	8000642 <__aeabi_ddiv+0x196>
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	0249      	lsls	r1, r1, #9
 800063e:	468c      	mov	ip, r1
 8000640:	4462      	add	r2, ip
 8000642:	0c31      	lsrs	r1, r6, #16
 8000644:	188a      	adds	r2, r1, r2
 8000646:	0431      	lsls	r1, r6, #16
 8000648:	041e      	lsls	r6, r3, #16
 800064a:	0c36      	lsrs	r6, r6, #16
 800064c:	198e      	adds	r6, r1, r6
 800064e:	4290      	cmp	r0, r2
 8000650:	d302      	bcc.n	8000658 <__aeabi_ddiv+0x1ac>
 8000652:	d112      	bne.n	800067a <__aeabi_ddiv+0x1ce>
 8000654:	42b5      	cmp	r5, r6
 8000656:	d210      	bcs.n	800067a <__aeabi_ddiv+0x1ce>
 8000658:	4643      	mov	r3, r8
 800065a:	1e59      	subs	r1, r3, #1
 800065c:	9b00      	ldr	r3, [sp, #0]
 800065e:	469c      	mov	ip, r3
 8000660:	4465      	add	r5, ip
 8000662:	001f      	movs	r7, r3
 8000664:	429d      	cmp	r5, r3
 8000666:	419b      	sbcs	r3, r3
 8000668:	425b      	negs	r3, r3
 800066a:	191b      	adds	r3, r3, r4
 800066c:	18c0      	adds	r0, r0, r3
 800066e:	4284      	cmp	r4, r0
 8000670:	d200      	bcs.n	8000674 <__aeabi_ddiv+0x1c8>
 8000672:	e1a0      	b.n	80009b6 <__aeabi_ddiv+0x50a>
 8000674:	d100      	bne.n	8000678 <__aeabi_ddiv+0x1cc>
 8000676:	e19b      	b.n	80009b0 <__aeabi_ddiv+0x504>
 8000678:	4688      	mov	r8, r1
 800067a:	1bae      	subs	r6, r5, r6
 800067c:	42b5      	cmp	r5, r6
 800067e:	41ad      	sbcs	r5, r5
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	426d      	negs	r5, r5
 8000684:	1b40      	subs	r0, r0, r5
 8000686:	4284      	cmp	r4, r0
 8000688:	d100      	bne.n	800068c <__aeabi_ddiv+0x1e0>
 800068a:	e1d5      	b.n	8000a38 <__aeabi_ddiv+0x58c>
 800068c:	4649      	mov	r1, r9
 800068e:	f7ff fdc1 	bl	8000214 <__aeabi_uidivmod>
 8000692:	9a01      	ldr	r2, [sp, #4]
 8000694:	040b      	lsls	r3, r1, #16
 8000696:	4342      	muls	r2, r0
 8000698:	0c31      	lsrs	r1, r6, #16
 800069a:	0005      	movs	r5, r0
 800069c:	4319      	orrs	r1, r3
 800069e:	428a      	cmp	r2, r1
 80006a0:	d900      	bls.n	80006a4 <__aeabi_ddiv+0x1f8>
 80006a2:	e16c      	b.n	800097e <__aeabi_ddiv+0x4d2>
 80006a4:	1a88      	subs	r0, r1, r2
 80006a6:	4649      	mov	r1, r9
 80006a8:	f7ff fdb4 	bl	8000214 <__aeabi_uidivmod>
 80006ac:	9a01      	ldr	r2, [sp, #4]
 80006ae:	0436      	lsls	r6, r6, #16
 80006b0:	4342      	muls	r2, r0
 80006b2:	0409      	lsls	r1, r1, #16
 80006b4:	0c36      	lsrs	r6, r6, #16
 80006b6:	0003      	movs	r3, r0
 80006b8:	430e      	orrs	r6, r1
 80006ba:	42b2      	cmp	r2, r6
 80006bc:	d900      	bls.n	80006c0 <__aeabi_ddiv+0x214>
 80006be:	e153      	b.n	8000968 <__aeabi_ddiv+0x4bc>
 80006c0:	9803      	ldr	r0, [sp, #12]
 80006c2:	1ab6      	subs	r6, r6, r2
 80006c4:	0002      	movs	r2, r0
 80006c6:	042d      	lsls	r5, r5, #16
 80006c8:	431d      	orrs	r5, r3
 80006ca:	9f02      	ldr	r7, [sp, #8]
 80006cc:	042b      	lsls	r3, r5, #16
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	435a      	muls	r2, r3
 80006d2:	437b      	muls	r3, r7
 80006d4:	469c      	mov	ip, r3
 80006d6:	0c29      	lsrs	r1, r5, #16
 80006d8:	4348      	muls	r0, r1
 80006da:	0c13      	lsrs	r3, r2, #16
 80006dc:	4484      	add	ip, r0
 80006de:	4463      	add	r3, ip
 80006e0:	4379      	muls	r1, r7
 80006e2:	4298      	cmp	r0, r3
 80006e4:	d903      	bls.n	80006ee <__aeabi_ddiv+0x242>
 80006e6:	2080      	movs	r0, #128	; 0x80
 80006e8:	0240      	lsls	r0, r0, #9
 80006ea:	4684      	mov	ip, r0
 80006ec:	4461      	add	r1, ip
 80006ee:	0c18      	lsrs	r0, r3, #16
 80006f0:	0412      	lsls	r2, r2, #16
 80006f2:	041b      	lsls	r3, r3, #16
 80006f4:	0c12      	lsrs	r2, r2, #16
 80006f6:	1841      	adds	r1, r0, r1
 80006f8:	189b      	adds	r3, r3, r2
 80006fa:	428e      	cmp	r6, r1
 80006fc:	d200      	bcs.n	8000700 <__aeabi_ddiv+0x254>
 80006fe:	e0ff      	b.n	8000900 <__aeabi_ddiv+0x454>
 8000700:	d100      	bne.n	8000704 <__aeabi_ddiv+0x258>
 8000702:	e0fa      	b.n	80008fa <__aeabi_ddiv+0x44e>
 8000704:	2301      	movs	r3, #1
 8000706:	431d      	orrs	r5, r3
 8000708:	4a49      	ldr	r2, [pc, #292]	; (8000830 <__aeabi_ddiv+0x384>)
 800070a:	445a      	add	r2, fp
 800070c:	2a00      	cmp	r2, #0
 800070e:	dc00      	bgt.n	8000712 <__aeabi_ddiv+0x266>
 8000710:	e0aa      	b.n	8000868 <__aeabi_ddiv+0x3bc>
 8000712:	076b      	lsls	r3, r5, #29
 8000714:	d000      	beq.n	8000718 <__aeabi_ddiv+0x26c>
 8000716:	e13d      	b.n	8000994 <__aeabi_ddiv+0x4e8>
 8000718:	08ed      	lsrs	r5, r5, #3
 800071a:	4643      	mov	r3, r8
 800071c:	01db      	lsls	r3, r3, #7
 800071e:	d506      	bpl.n	800072e <__aeabi_ddiv+0x282>
 8000720:	4642      	mov	r2, r8
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <__aeabi_ddiv+0x388>)
 8000724:	401a      	ands	r2, r3
 8000726:	4690      	mov	r8, r2
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	00d2      	lsls	r2, r2, #3
 800072c:	445a      	add	r2, fp
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <__aeabi_ddiv+0x38c>)
 8000730:	429a      	cmp	r2, r3
 8000732:	dd00      	ble.n	8000736 <__aeabi_ddiv+0x28a>
 8000734:	e71f      	b.n	8000576 <__aeabi_ddiv+0xca>
 8000736:	4643      	mov	r3, r8
 8000738:	075b      	lsls	r3, r3, #29
 800073a:	431d      	orrs	r5, r3
 800073c:	4643      	mov	r3, r8
 800073e:	0552      	lsls	r2, r2, #21
 8000740:	025c      	lsls	r4, r3, #9
 8000742:	0b24      	lsrs	r4, r4, #12
 8000744:	0d53      	lsrs	r3, r2, #21
 8000746:	e708      	b.n	800055a <__aeabi_ddiv+0xae>
 8000748:	4652      	mov	r2, sl
 800074a:	4322      	orrs	r2, r4
 800074c:	d100      	bne.n	8000750 <__aeabi_ddiv+0x2a4>
 800074e:	e07b      	b.n	8000848 <__aeabi_ddiv+0x39c>
 8000750:	2c00      	cmp	r4, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_ddiv+0x2aa>
 8000754:	e0fa      	b.n	800094c <__aeabi_ddiv+0x4a0>
 8000756:	0020      	movs	r0, r4
 8000758:	f000 fa56 	bl	8000c08 <__clzsi2>
 800075c:	0002      	movs	r2, r0
 800075e:	3a0b      	subs	r2, #11
 8000760:	231d      	movs	r3, #29
 8000762:	0001      	movs	r1, r0
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	4652      	mov	r2, sl
 8000768:	3908      	subs	r1, #8
 800076a:	40da      	lsrs	r2, r3
 800076c:	408c      	lsls	r4, r1
 800076e:	4314      	orrs	r4, r2
 8000770:	4652      	mov	r2, sl
 8000772:	408a      	lsls	r2, r1
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <__aeabi_ddiv+0x390>)
 8000776:	4458      	add	r0, fp
 8000778:	469b      	mov	fp, r3
 800077a:	4483      	add	fp, r0
 800077c:	2000      	movs	r0, #0
 800077e:	e6d5      	b.n	800052c <__aeabi_ddiv+0x80>
 8000780:	464b      	mov	r3, r9
 8000782:	4323      	orrs	r3, r4
 8000784:	4698      	mov	r8, r3
 8000786:	d044      	beq.n	8000812 <__aeabi_ddiv+0x366>
 8000788:	2c00      	cmp	r4, #0
 800078a:	d100      	bne.n	800078e <__aeabi_ddiv+0x2e2>
 800078c:	e0ce      	b.n	800092c <__aeabi_ddiv+0x480>
 800078e:	0020      	movs	r0, r4
 8000790:	f000 fa3a 	bl	8000c08 <__clzsi2>
 8000794:	0001      	movs	r1, r0
 8000796:	0002      	movs	r2, r0
 8000798:	390b      	subs	r1, #11
 800079a:	231d      	movs	r3, #29
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	4649      	mov	r1, r9
 80007a0:	0010      	movs	r0, r2
 80007a2:	40d9      	lsrs	r1, r3
 80007a4:	3808      	subs	r0, #8
 80007a6:	4084      	lsls	r4, r0
 80007a8:	000b      	movs	r3, r1
 80007aa:	464d      	mov	r5, r9
 80007ac:	4323      	orrs	r3, r4
 80007ae:	4698      	mov	r8, r3
 80007b0:	4085      	lsls	r5, r0
 80007b2:	4823      	ldr	r0, [pc, #140]	; (8000840 <__aeabi_ddiv+0x394>)
 80007b4:	1a83      	subs	r3, r0, r2
 80007b6:	469b      	mov	fp, r3
 80007b8:	2300      	movs	r3, #0
 80007ba:	4699      	mov	r9, r3
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	e69a      	b.n	80004f6 <__aeabi_ddiv+0x4a>
 80007c0:	464b      	mov	r3, r9
 80007c2:	4323      	orrs	r3, r4
 80007c4:	4698      	mov	r8, r3
 80007c6:	d11d      	bne.n	8000804 <__aeabi_ddiv+0x358>
 80007c8:	2308      	movs	r3, #8
 80007ca:	4699      	mov	r9, r3
 80007cc:	3b06      	subs	r3, #6
 80007ce:	2500      	movs	r5, #0
 80007d0:	4683      	mov	fp, r0
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	e68f      	b.n	80004f6 <__aeabi_ddiv+0x4a>
 80007d6:	4652      	mov	r2, sl
 80007d8:	4322      	orrs	r2, r4
 80007da:	d109      	bne.n	80007f0 <__aeabi_ddiv+0x344>
 80007dc:	2302      	movs	r3, #2
 80007de:	4649      	mov	r1, r9
 80007e0:	4319      	orrs	r1, r3
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <__aeabi_ddiv+0x398>)
 80007e4:	4689      	mov	r9, r1
 80007e6:	469c      	mov	ip, r3
 80007e8:	2400      	movs	r4, #0
 80007ea:	2002      	movs	r0, #2
 80007ec:	44e3      	add	fp, ip
 80007ee:	e69d      	b.n	800052c <__aeabi_ddiv+0x80>
 80007f0:	2303      	movs	r3, #3
 80007f2:	464a      	mov	r2, r9
 80007f4:	431a      	orrs	r2, r3
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <__aeabi_ddiv+0x398>)
 80007f8:	4691      	mov	r9, r2
 80007fa:	469c      	mov	ip, r3
 80007fc:	4652      	mov	r2, sl
 80007fe:	2003      	movs	r0, #3
 8000800:	44e3      	add	fp, ip
 8000802:	e693      	b.n	800052c <__aeabi_ddiv+0x80>
 8000804:	230c      	movs	r3, #12
 8000806:	4699      	mov	r9, r3
 8000808:	3b09      	subs	r3, #9
 800080a:	46a0      	mov	r8, r4
 800080c:	4683      	mov	fp, r0
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	e671      	b.n	80004f6 <__aeabi_ddiv+0x4a>
 8000812:	2304      	movs	r3, #4
 8000814:	4699      	mov	r9, r3
 8000816:	2300      	movs	r3, #0
 8000818:	469b      	mov	fp, r3
 800081a:	3301      	adds	r3, #1
 800081c:	2500      	movs	r5, #0
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	e669      	b.n	80004f6 <__aeabi_ddiv+0x4a>
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	000007ff 	.word	0x000007ff
 8000828:	fffffc01 	.word	0xfffffc01
 800082c:	0800489c 	.word	0x0800489c
 8000830:	000003ff 	.word	0x000003ff
 8000834:	feffffff 	.word	0xfeffffff
 8000838:	000007fe 	.word	0x000007fe
 800083c:	000003f3 	.word	0x000003f3
 8000840:	fffffc0d 	.word	0xfffffc0d
 8000844:	fffff801 	.word	0xfffff801
 8000848:	4649      	mov	r1, r9
 800084a:	2301      	movs	r3, #1
 800084c:	4319      	orrs	r1, r3
 800084e:	4689      	mov	r9, r1
 8000850:	2400      	movs	r4, #0
 8000852:	2001      	movs	r0, #1
 8000854:	e66a      	b.n	800052c <__aeabi_ddiv+0x80>
 8000856:	2300      	movs	r3, #0
 8000858:	2480      	movs	r4, #128	; 0x80
 800085a:	469a      	mov	sl, r3
 800085c:	2500      	movs	r5, #0
 800085e:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <__aeabi_ddiv+0x5dc>)
 8000860:	0324      	lsls	r4, r4, #12
 8000862:	e67a      	b.n	800055a <__aeabi_ddiv+0xae>
 8000864:	2501      	movs	r5, #1
 8000866:	426d      	negs	r5, r5
 8000868:	2301      	movs	r3, #1
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	2b38      	cmp	r3, #56	; 0x38
 800086e:	dd00      	ble.n	8000872 <__aeabi_ddiv+0x3c6>
 8000870:	e670      	b.n	8000554 <__aeabi_ddiv+0xa8>
 8000872:	2b1f      	cmp	r3, #31
 8000874:	dc00      	bgt.n	8000878 <__aeabi_ddiv+0x3cc>
 8000876:	e0bf      	b.n	80009f8 <__aeabi_ddiv+0x54c>
 8000878:	211f      	movs	r1, #31
 800087a:	4249      	negs	r1, r1
 800087c:	1a8a      	subs	r2, r1, r2
 800087e:	4641      	mov	r1, r8
 8000880:	40d1      	lsrs	r1, r2
 8000882:	000a      	movs	r2, r1
 8000884:	2b20      	cmp	r3, #32
 8000886:	d004      	beq.n	8000892 <__aeabi_ddiv+0x3e6>
 8000888:	4641      	mov	r1, r8
 800088a:	4b80      	ldr	r3, [pc, #512]	; (8000a8c <__aeabi_ddiv+0x5e0>)
 800088c:	445b      	add	r3, fp
 800088e:	4099      	lsls	r1, r3
 8000890:	430d      	orrs	r5, r1
 8000892:	1e6b      	subs	r3, r5, #1
 8000894:	419d      	sbcs	r5, r3
 8000896:	2307      	movs	r3, #7
 8000898:	432a      	orrs	r2, r5
 800089a:	001d      	movs	r5, r3
 800089c:	2400      	movs	r4, #0
 800089e:	4015      	ands	r5, r2
 80008a0:	4213      	tst	r3, r2
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0x3fa>
 80008a4:	e0d4      	b.n	8000a50 <__aeabi_ddiv+0x5a4>
 80008a6:	210f      	movs	r1, #15
 80008a8:	2300      	movs	r3, #0
 80008aa:	4011      	ands	r1, r2
 80008ac:	2904      	cmp	r1, #4
 80008ae:	d100      	bne.n	80008b2 <__aeabi_ddiv+0x406>
 80008b0:	e0cb      	b.n	8000a4a <__aeabi_ddiv+0x59e>
 80008b2:	1d11      	adds	r1, r2, #4
 80008b4:	4291      	cmp	r1, r2
 80008b6:	4192      	sbcs	r2, r2
 80008b8:	4252      	negs	r2, r2
 80008ba:	189b      	adds	r3, r3, r2
 80008bc:	000a      	movs	r2, r1
 80008be:	0219      	lsls	r1, r3, #8
 80008c0:	d400      	bmi.n	80008c4 <__aeabi_ddiv+0x418>
 80008c2:	e0c2      	b.n	8000a4a <__aeabi_ddiv+0x59e>
 80008c4:	2301      	movs	r3, #1
 80008c6:	2400      	movs	r4, #0
 80008c8:	2500      	movs	r5, #0
 80008ca:	e646      	b.n	800055a <__aeabi_ddiv+0xae>
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	4641      	mov	r1, r8
 80008d0:	031b      	lsls	r3, r3, #12
 80008d2:	4219      	tst	r1, r3
 80008d4:	d008      	beq.n	80008e8 <__aeabi_ddiv+0x43c>
 80008d6:	421c      	tst	r4, r3
 80008d8:	d106      	bne.n	80008e8 <__aeabi_ddiv+0x43c>
 80008da:	431c      	orrs	r4, r3
 80008dc:	0324      	lsls	r4, r4, #12
 80008de:	46ba      	mov	sl, r7
 80008e0:	0015      	movs	r5, r2
 80008e2:	4b69      	ldr	r3, [pc, #420]	; (8000a88 <__aeabi_ddiv+0x5dc>)
 80008e4:	0b24      	lsrs	r4, r4, #12
 80008e6:	e638      	b.n	800055a <__aeabi_ddiv+0xae>
 80008e8:	2480      	movs	r4, #128	; 0x80
 80008ea:	4643      	mov	r3, r8
 80008ec:	0324      	lsls	r4, r4, #12
 80008ee:	431c      	orrs	r4, r3
 80008f0:	0324      	lsls	r4, r4, #12
 80008f2:	46b2      	mov	sl, r6
 80008f4:	4b64      	ldr	r3, [pc, #400]	; (8000a88 <__aeabi_ddiv+0x5dc>)
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	e62f      	b.n	800055a <__aeabi_ddiv+0xae>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_ddiv+0x454>
 80008fe:	e703      	b.n	8000708 <__aeabi_ddiv+0x25c>
 8000900:	19a6      	adds	r6, r4, r6
 8000902:	1e68      	subs	r0, r5, #1
 8000904:	42a6      	cmp	r6, r4
 8000906:	d200      	bcs.n	800090a <__aeabi_ddiv+0x45e>
 8000908:	e08d      	b.n	8000a26 <__aeabi_ddiv+0x57a>
 800090a:	428e      	cmp	r6, r1
 800090c:	d200      	bcs.n	8000910 <__aeabi_ddiv+0x464>
 800090e:	e0a3      	b.n	8000a58 <__aeabi_ddiv+0x5ac>
 8000910:	d100      	bne.n	8000914 <__aeabi_ddiv+0x468>
 8000912:	e0b3      	b.n	8000a7c <__aeabi_ddiv+0x5d0>
 8000914:	0005      	movs	r5, r0
 8000916:	e6f5      	b.n	8000704 <__aeabi_ddiv+0x258>
 8000918:	42aa      	cmp	r2, r5
 800091a:	d900      	bls.n	800091e <__aeabi_ddiv+0x472>
 800091c:	e639      	b.n	8000592 <__aeabi_ddiv+0xe6>
 800091e:	4643      	mov	r3, r8
 8000920:	07de      	lsls	r6, r3, #31
 8000922:	0858      	lsrs	r0, r3, #1
 8000924:	086b      	lsrs	r3, r5, #1
 8000926:	431e      	orrs	r6, r3
 8000928:	07ed      	lsls	r5, r5, #31
 800092a:	e639      	b.n	80005a0 <__aeabi_ddiv+0xf4>
 800092c:	4648      	mov	r0, r9
 800092e:	f000 f96b 	bl	8000c08 <__clzsi2>
 8000932:	0001      	movs	r1, r0
 8000934:	0002      	movs	r2, r0
 8000936:	3115      	adds	r1, #21
 8000938:	3220      	adds	r2, #32
 800093a:	291c      	cmp	r1, #28
 800093c:	dc00      	bgt.n	8000940 <__aeabi_ddiv+0x494>
 800093e:	e72c      	b.n	800079a <__aeabi_ddiv+0x2ee>
 8000940:	464b      	mov	r3, r9
 8000942:	3808      	subs	r0, #8
 8000944:	4083      	lsls	r3, r0
 8000946:	2500      	movs	r5, #0
 8000948:	4698      	mov	r8, r3
 800094a:	e732      	b.n	80007b2 <__aeabi_ddiv+0x306>
 800094c:	f000 f95c 	bl	8000c08 <__clzsi2>
 8000950:	0003      	movs	r3, r0
 8000952:	001a      	movs	r2, r3
 8000954:	3215      	adds	r2, #21
 8000956:	3020      	adds	r0, #32
 8000958:	2a1c      	cmp	r2, #28
 800095a:	dc00      	bgt.n	800095e <__aeabi_ddiv+0x4b2>
 800095c:	e700      	b.n	8000760 <__aeabi_ddiv+0x2b4>
 800095e:	4654      	mov	r4, sl
 8000960:	3b08      	subs	r3, #8
 8000962:	2200      	movs	r2, #0
 8000964:	409c      	lsls	r4, r3
 8000966:	e705      	b.n	8000774 <__aeabi_ddiv+0x2c8>
 8000968:	1936      	adds	r6, r6, r4
 800096a:	3b01      	subs	r3, #1
 800096c:	42b4      	cmp	r4, r6
 800096e:	d900      	bls.n	8000972 <__aeabi_ddiv+0x4c6>
 8000970:	e6a6      	b.n	80006c0 <__aeabi_ddiv+0x214>
 8000972:	42b2      	cmp	r2, r6
 8000974:	d800      	bhi.n	8000978 <__aeabi_ddiv+0x4cc>
 8000976:	e6a3      	b.n	80006c0 <__aeabi_ddiv+0x214>
 8000978:	1e83      	subs	r3, r0, #2
 800097a:	1936      	adds	r6, r6, r4
 800097c:	e6a0      	b.n	80006c0 <__aeabi_ddiv+0x214>
 800097e:	1909      	adds	r1, r1, r4
 8000980:	3d01      	subs	r5, #1
 8000982:	428c      	cmp	r4, r1
 8000984:	d900      	bls.n	8000988 <__aeabi_ddiv+0x4dc>
 8000986:	e68d      	b.n	80006a4 <__aeabi_ddiv+0x1f8>
 8000988:	428a      	cmp	r2, r1
 800098a:	d800      	bhi.n	800098e <__aeabi_ddiv+0x4e2>
 800098c:	e68a      	b.n	80006a4 <__aeabi_ddiv+0x1f8>
 800098e:	1e85      	subs	r5, r0, #2
 8000990:	1909      	adds	r1, r1, r4
 8000992:	e687      	b.n	80006a4 <__aeabi_ddiv+0x1f8>
 8000994:	230f      	movs	r3, #15
 8000996:	402b      	ands	r3, r5
 8000998:	2b04      	cmp	r3, #4
 800099a:	d100      	bne.n	800099e <__aeabi_ddiv+0x4f2>
 800099c:	e6bc      	b.n	8000718 <__aeabi_ddiv+0x26c>
 800099e:	2305      	movs	r3, #5
 80009a0:	425b      	negs	r3, r3
 80009a2:	42ab      	cmp	r3, r5
 80009a4:	419b      	sbcs	r3, r3
 80009a6:	3504      	adds	r5, #4
 80009a8:	425b      	negs	r3, r3
 80009aa:	08ed      	lsrs	r5, r5, #3
 80009ac:	4498      	add	r8, r3
 80009ae:	e6b4      	b.n	800071a <__aeabi_ddiv+0x26e>
 80009b0:	42af      	cmp	r7, r5
 80009b2:	d900      	bls.n	80009b6 <__aeabi_ddiv+0x50a>
 80009b4:	e660      	b.n	8000678 <__aeabi_ddiv+0x1cc>
 80009b6:	4282      	cmp	r2, r0
 80009b8:	d804      	bhi.n	80009c4 <__aeabi_ddiv+0x518>
 80009ba:	d000      	beq.n	80009be <__aeabi_ddiv+0x512>
 80009bc:	e65c      	b.n	8000678 <__aeabi_ddiv+0x1cc>
 80009be:	42ae      	cmp	r6, r5
 80009c0:	d800      	bhi.n	80009c4 <__aeabi_ddiv+0x518>
 80009c2:	e659      	b.n	8000678 <__aeabi_ddiv+0x1cc>
 80009c4:	2302      	movs	r3, #2
 80009c6:	425b      	negs	r3, r3
 80009c8:	469c      	mov	ip, r3
 80009ca:	9b00      	ldr	r3, [sp, #0]
 80009cc:	44e0      	add	r8, ip
 80009ce:	469c      	mov	ip, r3
 80009d0:	4465      	add	r5, ip
 80009d2:	429d      	cmp	r5, r3
 80009d4:	419b      	sbcs	r3, r3
 80009d6:	425b      	negs	r3, r3
 80009d8:	191b      	adds	r3, r3, r4
 80009da:	18c0      	adds	r0, r0, r3
 80009dc:	e64d      	b.n	800067a <__aeabi_ddiv+0x1ce>
 80009de:	428a      	cmp	r2, r1
 80009e0:	d800      	bhi.n	80009e4 <__aeabi_ddiv+0x538>
 80009e2:	e60e      	b.n	8000602 <__aeabi_ddiv+0x156>
 80009e4:	1e83      	subs	r3, r0, #2
 80009e6:	1909      	adds	r1, r1, r4
 80009e8:	e60b      	b.n	8000602 <__aeabi_ddiv+0x156>
 80009ea:	428a      	cmp	r2, r1
 80009ec:	d800      	bhi.n	80009f0 <__aeabi_ddiv+0x544>
 80009ee:	e5f4      	b.n	80005da <__aeabi_ddiv+0x12e>
 80009f0:	1e83      	subs	r3, r0, #2
 80009f2:	4698      	mov	r8, r3
 80009f4:	1909      	adds	r1, r1, r4
 80009f6:	e5f0      	b.n	80005da <__aeabi_ddiv+0x12e>
 80009f8:	4925      	ldr	r1, [pc, #148]	; (8000a90 <__aeabi_ddiv+0x5e4>)
 80009fa:	0028      	movs	r0, r5
 80009fc:	4459      	add	r1, fp
 80009fe:	408d      	lsls	r5, r1
 8000a00:	4642      	mov	r2, r8
 8000a02:	408a      	lsls	r2, r1
 8000a04:	1e69      	subs	r1, r5, #1
 8000a06:	418d      	sbcs	r5, r1
 8000a08:	4641      	mov	r1, r8
 8000a0a:	40d8      	lsrs	r0, r3
 8000a0c:	40d9      	lsrs	r1, r3
 8000a0e:	4302      	orrs	r2, r0
 8000a10:	432a      	orrs	r2, r5
 8000a12:	000b      	movs	r3, r1
 8000a14:	0751      	lsls	r1, r2, #29
 8000a16:	d100      	bne.n	8000a1a <__aeabi_ddiv+0x56e>
 8000a18:	e751      	b.n	80008be <__aeabi_ddiv+0x412>
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	4011      	ands	r1, r2
 8000a1e:	2904      	cmp	r1, #4
 8000a20:	d000      	beq.n	8000a24 <__aeabi_ddiv+0x578>
 8000a22:	e746      	b.n	80008b2 <__aeabi_ddiv+0x406>
 8000a24:	e74b      	b.n	80008be <__aeabi_ddiv+0x412>
 8000a26:	0005      	movs	r5, r0
 8000a28:	428e      	cmp	r6, r1
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_ddiv+0x582>
 8000a2c:	e66a      	b.n	8000704 <__aeabi_ddiv+0x258>
 8000a2e:	9a00      	ldr	r2, [sp, #0]
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d000      	beq.n	8000a36 <__aeabi_ddiv+0x58a>
 8000a34:	e666      	b.n	8000704 <__aeabi_ddiv+0x258>
 8000a36:	e667      	b.n	8000708 <__aeabi_ddiv+0x25c>
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <__aeabi_ddiv+0x5e8>)
 8000a3a:	445a      	add	r2, fp
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	dc00      	bgt.n	8000a42 <__aeabi_ddiv+0x596>
 8000a40:	e710      	b.n	8000864 <__aeabi_ddiv+0x3b8>
 8000a42:	2301      	movs	r3, #1
 8000a44:	2500      	movs	r5, #0
 8000a46:	4498      	add	r8, r3
 8000a48:	e667      	b.n	800071a <__aeabi_ddiv+0x26e>
 8000a4a:	075d      	lsls	r5, r3, #29
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	0b1c      	lsrs	r4, r3, #12
 8000a50:	08d2      	lsrs	r2, r2, #3
 8000a52:	2300      	movs	r3, #0
 8000a54:	4315      	orrs	r5, r2
 8000a56:	e580      	b.n	800055a <__aeabi_ddiv+0xae>
 8000a58:	9800      	ldr	r0, [sp, #0]
 8000a5a:	3d02      	subs	r5, #2
 8000a5c:	0042      	lsls	r2, r0, #1
 8000a5e:	4282      	cmp	r2, r0
 8000a60:	41bf      	sbcs	r7, r7
 8000a62:	427f      	negs	r7, r7
 8000a64:	193c      	adds	r4, r7, r4
 8000a66:	1936      	adds	r6, r6, r4
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	e7dd      	b.n	8000a28 <__aeabi_ddiv+0x57c>
 8000a6c:	2480      	movs	r4, #128	; 0x80
 8000a6e:	4643      	mov	r3, r8
 8000a70:	0324      	lsls	r4, r4, #12
 8000a72:	431c      	orrs	r4, r3
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__aeabi_ddiv+0x5dc>)
 8000a78:	0b24      	lsrs	r4, r4, #12
 8000a7a:	e56e      	b.n	800055a <__aeabi_ddiv+0xae>
 8000a7c:	9a00      	ldr	r2, [sp, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3ea      	bcc.n	8000a58 <__aeabi_ddiv+0x5ac>
 8000a82:	0005      	movs	r5, r0
 8000a84:	e7d3      	b.n	8000a2e <__aeabi_ddiv+0x582>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	000007ff 	.word	0x000007ff
 8000a8c:	0000043e 	.word	0x0000043e
 8000a90:	0000041e 	.word	0x0000041e
 8000a94:	000003ff 	.word	0x000003ff

08000a98 <__aeabi_i2d>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d016      	beq.n	8000acc <__aeabi_i2d+0x34>
 8000a9e:	17c3      	asrs	r3, r0, #31
 8000aa0:	18c5      	adds	r5, r0, r3
 8000aa2:	405d      	eors	r5, r3
 8000aa4:	0fc4      	lsrs	r4, r0, #31
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f000 f8ae 	bl	8000c08 <__clzsi2>
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <__aeabi_i2d+0x5c>)
 8000aae:	1a12      	subs	r2, r2, r0
 8000ab0:	280a      	cmp	r0, #10
 8000ab2:	dc16      	bgt.n	8000ae2 <__aeabi_i2d+0x4a>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	002e      	movs	r6, r5
 8000ab8:	3315      	adds	r3, #21
 8000aba:	409e      	lsls	r6, r3
 8000abc:	230b      	movs	r3, #11
 8000abe:	1a18      	subs	r0, r3, r0
 8000ac0:	40c5      	lsrs	r5, r0
 8000ac2:	0552      	lsls	r2, r2, #21
 8000ac4:	032d      	lsls	r5, r5, #12
 8000ac6:	0b2d      	lsrs	r5, r5, #12
 8000ac8:	0d53      	lsrs	r3, r2, #21
 8000aca:	e003      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000acc:	2400      	movs	r4, #0
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2500      	movs	r5, #0
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	051b      	lsls	r3, r3, #20
 8000ad6:	432b      	orrs	r3, r5
 8000ad8:	07e4      	lsls	r4, r4, #31
 8000ada:	4323      	orrs	r3, r4
 8000adc:	0030      	movs	r0, r6
 8000ade:	0019      	movs	r1, r3
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	380b      	subs	r0, #11
 8000ae4:	4085      	lsls	r5, r0
 8000ae6:	0552      	lsls	r2, r2, #21
 8000ae8:	032d      	lsls	r5, r5, #12
 8000aea:	2600      	movs	r6, #0
 8000aec:	0b2d      	lsrs	r5, r5, #12
 8000aee:	0d53      	lsrs	r3, r2, #21
 8000af0:	e7f0      	b.n	8000ad4 <__aeabi_i2d+0x3c>
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	0000041e 	.word	0x0000041e

08000af8 <__aeabi_d2f>:
 8000af8:	0002      	movs	r2, r0
 8000afa:	004b      	lsls	r3, r1, #1
 8000afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afe:	0d5b      	lsrs	r3, r3, #21
 8000b00:	030c      	lsls	r4, r1, #12
 8000b02:	4e3d      	ldr	r6, [pc, #244]	; (8000bf8 <__aeabi_d2f+0x100>)
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	0f40      	lsrs	r0, r0, #29
 8000b08:	1c5f      	adds	r7, r3, #1
 8000b0a:	0fc9      	lsrs	r1, r1, #31
 8000b0c:	4304      	orrs	r4, r0
 8000b0e:	00d5      	lsls	r5, r2, #3
 8000b10:	4237      	tst	r7, r6
 8000b12:	d00a      	beq.n	8000b2a <__aeabi_d2f+0x32>
 8000b14:	4839      	ldr	r0, [pc, #228]	; (8000bfc <__aeabi_d2f+0x104>)
 8000b16:	181e      	adds	r6, r3, r0
 8000b18:	2efe      	cmp	r6, #254	; 0xfe
 8000b1a:	dd16      	ble.n	8000b4a <__aeabi_d2f+0x52>
 8000b1c:	20ff      	movs	r0, #255	; 0xff
 8000b1e:	2400      	movs	r4, #0
 8000b20:	05c0      	lsls	r0, r0, #23
 8000b22:	4320      	orrs	r0, r4
 8000b24:	07c9      	lsls	r1, r1, #31
 8000b26:	4308      	orrs	r0, r1
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d106      	bne.n	8000b3c <__aeabi_d2f+0x44>
 8000b2e:	432c      	orrs	r4, r5
 8000b30:	d026      	beq.n	8000b80 <__aeabi_d2f+0x88>
 8000b32:	2205      	movs	r2, #5
 8000b34:	0192      	lsls	r2, r2, #6
 8000b36:	0a54      	lsrs	r4, r2, #9
 8000b38:	b2d8      	uxtb	r0, r3
 8000b3a:	e7f1      	b.n	8000b20 <__aeabi_d2f+0x28>
 8000b3c:	4325      	orrs	r5, r4
 8000b3e:	d0ed      	beq.n	8000b1c <__aeabi_d2f+0x24>
 8000b40:	2080      	movs	r0, #128	; 0x80
 8000b42:	03c0      	lsls	r0, r0, #15
 8000b44:	4304      	orrs	r4, r0
 8000b46:	20ff      	movs	r0, #255	; 0xff
 8000b48:	e7ea      	b.n	8000b20 <__aeabi_d2f+0x28>
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	dd1b      	ble.n	8000b86 <__aeabi_d2f+0x8e>
 8000b4e:	0192      	lsls	r2, r2, #6
 8000b50:	1e53      	subs	r3, r2, #1
 8000b52:	419a      	sbcs	r2, r3
 8000b54:	00e4      	lsls	r4, r4, #3
 8000b56:	0f6d      	lsrs	r5, r5, #29
 8000b58:	4322      	orrs	r2, r4
 8000b5a:	432a      	orrs	r2, r5
 8000b5c:	0753      	lsls	r3, r2, #29
 8000b5e:	d048      	beq.n	8000bf2 <__aeabi_d2f+0xfa>
 8000b60:	230f      	movs	r3, #15
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d000      	beq.n	8000b6a <__aeabi_d2f+0x72>
 8000b68:	3204      	adds	r2, #4
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	04db      	lsls	r3, r3, #19
 8000b6e:	4013      	ands	r3, r2
 8000b70:	d03f      	beq.n	8000bf2 <__aeabi_d2f+0xfa>
 8000b72:	1c70      	adds	r0, r6, #1
 8000b74:	2efe      	cmp	r6, #254	; 0xfe
 8000b76:	d0d1      	beq.n	8000b1c <__aeabi_d2f+0x24>
 8000b78:	0192      	lsls	r2, r2, #6
 8000b7a:	0a54      	lsrs	r4, r2, #9
 8000b7c:	b2c0      	uxtb	r0, r0
 8000b7e:	e7cf      	b.n	8000b20 <__aeabi_d2f+0x28>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2400      	movs	r4, #0
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x28>
 8000b86:	0032      	movs	r2, r6
 8000b88:	3217      	adds	r2, #23
 8000b8a:	db22      	blt.n	8000bd2 <__aeabi_d2f+0xda>
 8000b8c:	2080      	movs	r0, #128	; 0x80
 8000b8e:	0400      	lsls	r0, r0, #16
 8000b90:	4320      	orrs	r0, r4
 8000b92:	241e      	movs	r4, #30
 8000b94:	1ba4      	subs	r4, r4, r6
 8000b96:	2c1f      	cmp	r4, #31
 8000b98:	dd1d      	ble.n	8000bd6 <__aeabi_d2f+0xde>
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	1b96      	subs	r6, r2, r6
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	40f2      	lsrs	r2, r6
 8000ba4:	0016      	movs	r6, r2
 8000ba6:	2c20      	cmp	r4, #32
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_d2f+0xbc>
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <__aeabi_d2f+0x108>)
 8000bac:	4694      	mov	ip, r2
 8000bae:	4463      	add	r3, ip
 8000bb0:	4098      	lsls	r0, r3
 8000bb2:	4305      	orrs	r5, r0
 8000bb4:	002a      	movs	r2, r5
 8000bb6:	1e53      	subs	r3, r2, #1
 8000bb8:	419a      	sbcs	r2, r3
 8000bba:	4332      	orrs	r2, r6
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	0753      	lsls	r3, r2, #29
 8000bc0:	d1ce      	bne.n	8000b60 <__aeabi_d2f+0x68>
 8000bc2:	2480      	movs	r4, #128	; 0x80
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	04e4      	lsls	r4, r4, #19
 8000bc8:	2001      	movs	r0, #1
 8000bca:	4023      	ands	r3, r4
 8000bcc:	4222      	tst	r2, r4
 8000bce:	d1d3      	bne.n	8000b78 <__aeabi_d2f+0x80>
 8000bd0:	e7b0      	b.n	8000b34 <__aeabi_d2f+0x3c>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e7ad      	b.n	8000b32 <__aeabi_d2f+0x3a>
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <__aeabi_d2f+0x10c>)
 8000bd8:	4694      	mov	ip, r2
 8000bda:	002a      	movs	r2, r5
 8000bdc:	40e2      	lsrs	r2, r4
 8000bde:	0014      	movs	r4, r2
 8000be0:	002a      	movs	r2, r5
 8000be2:	4463      	add	r3, ip
 8000be4:	409a      	lsls	r2, r3
 8000be6:	4098      	lsls	r0, r3
 8000be8:	1e55      	subs	r5, r2, #1
 8000bea:	41aa      	sbcs	r2, r5
 8000bec:	4302      	orrs	r2, r0
 8000bee:	4322      	orrs	r2, r4
 8000bf0:	e7e4      	b.n	8000bbc <__aeabi_d2f+0xc4>
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	e79e      	b.n	8000b34 <__aeabi_d2f+0x3c>
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	000007fe 	.word	0x000007fe
 8000bfc:	fffffc80 	.word	0xfffffc80
 8000c00:	fffffca2 	.word	0xfffffca2
 8000c04:	fffffc82 	.word	0xfffffc82

08000c08 <__clzsi2>:
 8000c08:	211c      	movs	r1, #28
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	041b      	lsls	r3, r3, #16
 8000c0e:	4298      	cmp	r0, r3
 8000c10:	d301      	bcc.n	8000c16 <__clzsi2+0xe>
 8000c12:	0c00      	lsrs	r0, r0, #16
 8000c14:	3910      	subs	r1, #16
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	4298      	cmp	r0, r3
 8000c1a:	d301      	bcc.n	8000c20 <__clzsi2+0x18>
 8000c1c:	0a00      	lsrs	r0, r0, #8
 8000c1e:	3908      	subs	r1, #8
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d301      	bcc.n	8000c2a <__clzsi2+0x22>
 8000c26:	0900      	lsrs	r0, r0, #4
 8000c28:	3904      	subs	r1, #4
 8000c2a:	a202      	add	r2, pc, #8	; (adr r2, 8000c34 <__clzsi2+0x2c>)
 8000c2c:	5c10      	ldrb	r0, [r2, r0]
 8000c2e:	1840      	adds	r0, r0, r1
 8000c30:	4770      	bx	lr
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	02020304 	.word	0x02020304
 8000c38:	01010101 	.word	0x01010101
	...

08000c44 <bitExtract>:
* @param value: value to be extracted from, bit: bit location to be extracted
*
* @return extracted bit
*/
int bitExtract(int value, int bit)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	return((value>>bit) & 1);
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	411a      	asrs	r2, r3
 8000c54:	0013      	movs	r3, r2
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <amt223Check>:
*
* @param value: data to be checked
* @return Status indicating if the data passed the formula test
*/
bool amt223Check(uint16_t value)
{
 8000c62:	b590      	push	{r4, r7, lr}
 8000c64:	b087      	sub	sp, #28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	0002      	movs	r2, r0
 8000c6a:	1dbb      	adds	r3, r7, #6
 8000c6c:	801a      	strh	r2, [r3, #0]

	int k1 = bitExtract(value, 15);
 8000c6e:	1dbb      	adds	r3, r7, #6
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	210f      	movs	r1, #15
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ffe5 	bl	8000c44 <bitExtract>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	617b      	str	r3, [r7, #20]
	int k0 = bitExtract(value, 14);
 8000c7e:	1dbb      	adds	r3, r7, #6
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	210e      	movs	r1, #14
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffdd 	bl	8000c44 <bitExtract>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	613b      	str	r3, [r7, #16]

	int checkOdd = !(bx(value,13)^bx(value,11)^bx(value,9)^bx(value,7)^bx(value,5)^bx(value,3)^bx(value,1));
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	210d      	movs	r1, #13
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ffd5 	bl	8000c44 <bitExtract>
 8000c9a:	0004      	movs	r4, r0
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	210b      	movs	r1, #11
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff ffce 	bl	8000c44 <bitExtract>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	405c      	eors	r4, r3
 8000cac:	1dbb      	adds	r3, r7, #6
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	2109      	movs	r1, #9
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ffc6 	bl	8000c44 <bitExtract>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	405c      	eors	r4, r3
 8000cbc:	1dbb      	adds	r3, r7, #6
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	2107      	movs	r1, #7
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff ffbe 	bl	8000c44 <bitExtract>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	405c      	eors	r4, r3
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff ffb6 	bl	8000c44 <bitExtract>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	405c      	eors	r4, r3
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff ffae 	bl	8000c44 <bitExtract>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	405c      	eors	r4, r3
 8000cec:	1dbb      	adds	r3, r7, #6
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff ffa6 	bl	8000c44 <bitExtract>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	1ae3      	subs	r3, r4, r3
 8000cfc:	425a      	negs	r2, r3
 8000cfe:	4153      	adcs	r3, r2
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	60fb      	str	r3, [r7, #12]
	int checkEven = !(bx(value,12)^bx(value,10)^bx(value,8)^bx(value,6)^bx(value,4)^bx(value,2)^bx(value,0));
 8000d04:	1dbb      	adds	r3, r7, #6
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	210c      	movs	r1, #12
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff ff9a 	bl	8000c44 <bitExtract>
 8000d10:	0004      	movs	r4, r0
 8000d12:	1dbb      	adds	r3, r7, #6
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	210a      	movs	r1, #10
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff93 	bl	8000c44 <bitExtract>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	405c      	eors	r4, r3
 8000d22:	1dbb      	adds	r3, r7, #6
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2108      	movs	r1, #8
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ff8b 	bl	8000c44 <bitExtract>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	405c      	eors	r4, r3
 8000d32:	1dbb      	adds	r3, r7, #6
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	2106      	movs	r1, #6
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff83 	bl	8000c44 <bitExtract>
 8000d3e:	0003      	movs	r3, r0
 8000d40:	405c      	eors	r4, r3
 8000d42:	1dbb      	adds	r3, r7, #6
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	2104      	movs	r1, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f7ff ff7b 	bl	8000c44 <bitExtract>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	405c      	eors	r4, r3
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2102      	movs	r1, #2
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff73 	bl	8000c44 <bitExtract>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	405c      	eors	r4, r3
 8000d62:	1dbb      	adds	r3, r7, #6
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	2100      	movs	r1, #0
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff6b 	bl	8000c44 <bitExtract>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	1ae3      	subs	r3, r4, r3
 8000d72:	425a      	negs	r2, r3
 8000d74:	4153      	adcs	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	60bb      	str	r3, [r7, #8]

	return((k1 == checkOdd) && (k0 == checkEven));
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d105      	bne.n	8000d8e <amt223Check+0x12c>
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d101      	bne.n	8000d8e <amt223Check+0x12c>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <amt223Check+0x12e>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b007      	add	sp, #28
 8000d96:	bd90      	pop	{r4, r7, pc}

08000d98 <delayMicro>:
*
* @param us: amount of microseconds to delay, htim: pointer to the timer
* @return VOID
*/
void delayMicro(uint16_t us, TIM_HandleTypeDef * htim)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	0002      	movs	r2, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	1dbb      	adds	r3, r7, #6
 8000da4:	801a      	strh	r2, [r3, #0]
	//TODO Implement common function on Github
	__HAL_TIM_SET_COUNTER(htim,0); // set the counter value a 0
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us); // wait for the counter to reach the us input in the parameter
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	419b      	sbcs	r3, r3
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d000      	beq.n	8000dc6 <delayMicro+0x2e>
 8000dc4:	e7f3      	b.n	8000dae <delayMicro+0x16>
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <sendByte>:
*
* @param sendByte: byte to be sent, pullLow: indicating if the CS line should be pulled low, hspi: pointer to the SPI setup, htim: pointer to the timer, receiveByte: data byte recieved from the optical encoder
* @return HAL_Status of the byte that was sent
*/
HAL_StatusTypeDef sendByte(uint8_t * sendByte, bool pullLow, SPI_HandleTypeDef * hspi, TIM_HandleTypeDef * htim, uint8_t * receiveByte)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	200b      	movs	r0, #11
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	1c0a      	adds	r2, r1, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef checkStatus;

	if(pullLow)
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d017      	beq.n	8000e1c <sendByte+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <sendByte+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	2108      	movs	r1, #8
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 f9d4 	bl	80021a0 <HAL_GPIO_WritePin>
		checkStatus = HAL_SPI_TransmitReceive(hspi, sendByte, receiveByte,1,50);
 8000df8:	2317      	movs	r3, #23
 8000dfa:	18fc      	adds	r4, r7, r3
 8000dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	2332      	movs	r3, #50	; 0x32
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2301      	movs	r3, #1
 8000e08:	f002 f89e 	bl	8002f48 <HAL_SPI_TransmitReceive>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	7023      	strb	r3, [r4, #0]
		delayMicro(3,htim);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	0019      	movs	r1, r3
 8000e14:	2003      	movs	r0, #3
 8000e16:	f7ff ffbf 	bl	8000d98 <delayMicro>
 8000e1a:	e01b      	b.n	8000e54 <sendByte+0x84>
	}
	else
	{
		checkStatus = HAL_SPI_TransmitReceive(hspi,sendByte,receiveByte,1,50);
 8000e1c:	2317      	movs	r3, #23
 8000e1e:	18fc      	adds	r4, r7, r3
 8000e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e22:	68f9      	ldr	r1, [r7, #12]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	2332      	movs	r3, #50	; 0x32
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f002 f88c 	bl	8002f48 <HAL_SPI_TransmitReceive>
 8000e30:	0003      	movs	r3, r0
 8000e32:	7023      	strb	r3, [r4, #0]
		delayMicro(3,htim);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	0019      	movs	r1, r3
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f7ff ffad 	bl	8000d98 <delayMicro>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <sendByte+0x94>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	2108      	movs	r1, #8
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 f9ab 	bl	80021a0 <HAL_GPIO_WritePin>
		delayMicro(40,htim);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	2028      	movs	r0, #40	; 0x28
 8000e50:	f7ff ffa2 	bl	8000d98 <delayMicro>
	}
	return checkStatus;
 8000e54:	2317      	movs	r3, #23
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b007      	add	sp, #28
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	48000400 	.word	0x48000400

08000e68 <resetEncoder>:
*
* @param hspi: pointer to the SPI setup, htim: pointer to the timer
* @return VOID
*/
void resetEncoder(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef * htim)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	bool checkValue = false;
 8000e72:	2317      	movs	r3, #23
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef checkHALStatus;

	uint8_t spi_Tx[2];
	uint8_t spi_Rx[2];

	spi_Tx[0] = 0x00;
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
	spi_Tx[1] = 0x70;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2270      	movs	r2, #112	; 0x70
 8000e86:	705a      	strb	r2, [r3, #1]

	while(!checkValue)
 8000e88:	2317      	movs	r3, #23
 8000e8a:	18fb      	adds	r3, r7, r3
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d13a      	bne.n	8000f08 <resetEncoder+0xa0>
	{
		checkHALStatus = sendByte(&spi_Tx[0],true,hspi,htim,&spi_Rx[0]);
 8000e92:	2516      	movs	r5, #22
 8000e94:	197c      	adds	r4, r7, r5
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	18f8      	adds	r0, r7, r3
 8000e9e:	260c      	movs	r6, #12
 8000ea0:	19bb      	adds	r3, r7, r6
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	000b      	movs	r3, r1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f7ff ff92 	bl	8000dd0 <sendByte>
 8000eac:	0003      	movs	r3, r0
 8000eae:	7023      	strb	r3, [r4, #0]
		if(checkHALStatus == HAL_OK)
 8000eb0:	197b      	adds	r3, r7, r5
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e7      	bne.n	8000e88 <resetEncoder+0x20>
		{
			checkHALStatus = sendByte(&spi_Tx[1],false,hspi,htim,&spi_Rx[1]);
 8000eb8:	197c      	adds	r4, r7, r5
 8000eba:	6839      	ldr	r1, [r7, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	1c58      	adds	r0, r3, #1
 8000ec4:	19bb      	adds	r3, r7, r6
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	000b      	movs	r3, r1
 8000ecc:	2100      	movs	r1, #0
 8000ece:	f7ff ff7f 	bl	8000dd0 <sendByte>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	7023      	strb	r3, [r4, #0]
			if(checkHALStatus == HAL_OK)
 8000ed6:	197b      	adds	r3, r7, r5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1d4      	bne.n	8000e88 <resetEncoder+0x20>
			{
				int16_t finalPosition = ((uint16_t)spi_Rx[0] << 8) | (uint16_t)spi_Rx[1];
 8000ede:	19bb      	adds	r3, r7, r6
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b219      	sxth	r1, r3
 8000ee6:	19bb      	adds	r3, r7, r6
 8000ee8:	785b      	ldrb	r3, [r3, #1]
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	2014      	movs	r0, #20
 8000eee:	183b      	adds	r3, r7, r0
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	801a      	strh	r2, [r3, #0]
				checkValue = amt223Check(finalPosition);
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	2217      	movs	r2, #23
 8000efa:	18bc      	adds	r4, r7, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff feb0 	bl	8000c62 <amt223Check>
 8000f02:	0003      	movs	r3, r0
 8000f04:	7023      	strb	r3, [r4, #0]
	while(!checkValue)
 8000f06:	e7bf      	b.n	8000e88 <resetEncoder+0x20>
			}
		}
	}
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b007      	add	sp, #28
 8000f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f000 fc46 	bl	80017a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f822 	bl	8000f60 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 f994 	bl	8001248 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000f20:	f000 f8ba 	bl	8001098 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000f24:	f000 f95c 	bl	80011e0 <_ZL19MX_USART2_UART_Initv>
  MX_CAN_Init();
 8000f28:	f000 f87a 	bl	8001020 <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 8000f2c:	f000 f8f6 	bl	800111c <_ZL12MX_TIM3_Initv>

  /* USER CODE BEGIN 2 */
  //initializes the timer used for delay
  HAL_TIM_Base_Start(&htim3);
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <main+0x44>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 fba0 	bl	8003678 <HAL_TIM_Base_Start>
  startUp(&htim3,&hcan,&hspi1);
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <main+0x48>)
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <main+0x4c>)
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <main+0x44>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 f9de 	bl	8001300 <startUp>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop(&htim3,&hcan,&hspi1);
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <main+0x48>)
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <main+0x4c>)
 8000f48:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <main+0x44>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fa18 	bl	8001380 <loop>
 8000f50:	e7f8      	b.n	8000f44 <main+0x34>
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	200000f0 	.word	0x200000f0
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	200001bc 	.word	0x200001bc

08000f60 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b099      	sub	sp, #100	; 0x64
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	242c      	movs	r4, #44	; 0x2c
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2334      	movs	r3, #52	; 0x34
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	f003 fb37 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f76:	231c      	movs	r3, #28
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	001a      	movs	r2, r3
 8000f80:	2100      	movs	r1, #0
 8000f82:	f003 fb2f 	bl	80045e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f86:	003b      	movs	r3, r7
 8000f88:	0018      	movs	r0, r3
 8000f8a:	231c      	movs	r3, #28
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f003 fb28 	bl	80045e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	2220      	movs	r2, #32
 8000f98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fa0:	193b      	adds	r3, r7, r4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f001 f917 	bl	80021dc <HAL_RCC_OscConfig>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	4193      	sbcs	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 8000fba:	f000 f99b 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	211c      	movs	r1, #28
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f001 fc83 	bl	80028e8 <HAL_RCC_ClockConfig>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	4193      	sbcs	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8000fee:	f000 f981 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff8:	003b      	movs	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	003b      	movs	r3, r7
 8001000:	0018      	movs	r0, r3
 8001002:	f001 fdeb 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 8001006:	0003      	movs	r3, r0
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	4193      	sbcs	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 8001012:	f000 f96f 	bl	80012f4 <Error_Handler>
  }
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b019      	add	sp, #100	; 0x64
 800101c:	bd90      	pop	{r4, r7, pc}
	...

08001020 <_ZL11MX_CAN_Initv>:

static void MX_CAN_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <_ZL11MX_CAN_Initv+0x74>)
 8001028:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 80;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 800102c:	2250      	movs	r2, #80	; 0x50
 800102e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0292      	lsls	r2, r2, #10
 8001042:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	0352      	lsls	r2, r2, #13
 800104a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001054:	2200      	movs	r2, #0
 8001056:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 800105a:	2200      	movs	r2, #0
 800105c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001060:	2200      	movs	r2, #0
 8001062:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001066:	2200      	movs	r2, #0
 8001068:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 800106c:	2200      	movs	r2, #0
 800106e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_ZL11MX_CAN_Initv+0x70>)
 8001072:	0018      	movs	r0, r3
 8001074:	f000 fc1e 	bl	80018b4 <HAL_CAN_Init>
 8001078:	0003      	movs	r3, r0
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	4193      	sbcs	r3, r2
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8001084:	f000 f936 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	200001bc 	.word	0x200001bc
 8001094:	40006400 	.word	0x40006400

08001098 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <_ZL12MX_SPI1_Initv+0x80>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010a4:	2282      	movs	r2, #130	; 0x82
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010b2:	22e0      	movs	r2, #224	; 0xe0
 80010b4:	00d2      	lsls	r2, r2, #3
 80010b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010ce:	2238      	movs	r2, #56	; 0x38
 80010d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010e6:	2207      	movs	r2, #7
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_ZL12MX_SPI1_Initv+0x7c>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f001 fe6d 	bl	8002dd8 <HAL_SPI_Init>
 80010fe:	0003      	movs	r3, r0
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	4193      	sbcs	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 800110a:	f000 f8f3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000008c 	.word	0x2000008c
 8001118:	40013000 	.word	0x40013000

0800111c <_ZL12MX_TIM3_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	2308      	movs	r3, #8
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	0018      	movs	r0, r3
 8001128:	2310      	movs	r3, #16
 800112a:	001a      	movs	r2, r3
 800112c:	2100      	movs	r1, #0
 800112e:	f003 fa59 	bl	80045e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001132:	003b      	movs	r3, r7
 8001134:	0018      	movs	r0, r3
 8001136:	2308      	movs	r3, #8
 8001138:	001a      	movs	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	f003 fa52 	bl	80045e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <_ZL12MX_TIM3_Initv+0xbc>)
 8001144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8001148:	222f      	movs	r2, #47	; 0x2f
 800114a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <_ZL12MX_TIM3_Initv+0xc0>)
 8001156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 8001166:	0018      	movs	r0, r3
 8001168:	f002 fa36 	bl	80035d8 <HAL_TIM_Base_Init>
 800116c:	0003      	movs	r3, r0
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	4193      	sbcs	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8001178:	f000 f8bc 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117c:	2108      	movs	r1, #8
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0152      	lsls	r2, r2, #5
 8001184:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001186:	187a      	adds	r2, r7, r1
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f002 fabd 	bl	800370c <HAL_TIM_ConfigClockSource>
 8001192:	0003      	movs	r3, r0
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	4193      	sbcs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800119e:	f000 f8a9 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	003b      	movs	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ae:	003a      	movs	r2, r7
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_ZL12MX_TIM3_Initv+0xb8>)
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f002 fc97 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	0003      	movs	r3, r0
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4193      	sbcs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80011c6:	f000 f895 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b006      	add	sp, #24
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	200000f0 	.word	0x200000f0
 80011d8:	40000400 	.word	0x40000400
 80011dc:	0000fffe 	.word	0x0000fffe

080011e0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <_ZL19MX_USART2_UART_Initv+0x64>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 80011ec:	22e1      	movs	r2, #225	; 0xe1
 80011ee:	0252      	lsls	r2, r2, #9
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001224:	0018      	movs	r0, r3
 8001226:	f002 fcbd 	bl	8003ba4 <HAL_UART_Init>
 800122a:	0003      	movs	r3, r0
 800122c:	1e5a      	subs	r2, r3, #1
 800122e:	4193      	sbcs	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8001236:	f000 f85d 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000138 	.word	0x20000138
 8001244:	40004400 	.word	0x40004400

08001248 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	240c      	movs	r4, #12
 8001250:	193b      	adds	r3, r7, r4
 8001252:	0018      	movs	r0, r3
 8001254:	2314      	movs	r3, #20
 8001256:	001a      	movs	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	f003 f9c3 	bl	80045e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	03c9      	lsls	r1, r1, #15
 8001268:	430a      	orrs	r2, r1
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	03db      	lsls	r3, r3, #15
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	0289      	lsls	r1, r1, #10
 8001284:	430a      	orrs	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	029b      	lsls	r3, r3, #10
 8001290:	4013      	ands	r3, r2
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	02c9      	lsls	r1, r1, #11
 80012a0:	430a      	orrs	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_ZL12MX_GPIO_Initv+0xa4>)
 80012a6:	695a      	ldr	r2, [r3, #20]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	02db      	lsls	r3, r3, #11
 80012ac:	4013      	ands	r3, r2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <_ZL12MX_GPIO_Initv+0xa8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	2108      	movs	r1, #8
 80012b8:	0018      	movs	r0, r3
 80012ba:	f000 ff71 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012be:	0021      	movs	r1, r4
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2208      	movs	r2, #8
 80012c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2201      	movs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_ZL12MX_GPIO_Initv+0xa8>)
 80012dc:	0019      	movs	r1, r3
 80012de:	0010      	movs	r0, r2
 80012e0:	f000 fde6 	bl	8001eb0 <HAL_GPIO_Init>

}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b009      	add	sp, #36	; 0x24
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000400 	.word	0x48000400

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <startUp>:
extern "C"
{
VescCAN* vesc;

void startUp(TIM_HandleTypeDef * htim, CAN_HandleTypeDef * hcan,SPI_HandleTypeDef * hspi)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	//initializes the can communications
	CANBus::Config config = {.AutoRetransmit = true, .FilterMask = 0x7FF};
 800130c:	2424      	movs	r4, #36	; 0x24
 800130e:	193b      	adds	r3, r7, r4
 8001310:	0018      	movs	r0, r3
 8001312:	230c      	movs	r3, #12
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f003 f964 	bl	80045e4 <memset>
 800131c:	0021      	movs	r1, r4
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2201      	movs	r2, #1
 8001322:	711a      	strb	r2, [r3, #4]
 8001324:	187b      	adds	r3, r7, r1
 8001326:	4a14      	ldr	r2, [pc, #80]	; (8001378 <startUp+0x78>)
 8001328:	609a      	str	r2, [r3, #8]
	CANBus can = PSR::CANBus(*hcan,config);
 800132a:	187a      	adds	r2, r7, r1
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	2510      	movs	r5, #16
 8001330:	197b      	adds	r3, r7, r5
 8001332:	0018      	movs	r0, r3
 8001334:	f002 ffd2 	bl	80042dc <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>
	can.Init();
 8001338:	197b      	adds	r3, r7, r5
 800133a:	0018      	movs	r0, r3
 800133c:	f002 ffe4 	bl	8004308 <_ZN3PSR6CANBus4InitEv>
	vesc = new VescCAN(can,113);
 8001340:	2008      	movs	r0, #8
 8001342:	f003 f8fb 	bl	800453c <_Znwj>
 8001346:	0003      	movs	r3, r0
 8001348:	001c      	movs	r4, r3
 800134a:	197b      	adds	r3, r7, r5
 800134c:	2271      	movs	r2, #113	; 0x71
 800134e:	0019      	movs	r1, r3
 8001350:	0020      	movs	r0, r4
 8001352:	f003 f872 	bl	800443a <_ZN3PSR7VescCANC1ERNS_6CANBusEh>
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <startUp+0x7c>)
 8001358:	601c      	str	r4, [r3, #0]
	HAL_Delay(1000);
 800135a:	23fa      	movs	r3, #250	; 0xfa
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	0018      	movs	r0, r3
 8001360:	f000 fa84 	bl	800186c <HAL_Delay>

	//Reset the optical encoder
	resetEncoder(hspi,htim);
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0011      	movs	r1, r2
 800136a:	0018      	movs	r0, r3
 800136c:	f7ff fd7c 	bl	8000e68 <resetEncoder>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b00c      	add	sp, #48	; 0x30
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	000007ff 	.word	0x000007ff
 800137c:	200001e4 	.word	0x200001e4

08001380 <loop>:
void loop(TIM_HandleTypeDef * htim, CAN_HandleTypeDef * hcan,SPI_HandleTypeDef * hspi)
{
 8001380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001382:	b08b      	sub	sp, #44	; 0x2c
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	uint8_t spi_Rx[2];

	HAL_StatusTypeDef checkStatus;

	//get position
	spi_Tx[0] = 0x00;
 800138c:	2514      	movs	r5, #20
 800138e:	197b      	adds	r3, r7, r5
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	spi_Tx[1] = 0x70;
 8001394:	197b      	adds	r3, r7, r5
 8001396:	2270      	movs	r2, #112	; 0x70
 8001398:	705a      	strb	r2, [r3, #1]

	checkStatus = sendByte(spi_Tx,true,hspi,htim,spi_Rx);
 800139a:	261f      	movs	r6, #31
 800139c:	19bc      	adds	r4, r7, r6
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	1978      	adds	r0, r7, r5
 80013a4:	2310      	movs	r3, #16
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	000b      	movs	r3, r1
 80013ac:	2101      	movs	r1, #1
 80013ae:	f7ff fd0f 	bl	8000dd0 <sendByte>
 80013b2:	0003      	movs	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
	if(checkStatus == HAL_OK)
 80013b6:	19bb      	adds	r3, r7, r6
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d144      	bne.n	8001448 <loop+0xc8>
	{
		checkStatus = sendByte(spi_Tx + 1,false,hspi,htim,spi_Rx + 1);
 80013be:	1978      	adds	r0, r7, r5
 80013c0:	3001      	adds	r0, #1
 80013c2:	2510      	movs	r5, #16
 80013c4:	197b      	adds	r3, r7, r5
 80013c6:	3301      	adds	r3, #1
 80013c8:	19bc      	adds	r4, r7, r6
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	000b      	movs	r3, r1
 80013d2:	2100      	movs	r1, #0
 80013d4:	f7ff fcfc 	bl	8000dd0 <sendByte>
 80013d8:	0003      	movs	r3, r0
 80013da:	7023      	strb	r3, [r4, #0]
		if(checkStatus == HAL_OK)
 80013dc:	19bb      	adds	r3, r7, r6
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d131      	bne.n	8001448 <loop+0xc8>
		{
			//If both positions are valid and correct, then we can use the checkbit formula
			int16_t finalPosition = ((uint16_t)spi_Rx[0] << 8) | (uint16_t)spi_Rx[1];
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b219      	sxth	r1, r3
 80013ec:	197b      	adds	r3, r7, r5
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	241c      	movs	r4, #28
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	430a      	orrs	r2, r1
 80013f8:	801a      	strh	r2, [r3, #0]

			if(amt223Check(finalPosition))
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff fc2f 	bl	8000c62 <amt223Check>
 8001404:	1e03      	subs	r3, r0, #0
 8001406:	d01f      	beq.n	8001448 <loop+0xc8>
			{
				finalPosition &= 0b0011111111111111;
 8001408:	0021      	movs	r1, r4
 800140a:	187b      	adds	r3, r7, r1
 800140c:	187a      	adds	r2, r7, r1
 800140e:	8812      	ldrh	r2, [r2, #0]
 8001410:	0492      	lsls	r2, r2, #18
 8001412:	0c92      	lsrs	r2, r2, #18
 8001414:	801a      	strh	r2, [r3, #0]
				float duty = finalPosition/16000.0;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	5e9b      	ldrsh	r3, [r3, r2]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fb3b 	bl	8000a98 <__aeabi_i2d>
 8001422:	2200      	movs	r2, #0
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <loop+0xd0>)
 8001426:	f7ff f841 	bl	80004ac <__aeabi_ddiv>
 800142a:	0002      	movs	r2, r0
 800142c:	000b      	movs	r3, r1
 800142e:	0010      	movs	r0, r2
 8001430:	0019      	movs	r1, r3
 8001432:	f7ff fb61 	bl	8000af8 <__aeabi_d2f>
 8001436:	1c03      	adds	r3, r0, #0
 8001438:	61bb      	str	r3, [r7, #24]
				vesc->SetDutyCycle(duty);
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <loop+0xd4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	1c11      	adds	r1, r2, #0
 8001442:	0018      	movs	r0, r3
 8001444:	f003 f840 	bl	80044c8 <_ZN3PSR7VescCAN12SetDutyCycleEf>
			}
		}
	}
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b009      	add	sp, #36	; 0x24
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	40cf4000 	.word	0x40cf4000
 8001454:	200001e4 	.word	0x200001e4

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x44>)
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_MspInit+0x44>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	619a      	str	r2, [r3, #24]
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x44>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2201      	movs	r2, #1
 8001470:	4013      	ands	r3, r2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x44>)
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_MspInit+0x44>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	0549      	lsls	r1, r1, #21
 8001480:	430a      	orrs	r2, r1
 8001482:	61da      	str	r2, [r3, #28]
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_MspInit+0x44>)
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	055b      	lsls	r3, r3, #21
 800148c:	4013      	ands	r3, r2
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b002      	add	sp, #8
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	2414      	movs	r4, #20
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	0018      	movs	r0, r3
 80014ae:	2314      	movs	r3, #20
 80014b0:	001a      	movs	r2, r3
 80014b2:	2100      	movs	r1, #0
 80014b4:	f003 f896 	bl	80045e4 <memset>
  if(hcan->Instance==CAN)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_CAN_MspInit+0x94>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d133      	bne.n	800152a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0489      	lsls	r1, r1, #18
 80014cc:	430a      	orrs	r2, r1
 80014ce:	61da      	str	r2, [r3, #28]
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	049b      	lsls	r3, r3, #18
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	0289      	lsls	r1, r1, #10
 80014e8:	430a      	orrs	r2, r1
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_CAN_MspInit+0x98>)
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	029b      	lsls	r3, r3, #10
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	22c0      	movs	r2, #192	; 0xc0
 80014fe:	0152      	lsls	r2, r2, #5
 8001500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	0021      	movs	r1, r4
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2202      	movs	r2, #2
 8001508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2203      	movs	r2, #3
 8001514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2204      	movs	r2, #4
 800151a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	187a      	adds	r2, r7, r1
 800151e:	2390      	movs	r3, #144	; 0x90
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 fcc3 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b00b      	add	sp, #44	; 0x2c
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40006400 	.word	0x40006400
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	2414      	movs	r4, #20
 8001546:	193b      	adds	r3, r7, r4
 8001548:	0018      	movs	r0, r3
 800154a:	2314      	movs	r3, #20
 800154c:	001a      	movs	r2, r3
 800154e:	2100      	movs	r1, #0
 8001550:	f003 f848 	bl	80045e4 <memset>
  if(hspi->Instance==SPI1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <HAL_SPI_MspInit+0x90>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d132      	bne.n	80015c4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 8001560:	699a      	ldr	r2, [r3, #24]
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0149      	lsls	r1, r1, #5
 8001568:	430a      	orrs	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	015b      	lsls	r3, r3, #5
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0289      	lsls	r1, r1, #10
 8001584:	430a      	orrs	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_SPI_MspInit+0x94>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	029b      	lsls	r3, r3, #10
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001596:	0021      	movs	r1, r4
 8001598:	187b      	adds	r3, r7, r1
 800159a:	22e0      	movs	r2, #224	; 0xe0
 800159c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2202      	movs	r2, #2
 80015a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2203      	movs	r2, #3
 80015ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	187a      	adds	r2, r7, r1
 80015b8:	2390      	movs	r3, #144	; 0x90
 80015ba:	05db      	lsls	r3, r3, #23
 80015bc:	0011      	movs	r1, r2
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 fc76 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	b00b      	add	sp, #44	; 0x2c
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	40013000 	.word	0x40013000
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_TIM_Base_MspInit+0x34>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10b      	bne.n	80015fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_TIM_Base_MspInit+0x38>)
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_TIM_Base_MspInit+0x38>)
 80015ec:	2102      	movs	r1, #2
 80015ee:	430a      	orrs	r2, r1
 80015f0:	61da      	str	r2, [r3, #28]
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_TIM_Base_MspInit+0x38>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2202      	movs	r2, #2
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	40000400 	.word	0x40000400
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	2414      	movs	r4, #20
 800161a:	193b      	adds	r3, r7, r4
 800161c:	0018      	movs	r0, r3
 800161e:	2314      	movs	r3, #20
 8001620:	001a      	movs	r2, r3
 8001622:	2100      	movs	r1, #0
 8001624:	f002 ffde 	bl	80045e4 <memset>
  if(huart->Instance==USART2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <HAL_UART_MspInit+0x90>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d132      	bne.n	8001698 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_UART_MspInit+0x94>)
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_UART_MspInit+0x94>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0289      	lsls	r1, r1, #10
 800163c:	430a      	orrs	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_UART_MspInit+0x94>)
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0x94>)
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_UART_MspInit+0x94>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0289      	lsls	r1, r1, #10
 8001658:	430a      	orrs	r2, r1
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0x94>)
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800166a:	0021      	movs	r1, r4
 800166c:	187b      	adds	r3, r7, r1
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2202      	movs	r2, #2
 8001676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2203      	movs	r2, #3
 8001682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2201      	movs	r2, #1
 8001688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	187a      	adds	r2, r7, r1
 800168c:	2390      	movs	r3, #144	; 0x90
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f000 fc0c 	bl	8001eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b00b      	add	sp, #44	; 0x2c
 800169e:	bd90      	pop	{r4, r7, pc}
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40021000 	.word	0x40021000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016cc:	f000 f8b2 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f002 ff38 	bl	800457c <__errno>
 800170c:	0003      	movs	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	2301      	movs	r3, #1
 8001714:	425b      	negs	r3, r3
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	18d2      	adds	r2, r2, r3
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20004000 	.word	0x20004000
 8001738:	00000400 	.word	0x00000400
 800173c:	200001e8 	.word	0x200001e8
 8001740:	20000208 	.word	0x20000208

08001744 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopForever+0x6>)
  ldr r1, =_edata
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <LoopForever+0xe>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800176c:	4c0b      	ldr	r4, [pc, #44]	; (800179c <LoopForever+0x16>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800177a:	f7ff ffe3 	bl	8001744 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800177e:	f002 ff03 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001782:	f7ff fbc5 	bl	8000f10 <main>

08001786 <LoopForever>:

LoopForever:
    b LoopForever
 8001786:	e7fe      	b.n	8001786 <LoopForever>
  ldr   r0, =_estack
 8001788:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001794:	080048fc 	.word	0x080048fc
  ldr r2, =_sbss
 8001798:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800179c:	20000204 	.word	0x20000204

080017a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC1_COMP_IRQHandler>
	...

080017a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_Init+0x24>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_Init+0x24>)
 80017ae:	2110      	movs	r1, #16
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f809 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fe4d 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40022000 	.word	0x40022000

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_InitTick+0x5c>)
 80017d6:	681c      	ldr	r4, [r3, #0]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_InitTick+0x60>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	0019      	movs	r1, r3
 80017de:	23fa      	movs	r3, #250	; 0xfa
 80017e0:	0098      	lsls	r0, r3, #2
 80017e2:	f7fe fc91 	bl	8000108 <__udivsi3>
 80017e6:	0003      	movs	r3, r0
 80017e8:	0019      	movs	r1, r3
 80017ea:	0020      	movs	r0, r4
 80017ec:	f7fe fc8c 	bl	8000108 <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 fb4f 	bl	8001e96 <HAL_SYSTICK_Config>
 80017f8:	1e03      	subs	r3, r0, #0
 80017fa:	d001      	beq.n	8001800 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00f      	b.n	8001820 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d80b      	bhi.n	800181e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	2301      	movs	r3, #1
 800180a:	425b      	negs	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	0018      	movs	r0, r3
 8001810:	f000 fb2c 	bl	8001e6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_InitTick+0x64>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b003      	add	sp, #12
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	001a      	movs	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	18d2      	adds	r2, r2, r3
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_IncTick+0x20>)
 8001846:	601a      	str	r2, [r3, #0]
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	20000008 	.word	0x20000008
 8001854:	200001ec 	.word	0x200001ec

08001858 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	200001ec 	.word	0x200001ec

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff0 	bl	8001858 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	001a      	movs	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	189b      	adds	r3, r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	f7ff ffe0 	bl	8001858 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0f0      	b.n	8001aa8 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2220      	movs	r2, #32
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d103      	bne.n	80018da <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fde3 	bl	80014a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ea:	f7ff ffb5 	bl	8001858 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018f2:	e013      	b.n	800191c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f4:	f7ff ffb0 	bl	8001858 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d90c      	bls.n	800191c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	0292      	lsls	r2, r2, #10
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2220      	movs	r2, #32
 8001914:	2105      	movs	r1, #5
 8001916:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0c5      	b.n	8001aa8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	4013      	ands	r3, r2
 8001926:	d0e5      	beq.n	80018f4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2102      	movs	r1, #2
 8001934:	438a      	bics	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001938:	f7ff ff8e 	bl	8001858 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001940:	e013      	b.n	800196a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001942:	f7ff ff89 	bl	8001858 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b0a      	cmp	r3, #10
 800194e:	d90c      	bls.n	800196a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	0292      	lsls	r2, r2, #10
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	2105      	movs	r1, #5
 8001964:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e09e      	b.n	8001aa8 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1e5      	bne.n	8001942 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7e1b      	ldrb	r3, [r3, #24]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d108      	bne.n	8001990 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e007      	b.n	80019a0 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	438a      	bics	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e5b      	ldrb	r3, [r3, #25]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e9b      	ldrb	r3, [r3, #26]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2120      	movs	r1, #32
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2120      	movs	r1, #32
 80019f0:	438a      	bics	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7edb      	ldrb	r3, [r3, #27]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2110      	movs	r1, #16
 8001a08:	438a      	bics	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e007      	b.n	8001a1e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2110      	movs	r1, #16
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7f1b      	ldrb	r3, [r3, #28]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2108      	movs	r1, #8
 8001a32:	430a      	orrs	r2, r1
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2108      	movs	r1, #8
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7f5b      	ldrb	r3, [r3, #29]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d108      	bne.n	8001a62 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	438a      	bics	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	0011      	movs	r1, r2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b004      	add	sp, #16
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	5c9b      	ldrb	r3, [r3, r2]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d12f      	bne.n	8001b24 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	2102      	movs	r1, #2
 8001aca:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff febc 	bl	8001858 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ae4:	e013      	b.n	8001b0e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ae6:	f7ff feb7 	bl	8001858 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d90c      	bls.n	8001b0e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	0292      	lsls	r2, r2, #10
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2220      	movs	r2, #32
 8001b06:	2105      	movs	r1, #5
 8001b08:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e012      	b.n	8001b34 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1e5      	bne.n	8001ae6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0312      	lsls	r2, r2, #12
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b004      	add	sp, #16
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b4a:	201f      	movs	r0, #31
 8001b4c:	183b      	adds	r3, r7, r0
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	2120      	movs	r1, #32
 8001b52:	5c52      	ldrb	r2, [r2, r1]
 8001b54:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d004      	beq.n	8001b70 <HAL_CAN_AddTxMessage+0x34>
 8001b66:	183b      	adds	r3, r7, r0
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d000      	beq.n	8001b70 <HAL_CAN_AddTxMessage+0x34>
 8001b6e:	e0b7      	b.n	8001ce0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	04db      	lsls	r3, r3, #19
 8001b76:	4013      	ands	r3, r2
 8001b78:	d10a      	bne.n	8001b90 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	051b      	lsls	r3, r3, #20
 8001b80:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b82:	d105      	bne.n	8001b90 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b8c:	d100      	bne.n	8001b90 <HAL_CAN_AddTxMessage+0x54>
 8001b8e:	e09e      	b.n	8001cce <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	0e1b      	lsrs	r3, r3, #24
 8001b94:	2203      	movs	r2, #3
 8001b96:	4013      	ands	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d908      	bls.n	8001bb2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	0412      	lsls	r2, r2, #16
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09e      	b.n	8001cf0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10c      	bne.n	8001bde <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	3218      	adds	r2, #24
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	50d1      	str	r1, [r2, r3]
 8001bdc:	e00f      	b.n	8001bfe <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001be8:	431a      	orrs	r2, r3
 8001bea:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001bf4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	3218      	adds	r2, #24
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	18cb      	adds	r3, r1, r3
 8001c0e:	3304      	adds	r3, #4
 8001c10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	7d1b      	ldrb	r3, [r3, #20]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d112      	bne.n	8001c40 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3318      	adds	r3, #24
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	18d3      	adds	r3, r2, r3
 8001c26:	3304      	adds	r3, #4
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3318      	adds	r3, #24
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	18cb      	adds	r3, r1, r3
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3307      	adds	r3, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	061a      	lsls	r2, r3, #24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3306      	adds	r3, #6
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3305      	adds	r3, #5
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	0019      	movs	r1, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	23c6      	movs	r3, #198	; 0xc6
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	0109      	lsls	r1, r1, #4
 8001c72:	1841      	adds	r1, r0, r1
 8001c74:	18cb      	adds	r3, r1, r3
 8001c76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	061a      	lsls	r2, r3, #24
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3302      	adds	r3, #2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	0019      	movs	r1, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	6979      	ldr	r1, [r7, #20]
 8001ca2:	23c4      	movs	r3, #196	; 0xc4
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	0109      	lsls	r1, r1, #4
 8001ca8:	1841      	adds	r1, r0, r1
 8001caa:	18cb      	adds	r3, r1, r3
 8001cac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	3218      	adds	r2, #24
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	58d2      	ldr	r2, [r2, r3]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	3218      	adds	r2, #24
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e010      	b.n	8001cf0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	0392      	lsls	r2, r2, #14
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	02d2      	lsls	r2, r2, #11
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
  }
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b008      	add	sp, #32
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d06:	200b      	movs	r0, #11
 8001d08:	183b      	adds	r3, r7, r0
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	5c52      	ldrb	r2, [r2, r1]
 8001d10:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d12:	0002      	movs	r2, r0
 8001d14:	18bb      	adds	r3, r7, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d003      	beq.n	8001d24 <HAL_CAN_IsTxMessagePending+0x2c>
 8001d1c:	18bb      	adds	r3, r7, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d10b      	bne.n	8001d3c <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	0692      	lsls	r2, r2, #26
 8001d2e:	401a      	ands	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	069b      	lsls	r3, r3, #26
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b004      	add	sp, #16
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	0002      	movs	r2, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001d5c:	d828      	bhi.n	8001db0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d5e:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <__NVIC_SetPriority+0xd4>)
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	33c0      	adds	r3, #192	; 0xc0
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	589b      	ldr	r3, [r3, r2]
 8001d6e:	1dfa      	adds	r2, r7, #7
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	0011      	movs	r1, r2
 8001d74:	2203      	movs	r2, #3
 8001d76:	400a      	ands	r2, r1
 8001d78:	00d2      	lsls	r2, r2, #3
 8001d7a:	21ff      	movs	r1, #255	; 0xff
 8001d7c:	4091      	lsls	r1, r2
 8001d7e:	000a      	movs	r2, r1
 8001d80:	43d2      	mvns	r2, r2
 8001d82:	401a      	ands	r2, r3
 8001d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	019b      	lsls	r3, r3, #6
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	0018      	movs	r0, r3
 8001d94:	2303      	movs	r3, #3
 8001d96:	4003      	ands	r3, r0
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9c:	481f      	ldr	r0, [pc, #124]	; (8001e1c <__NVIC_SetPriority+0xd4>)
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	430a      	orrs	r2, r1
 8001da8:	33c0      	adds	r3, #192	; 0xc0
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dae:	e031      	b.n	8001e14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <__NVIC_SetPriority+0xd8>)
 8001db2:	1dfb      	adds	r3, r7, #7
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	0019      	movs	r1, r3
 8001db8:	230f      	movs	r3, #15
 8001dba:	400b      	ands	r3, r1
 8001dbc:	3b08      	subs	r3, #8
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3306      	adds	r3, #6
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	18d3      	adds	r3, r2, r3
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	1dfa      	adds	r2, r7, #7
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	0011      	movs	r1, r2
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	00d2      	lsls	r2, r2, #3
 8001dd6:	21ff      	movs	r1, #255	; 0xff
 8001dd8:	4091      	lsls	r1, r2
 8001dda:	000a      	movs	r2, r1
 8001ddc:	43d2      	mvns	r2, r2
 8001dde:	401a      	ands	r2, r3
 8001de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	019b      	lsls	r3, r3, #6
 8001de6:	22ff      	movs	r2, #255	; 0xff
 8001de8:	401a      	ands	r2, r3
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	0018      	movs	r0, r3
 8001df0:	2303      	movs	r3, #3
 8001df2:	4003      	ands	r3, r0
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df8:	4809      	ldr	r0, [pc, #36]	; (8001e20 <__NVIC_SetPriority+0xd8>)
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	001c      	movs	r4, r3
 8001e00:	230f      	movs	r3, #15
 8001e02:	4023      	ands	r3, r4
 8001e04:	3b08      	subs	r3, #8
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	3306      	adds	r3, #6
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	18c3      	adds	r3, r0, r3
 8001e10:	3304      	adds	r3, #4
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b003      	add	sp, #12
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1e5a      	subs	r2, r3, #1
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	045b      	lsls	r3, r3, #17
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d301      	bcc.n	8001e3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e010      	b.n	8001e5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <SysTick_Config+0x44>)
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	3a01      	subs	r2, #1
 8001e42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e44:	2301      	movs	r3, #1
 8001e46:	425b      	negs	r3, r3
 8001e48:	2103      	movs	r1, #3
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7ff ff7c 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x44>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x44>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	210f      	movs	r1, #15
 8001e78:	187b      	adds	r3, r7, r1
 8001e7a:	1c02      	adds	r2, r0, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ffbf 	bl	8001e24 <SysTick_Config>
 8001ea6:	0003      	movs	r3, r0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	e155      	b.n	800216c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d100      	bne.n	8001ed8 <HAL_GPIO_Init+0x28>
 8001ed6:	e146      	b.n	8002166 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d005      	beq.n	8001ef0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d130      	bne.n	8001f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	409a      	lsls	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	43da      	mvns	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	0013      	movs	r3, r2
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f26:	2201      	movs	r2, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
 8001f44:	0013      	movs	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2203      	movs	r2, #3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d017      	beq.n	8001f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	0013      	movs	r3, r2
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	409a      	lsls	r2, r3
 8001f80:	0013      	movs	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2203      	movs	r2, #3
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	58d3      	ldr	r3, [r2, r3]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2107      	movs	r1, #7
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	0013      	movs	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	401a      	ands	r2, r3
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	4013      	ands	r3, r2
 8002020:	d100      	bne.n	8002024 <HAL_GPIO_Init+0x174>
 8002022:	e0a0      	b.n	8002166 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002024:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_GPIO_Init+0x2d4>)
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x2d4>)
 800202a:	2101      	movs	r1, #1
 800202c:	430a      	orrs	r2, r1
 800202e:	619a      	str	r2, [r3, #24]
 8002030:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x2d4>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_GPIO_Init+0x2d8>)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	589b      	ldr	r3, [r3, r2]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2203      	movs	r2, #3
 800204e:	4013      	ands	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	409a      	lsls	r2, r3
 8002056:	0013      	movs	r3, r2
 8002058:	43da      	mvns	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	2390      	movs	r3, #144	; 0x90
 8002064:	05db      	lsls	r3, r3, #23
 8002066:	429a      	cmp	r2, r3
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x1ee>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a47      	ldr	r2, [pc, #284]	; (800218c <HAL_GPIO_Init+0x2dc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1ea>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <HAL_GPIO_Init+0x2e0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1e6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a45      	ldr	r2, [pc, #276]	; (8002194 <HAL_GPIO_Init+0x2e4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1e2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a44      	ldr	r2, [pc, #272]	; (8002198 <HAL_GPIO_Init+0x2e8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1de>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x1f0>
 800208e:	2305      	movs	r3, #5
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x1f0>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x1f0>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x1f0>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x1f0>
 800209e:	2300      	movs	r3, #0
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	2103      	movs	r1, #3
 80020a4:	400a      	ands	r2, r1
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x2d8>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <HAL_GPIO_Init+0x2ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4013      	ands	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	025b      	lsls	r3, r3, #9
 80020d6:	4013      	ands	r3, r2
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <HAL_GPIO_Init+0x2ec>)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_GPIO_Init+0x2ec>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	4013      	ands	r3, r2
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_GPIO_Init+0x2ec>)
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_GPIO_Init+0x2ec>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	035b      	lsls	r3, r3, #13
 800212a:	4013      	ands	r3, r2
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_GPIO_Init+0x2ec>)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_GPIO_Init+0x2ec>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43da      	mvns	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	039b      	lsls	r3, r3, #14
 8002154:	4013      	ands	r3, r2
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_GPIO_Init+0x2ec>)
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	40da      	lsrs	r2, r3
 8002174:	1e13      	subs	r3, r2, #0
 8002176:	d000      	beq.n	800217a <HAL_GPIO_Init+0x2ca>
 8002178:	e6a2      	b.n	8001ec0 <HAL_GPIO_Init+0x10>
  } 
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b006      	add	sp, #24
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	0008      	movs	r0, r1
 80021aa:	0011      	movs	r1, r2
 80021ac:	1cbb      	adds	r3, r7, #2
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	801a      	strh	r2, [r3, #0]
 80021b2:	1c7b      	adds	r3, r7, #1
 80021b4:	1c0a      	adds	r2, r1, #0
 80021b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b8:	1c7b      	adds	r3, r7, #1
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c0:	1cbb      	adds	r3, r7, #2
 80021c2:	881a      	ldrh	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c8:	e003      	b.n	80021d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ca:	1cbb      	adds	r3, r7, #2
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f000 fb76 	bl	80028dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d100      	bne.n	80021fc <HAL_RCC_OscConfig+0x20>
 80021fa:	e08e      	b.n	800231a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021fc:	4bc5      	ldr	r3, [pc, #788]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	220c      	movs	r2, #12
 8002202:	4013      	ands	r3, r2
 8002204:	2b04      	cmp	r3, #4
 8002206:	d00e      	beq.n	8002226 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002208:	4bc2      	ldr	r3, [pc, #776]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	220c      	movs	r2, #12
 800220e:	4013      	ands	r3, r2
 8002210:	2b08      	cmp	r3, #8
 8002212:	d117      	bne.n	8002244 <HAL_RCC_OscConfig+0x68>
 8002214:	4bbf      	ldr	r3, [pc, #764]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	23c0      	movs	r3, #192	; 0xc0
 800221a:	025b      	lsls	r3, r3, #9
 800221c:	401a      	ands	r2, r3
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	025b      	lsls	r3, r3, #9
 8002222:	429a      	cmp	r2, r3
 8002224:	d10e      	bne.n	8002244 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4bbb      	ldr	r3, [pc, #748]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	4013      	ands	r3, r2
 8002230:	d100      	bne.n	8002234 <HAL_RCC_OscConfig+0x58>
 8002232:	e071      	b.n	8002318 <HAL_RCC_OscConfig+0x13c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d000      	beq.n	800223e <HAL_RCC_OscConfig+0x62>
 800223c:	e06c      	b.n	8002318 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 fb4c 	bl	80028dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x80>
 800224c:	4bb1      	ldr	r3, [pc, #708]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4bb0      	ldr	r3, [pc, #704]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0249      	lsls	r1, r1, #9
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e02f      	b.n	80022bc <HAL_RCC_OscConfig+0xe0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0xa2>
 8002264:	4bab      	ldr	r3, [pc, #684]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4baa      	ldr	r3, [pc, #680]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800226a:	49ab      	ldr	r1, [pc, #684]	; (8002518 <HAL_RCC_OscConfig+0x33c>)
 800226c:	400a      	ands	r2, r1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	4ba8      	ldr	r3, [pc, #672]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4ba7      	ldr	r3, [pc, #668]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002276:	49a9      	ldr	r1, [pc, #676]	; (800251c <HAL_RCC_OscConfig+0x340>)
 8002278:	400a      	ands	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e01e      	b.n	80022bc <HAL_RCC_OscConfig+0xe0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10e      	bne.n	80022a4 <HAL_RCC_OscConfig+0xc8>
 8002286:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4ba2      	ldr	r3, [pc, #648]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	02c9      	lsls	r1, r1, #11
 8002290:	430a      	orrs	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	4b9f      	ldr	r3, [pc, #636]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	0249      	lsls	r1, r1, #9
 800229e:	430a      	orrs	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0xe0>
 80022a4:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b9a      	ldr	r3, [pc, #616]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80022aa:	499b      	ldr	r1, [pc, #620]	; (8002518 <HAL_RCC_OscConfig+0x33c>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	4b98      	ldr	r3, [pc, #608]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b97      	ldr	r3, [pc, #604]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80022b6:	4999      	ldr	r1, [pc, #612]	; (800251c <HAL_RCC_OscConfig+0x340>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d014      	beq.n	80022ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fac8 	bl	8001858 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ce:	f7ff fac3 	bl	8001858 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e2fd      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0xf2>
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7ff fab3 	bl	8001858 <HAL_GetTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff faae 	bl	8001858 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e2e8      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x11c>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCC_OscConfig+0x14a>
 8002324:	e06c      	b.n	8002400 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	220c      	movs	r2, #12
 800232c:	4013      	ands	r3, r2
 800232e:	d00e      	beq.n	800234e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002330:	4b78      	ldr	r3, [pc, #480]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	220c      	movs	r2, #12
 8002336:	4013      	ands	r3, r2
 8002338:	2b08      	cmp	r3, #8
 800233a:	d11f      	bne.n	800237c <HAL_RCC_OscConfig+0x1a0>
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	025b      	lsls	r3, r3, #9
 8002344:	401a      	ands	r2, r3
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	429a      	cmp	r2, r3
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b71      	ldr	r3, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x188>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e2bb      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	22f8      	movs	r2, #248	; 0xf8
 800236a:	4393      	bics	r3, r2
 800236c:	0019      	movs	r1, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00da      	lsls	r2, r3, #3
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e041      	b.n	8002400 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d024      	beq.n	80023ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fa62 	bl	8001858 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fa5d 	bl	8001858 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e297      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d0f1      	beq.n	800239a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	22f8      	movs	r2, #248	; 0xf8
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	00da      	lsls	r2, r3, #3
 80023c6:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e018      	b.n	8002400 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b51      	ldr	r3, [pc, #324]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023d4:	2101      	movs	r1, #1
 80023d6:	438a      	bics	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff fa3d 	bl	8001858 <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff fa38 	bl	8001858 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e272      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d1f1      	bne.n	80023e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2208      	movs	r2, #8
 8002406:	4013      	ands	r3, r2
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002418:	2101      	movs	r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff fa1b 	bl	8001858 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fa16 	bl	8001858 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e250      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2202      	movs	r2, #2
 8002440:	4013      	ands	r3, r2
 8002442:	d0f1      	beq.n	8002428 <HAL_RCC_OscConfig+0x24c>
 8002444:	e018      	b.n	8002478 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b33      	ldr	r3, [pc, #204]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800244c:	2101      	movs	r1, #1
 800244e:	438a      	bics	r2, r1
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7ff fa01 	bl	8001858 <HAL_GetTick>
 8002456:	0003      	movs	r3, r0
 8002458:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245c:	f7ff f9fc 	bl	8001858 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e236      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2202      	movs	r2, #2
 8002474:	4013      	ands	r3, r2
 8002476:	d1f1      	bne.n	800245c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	d100      	bne.n	8002484 <HAL_RCC_OscConfig+0x2a8>
 8002482:	e0b5      	b.n	80025f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002484:	201f      	movs	r0, #31
 8002486:	183b      	adds	r3, r7, r0
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	055b      	lsls	r3, r3, #21
 8002494:	4013      	ands	r3, r2
 8002496:	d110      	bne.n	80024ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0549      	lsls	r1, r1, #21
 80024a2:	430a      	orrs	r2, r1
 80024a4:	61da      	str	r2, [r3, #28]
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	055b      	lsls	r3, r3, #21
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024b4:	183b      	adds	r3, r7, r0
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_OscConfig+0x344>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_RCC_OscConfig+0x344>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_OscConfig+0x344>)
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	0049      	lsls	r1, r1, #1
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d4:	f7ff f9c0 	bl	8001858 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff f9bb 	bl	8001858 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1f5      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x344>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4013      	ands	r3, r2
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10f      	bne.n	8002524 <HAL_RCC_OscConfig+0x348>
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 8002506:	6a1a      	ldr	r2, [r3, #32]
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <HAL_RCC_OscConfig+0x338>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	621a      	str	r2, [r3, #32]
 8002510:	e036      	b.n	8002580 <HAL_RCC_OscConfig+0x3a4>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40021000 	.word	0x40021000
 8002518:	fffeffff 	.word	0xfffeffff
 800251c:	fffbffff 	.word	0xfffbffff
 8002520:	40007000 	.word	0x40007000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x36a>
 800252c:	4bca      	ldr	r3, [pc, #808]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800252e:	6a1a      	ldr	r2, [r3, #32]
 8002530:	4bc9      	ldr	r3, [pc, #804]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	621a      	str	r2, [r3, #32]
 8002538:	4bc7      	ldr	r3, [pc, #796]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	4bc6      	ldr	r3, [pc, #792]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800253e:	2104      	movs	r1, #4
 8002540:	438a      	bics	r2, r1
 8002542:	621a      	str	r2, [r3, #32]
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x3a4>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x38c>
 800254e:	4bc2      	ldr	r3, [pc, #776]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	4bc1      	ldr	r3, [pc, #772]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002554:	2104      	movs	r1, #4
 8002556:	430a      	orrs	r2, r1
 8002558:	621a      	str	r2, [r3, #32]
 800255a:	4bbf      	ldr	r3, [pc, #764]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800255c:	6a1a      	ldr	r2, [r3, #32]
 800255e:	4bbe      	ldr	r3, [pc, #760]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	621a      	str	r2, [r3, #32]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x3a4>
 8002568:	4bbb      	ldr	r3, [pc, #748]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	4bba      	ldr	r3, [pc, #744]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	621a      	str	r2, [r3, #32]
 8002574:	4bb8      	ldr	r3, [pc, #736]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	4bb7      	ldr	r3, [pc, #732]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800257a:	2104      	movs	r1, #4
 800257c:	438a      	bics	r2, r1
 800257e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d014      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7ff f966 	bl	8001858 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7ff f961 	bl	8001858 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4aaf      	ldr	r2, [pc, #700]	; (800285c <HAL_RCC_OscConfig+0x680>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e19a      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4bac      	ldr	r3, [pc, #688]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x3b6>
 80025b0:	e013      	b.n	80025da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7ff f951 	bl	8001858 <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	e009      	b.n	80025d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff f94c 	bl	8001858 <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4aa5      	ldr	r2, [pc, #660]	; (800285c <HAL_RCC_OscConfig+0x680>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e185      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4ba1      	ldr	r3, [pc, #644]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	2202      	movs	r2, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025da:	231f      	movs	r3, #31
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b9c      	ldr	r3, [pc, #624]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	4b9b      	ldr	r3, [pc, #620]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80025ea:	499d      	ldr	r1, [pc, #628]	; (8002860 <HAL_RCC_OscConfig+0x684>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	4013      	ands	r3, r2
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d12a      	bne.n	8002658 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002602:	4b95      	ldr	r3, [pc, #596]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002606:	4b94      	ldr	r3, [pc, #592]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002608:	2104      	movs	r1, #4
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800260e:	4b92      	ldr	r3, [pc, #584]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b91      	ldr	r3, [pc, #580]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7ff f91d 	bl	8001858 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002624:	f7ff f918 	bl	8001858 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e152      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d0f1      	beq.n	8002624 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002640:	4b85      	ldr	r3, [pc, #532]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	22f8      	movs	r2, #248	; 0xf8
 8002646:	4393      	bics	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	00da      	lsls	r2, r3, #3
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002652:	430a      	orrs	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	; 0x34
 8002656:	e034      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	3305      	adds	r3, #5
 800265e:	d111      	bne.n	8002684 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002660:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002664:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002666:	2104      	movs	r1, #4
 8002668:	438a      	bics	r2, r1
 800266a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800266c:	4b7a      	ldr	r3, [pc, #488]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	22f8      	movs	r2, #248	; 0xf8
 8002672:	4393      	bics	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	00da      	lsls	r2, r3, #3
 800267c:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800267e:	430a      	orrs	r2, r1
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
 8002682:	e01e      	b.n	80026c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002684:	4b74      	ldr	r3, [pc, #464]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002688:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800268a:	2104      	movs	r1, #4
 800268c:	430a      	orrs	r2, r1
 800268e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002690:	4b71      	ldr	r3, [pc, #452]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002694:	4b70      	ldr	r3, [pc, #448]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002696:	2101      	movs	r1, #1
 8002698:	438a      	bics	r2, r1
 800269a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7ff f8dc 	bl	8001858 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026a6:	f7ff f8d7 	bl	8001858 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e111      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026b8:	4b67      	ldr	r3, [pc, #412]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	2202      	movs	r2, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d1f1      	bne.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2220      	movs	r2, #32
 80026c8:	4013      	ands	r3, r2
 80026ca:	d05c      	beq.n	8002786 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026cc:	4b62      	ldr	r3, [pc, #392]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	220c      	movs	r2, #12
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d00e      	beq.n	80026f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026d8:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	220c      	movs	r2, #12
 80026de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d114      	bne.n	800270e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80026e4:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	23c0      	movs	r3, #192	; 0xc0
 80026ea:	025b      	lsls	r3, r3, #9
 80026ec:	401a      	ands	r2, r3
 80026ee:	23c0      	movs	r3, #192	; 0xc0
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10b      	bne.n	800270e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80026f6:	4b58      	ldr	r3, [pc, #352]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80026f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4013      	ands	r3, r2
 8002700:	d040      	beq.n	8002784 <HAL_RCC_OscConfig+0x5a8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d03c      	beq.n	8002784 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0e6      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01b      	beq.n	800274e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002716:	4b50      	ldr	r3, [pc, #320]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271a:	4b4f      	ldr	r3, [pc, #316]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0249      	lsls	r1, r1, #9
 8002720:	430a      	orrs	r2, r1
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f898 	bl	8001858 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272e:	f7ff f893 	bl	8001858 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0cd      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002740:	4b45      	ldr	r3, [pc, #276]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	4013      	ands	r3, r2
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x552>
 800274c:	e01b      	b.n	8002786 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002754:	4943      	ldr	r1, [pc, #268]	; (8002864 <HAL_RCC_OscConfig+0x688>)
 8002756:	400a      	ands	r2, r1
 8002758:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff f87d 	bl	8001858 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7ff f878 	bl	8001858 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0b2      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	4013      	ands	r3, r2
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x588>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002784:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d100      	bne.n	8002790 <HAL_RCC_OscConfig+0x5b4>
 800278e:	e0a4      	b.n	80028da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002790:	4b31      	ldr	r3, [pc, #196]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	220c      	movs	r2, #12
 8002796:	4013      	ands	r3, r2
 8002798:	2b08      	cmp	r3, #8
 800279a:	d100      	bne.n	800279e <HAL_RCC_OscConfig+0x5c2>
 800279c:	e078      	b.n	8002890 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d14c      	bne.n	8002840 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027ac:	492e      	ldr	r1, [pc, #184]	; (8002868 <HAL_RCC_OscConfig+0x68c>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff f851 	bl	8001858 <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7ff f84c 	bl	8001858 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e086      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	049b      	lsls	r3, r3, #18
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	220f      	movs	r2, #15
 80027e0:	4393      	bics	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4a1e      	ldr	r2, [pc, #120]	; (800286c <HAL_RCC_OscConfig+0x690>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	431a      	orrs	r2, r3
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0449      	lsls	r1, r1, #17
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7ff f81f 	bl	8001858 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff f81a 	bl	8001858 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e054      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x644>
 800283e:	e04c      	b.n	80028da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_RCC_OscConfig+0x67c>)
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <HAL_RCC_OscConfig+0x68c>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff f804 	bl	8001858 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x6a6>
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	00001388 	.word	0x00001388
 8002860:	efffffff 	.word	0xefffffff
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	feffffff 	.word	0xfeffffff
 800286c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fff2 	bl	8001858 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e02c      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_RCC_OscConfig+0x708>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	049b      	lsls	r3, r3, #18
 800288a:	4013      	ands	r3, r2
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x694>
 800288e:	e024      	b.n	80028da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e01f      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_OscConfig+0x708>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <HAL_RCC_OscConfig+0x708>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	23c0      	movs	r3, #192	; 0xc0
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	401a      	ands	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d10e      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	220f      	movs	r2, #15
 80028bc:	401a      	ands	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	23f0      	movs	r3, #240	; 0xf0
 80028ca:	039b      	lsls	r3, r3, #14
 80028cc:	401a      	ands	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b008      	add	sp, #32
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0bf      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d911      	bls.n	800292e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2201      	movs	r2, #1
 8002910:	4393      	bics	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0a6      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d015      	beq.n	8002964 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2204      	movs	r2, #4
 800293e:	4013      	ands	r3, r2
 8002940:	d006      	beq.n	8002950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002942:	4b51      	ldr	r3, [pc, #324]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002948:	21e0      	movs	r1, #224	; 0xe0
 800294a:	00c9      	lsls	r1, r1, #3
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b4d      	ldr	r3, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	22f0      	movs	r2, #240	; 0xf0
 8002956:	4393      	bics	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002960:	430a      	orrs	r2, r1
 8002962:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d04c      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	4013      	ands	r3, r2
 8002980:	d120      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07a      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3e      	ldr	r3, [pc, #248]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	049b      	lsls	r3, r3, #18
 8002996:	4013      	ands	r3, r2
 8002998:	d114      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06e      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 80029a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	4013      	ands	r3, r2
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e062      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e05b      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4393      	bics	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7fe ff3e 	bl	8001858 <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe ff39 	bl	8001858 <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_RCC_ClockConfig+0x1a4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e042      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	220c      	movs	r2, #12
 80029fc:	401a      	ands	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ec      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d211      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x19c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e020      	b.n	8002a7c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_RCC_ClockConfig+0x1a8>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a58:	f000 f820 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5c:	0001      	movs	r1, r0
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1a0>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	220f      	movs	r2, #15
 8002a66:	4013      	ands	r3, r2
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1ac>)
 8002a6a:	5cd3      	ldrb	r3, [r2, r3]
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1b0>)
 8002a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a74:	2003      	movs	r0, #3
 8002a76:	f7fe fea9 	bl	80017cc <HAL_InitTick>
  
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	00001388 	.word	0x00001388
 8002a90:	fffff8ff 	.word	0xfffff8ff
 8002a94:	080048dc 	.word	0x080048dc
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b08f      	sub	sp, #60	; 0x3c
 8002aa0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002aa2:	2314      	movs	r3, #20
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xec>)
 8002aa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002aaa:	c313      	stmia	r3!, {r0, r1, r4}
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4a36      	ldr	r2, [pc, #216]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002ab4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ab6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac8:	2300      	movs	r3, #0
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	220c      	movs	r2, #12
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d047      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xd4>
 8002ae0:	d849      	bhi.n	8002b76 <HAL_RCC_GetSysClockFreq+0xda>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x50>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x56>
 8002aea:	e044      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002af0:	e044      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	220f      	movs	r2, #15
 8002af8:	4013      	ands	r3, r2
 8002afa:	2214      	movs	r2, #20
 8002afc:	18ba      	adds	r2, r7, r2
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	220f      	movs	r2, #15
 8002b08:	4013      	ands	r3, r2
 8002b0a:	1d3a      	adds	r2, r7, #4
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b12:	23c0      	movs	r3, #192	; 0xc0
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	401a      	ands	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	025b      	lsls	r3, r3, #9
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b22:	481c      	ldr	r0, [pc, #112]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b24:	f7fd faf0 	bl	8000108 <__udivsi3>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	4353      	muls	r3, r2
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
 8002b32:	e01a      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	025b      	lsls	r3, r3, #9
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	23c0      	movs	r3, #192	; 0xc0
 8002b3e:	025b      	lsls	r3, r3, #9
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d109      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b46:	4814      	ldr	r0, [pc, #80]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b48:	f7fd fade 	bl	8000108 <__udivsi3>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	001a      	movs	r2, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	4353      	muls	r3, r2
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5a:	480e      	ldr	r0, [pc, #56]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5c:	f7fd fad4 	bl	8000108 <__udivsi3>
 8002b60:	0003      	movs	r3, r0
 8002b62:	001a      	movs	r2, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	4353      	muls	r3, r2
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b00f      	add	sp, #60	; 0x3c
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	0800483c 	.word	0x0800483c
 8002b8c:	0800484c 	.word	0x0800484c
 8002b90:	40021000 	.word	0x40021000
 8002b94:	007a1200 	.word	0x007a1200
 8002b98:	02dc6c00 	.word	0x02dc6c00

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	; (8002bac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002bb4:	f7ff fff2 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bb8:	0001      	movs	r1, r0
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc6:	5cd3      	ldrb	r3, [r2, r3]
 8002bc8:	40d9      	lsrs	r1, r3
 8002bca:	000b      	movs	r3, r1
}    
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	080048ec 	.word	0x080048ec

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002bf8:	e08e      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002bfa:	2017      	movs	r0, #23
 8002bfc:	183b      	adds	r3, r7, r0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c02:	4b6e      	ldr	r3, [pc, #440]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	055b      	lsls	r3, r3, #21
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d110      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b6b      	ldr	r3, [pc, #428]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	0549      	lsls	r1, r1, #21
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	61da      	str	r2, [r3, #28]
 8002c1c:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	055b      	lsls	r3, r3, #21
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2a:	183b      	adds	r3, r7, r0
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d11a      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3c:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	0049      	lsls	r1, r1, #1
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe fe05 	bl	8001858 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	e008      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fe00 	bl	8001858 <HAL_GetTick>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0a6      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b56      	ldr	r3, [pc, #344]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	2380      	movs	r3, #128	; 0x80
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c72:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	23c0      	movs	r3, #192	; 0xc0
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d034      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	23c0      	movs	r3, #192	; 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d02c      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c94:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	0249      	lsls	r1, r1, #9
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cb2:	4945      	ldr	r1, [pc, #276]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002cb4:	400a      	ands	r2, r1
 8002cb6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cb8:	4b40      	ldr	r3, [pc, #256]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe fdc7 	bl	8001858 <HAL_GetTick>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cce:	e009      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fdc2 	bl	8001858 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	4a3c      	ldr	r2, [pc, #240]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e067      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	4013      	ands	r3, r2
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d02:	2317      	movs	r3, #23
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d12:	492f      	ldr	r1, [pc, #188]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d009      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	2203      	movs	r2, #3
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d32:	430a      	orrs	r2, r1
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d50:	430a      	orrs	r2, r1
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	2210      	movs	r2, #16
 8002d64:	4393      	bics	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	4393      	bics	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	4393      	bics	r3, r2
 8002da6:	0019      	movs	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002dae:	430a      	orrs	r2, r1
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b006      	add	sp, #24
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	fffffcff 	.word	0xfffffcff
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	00001388 	.word	0x00001388
 8002dd0:	efffffff 	.word	0xefffffff
 8002dd4:	fffcffff 	.word	0xfffcffff

08002dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e0a8      	b.n	8002f3c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	2382      	movs	r3, #130	; 0x82
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d009      	beq.n	8002e12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
 8002e04:	e005      	b.n	8002e12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	225d      	movs	r2, #93	; 0x5d
 8002e1c:	5c9b      	ldrb	r3, [r3, r2]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	225c      	movs	r2, #92	; 0x5c
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fe fb84 	bl	800153c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	225d      	movs	r2, #93	; 0x5d
 8002e38:	2102      	movs	r1, #2
 8002e3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2140      	movs	r1, #64	; 0x40
 8002e48:	438a      	bics	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	23e0      	movs	r3, #224	; 0xe0
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d902      	bls.n	8002e5e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e002      	b.n	8002e64 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	015b      	lsls	r3, r3, #5
 8002e62:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	23f0      	movs	r3, #240	; 0xf0
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d008      	beq.n	8002e82 <HAL_SPI_Init+0xaa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	23e0      	movs	r3, #224	; 0xe0
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d002      	beq.n	8002e82 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	2382      	movs	r3, #130	; 0x82
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	2384      	movs	r3, #132	; 0x84
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	400b      	ands	r3, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6999      	ldr	r1, [r3, #24]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2138      	movs	r1, #56	; 0x38
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	400b      	ands	r3, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	0011      	movs	r1, r2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	401a      	ands	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2110      	movs	r1, #16
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2108      	movs	r1, #8
 8002efa:	400b      	ands	r3, r1
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	23f0      	movs	r3, #240	; 0xf0
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	400b      	ands	r3, r1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	015b      	lsls	r3, r3, #5
 8002f12:	401a      	ands	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4907      	ldr	r1, [pc, #28]	; (8002f44 <HAL_SPI_Init+0x16c>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	225d      	movs	r2, #93	; 0x5d
 8002f36:	2101      	movs	r1, #1
 8002f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	fffff7ff 	.word	0xfffff7ff

08002f48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	001a      	movs	r2, r3
 8002f56:	1cbb      	adds	r3, r7, #2
 8002f58:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f5e:	2323      	movs	r3, #35	; 0x23
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	225c      	movs	r2, #92	; 0x5c
 8002f6a:	5c9b      	ldrb	r3, [r3, r2]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x2c>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e1b5      	b.n	80032e0 <HAL_SPI_TransmitReceive+0x398>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	225c      	movs	r2, #92	; 0x5c
 8002f78:	2101      	movs	r1, #1
 8002f7a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7c:	f7fe fc6c 	bl	8001858 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f84:	201b      	movs	r0, #27
 8002f86:	183b      	adds	r3, r7, r0
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	215d      	movs	r1, #93	; 0x5d
 8002f8c:	5c52      	ldrb	r2, [r2, r1]
 8002f8e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f96:	2312      	movs	r3, #18
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	1cba      	adds	r2, r7, #2
 8002f9c:	8812      	ldrh	r2, [r2, #0]
 8002f9e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fa0:	183b      	adds	r3, r7, r0
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d011      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x84>
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	2382      	movs	r3, #130	; 0x82
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x7a>
 8002fba:	183b      	adds	r3, r7, r0
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d004      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002fc2:	2323      	movs	r3, #35	; 0x23
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fca:	e17e      	b.n	80032ca <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x98>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_SPI_TransmitReceive+0x98>
 8002fd8:	1cbb      	adds	r3, r7, #2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d104      	bne.n	8002fea <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002fe0:	2323      	movs	r3, #35	; 0x23
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fe8:	e16f      	b.n	80032ca <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	225d      	movs	r2, #93	; 0x5d
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	225d      	movs	r2, #93	; 0x5d
 8002ffa:	2105      	movs	r1, #5
 8002ffc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1cba      	adds	r2, r7, #2
 800300e:	2146      	movs	r1, #70	; 0x46
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1cba      	adds	r2, r7, #2
 8003018:	2144      	movs	r1, #68	; 0x44
 800301a:	8812      	ldrh	r2, [r2, #0]
 800301c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1cba      	adds	r2, r7, #2
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1cba      	adds	r2, r7, #2
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	23e0      	movs	r3, #224	; 0xe0
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	429a      	cmp	r2, r3
 800304a:	d908      	bls.n	800305e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	49a4      	ldr	r1, [pc, #656]	; (80032e8 <HAL_SPI_TransmitReceive+0x3a0>)
 8003058:	400a      	ands	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e008      	b.n	8003070 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0149      	lsls	r1, r1, #5
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	4013      	ands	r3, r2
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d007      	beq.n	800308e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2140      	movs	r1, #64	; 0x40
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	23e0      	movs	r3, #224	; 0xe0
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	429a      	cmp	r2, r3
 8003098:	d800      	bhi.n	800309c <HAL_SPI_TransmitReceive+0x154>
 800309a:	e07f      	b.n	800319c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x168>
 80030a4:	2312      	movs	r3, #18
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d000      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x168>
 80030ae:	e069      	b.n	8003184 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	1c9a      	adds	r2, r3, #2
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030d4:	e056      	b.n	8003184 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d11b      	bne.n	800311c <HAL_SPI_TransmitReceive+0x1d4>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_SPI_TransmitReceive+0x1d4>
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d113      	bne.n	800311c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	881a      	ldrh	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	1c9a      	adds	r2, r3, #2
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2201      	movs	r2, #1
 8003124:	4013      	ands	r3, r2
 8003126:	2b01      	cmp	r3, #1
 8003128:	d11c      	bne.n	8003164 <HAL_SPI_TransmitReceive+0x21c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2246      	movs	r2, #70	; 0x46
 800312e:	5a9b      	ldrh	r3, [r3, r2]
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	b292      	uxth	r2, r2
 8003142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	1c9a      	adds	r2, r3, #2
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2246      	movs	r2, #70	; 0x46
 8003152:	5a9b      	ldrh	r3, [r3, r2]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b299      	uxth	r1, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2246      	movs	r2, #70	; 0x46
 800315e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003164:	f7fe fb78 	bl	8001858 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003170:	429a      	cmp	r2, r3
 8003172:	d807      	bhi.n	8003184 <HAL_SPI_TransmitReceive+0x23c>
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	3301      	adds	r3, #1
 8003178:	d004      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800317a:	2323      	movs	r3, #35	; 0x23
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2203      	movs	r2, #3
 8003180:	701a      	strb	r2, [r3, #0]
        goto error;
 8003182:	e0a2      	b.n	80032ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1a3      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x18e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2246      	movs	r2, #70	; 0x46
 8003192:	5a9b      	ldrh	r3, [r3, r2]
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d19d      	bne.n	80030d6 <HAL_SPI_TransmitReceive+0x18e>
 800319a:	e085      	b.n	80032a8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x268>
 80031a4:	2312      	movs	r3, #18
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d000      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0x268>
 80031ae:	e070      	b.n	8003292 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d6:	e05c      	b.n	8003292 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d11c      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x2d8>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x2d8>
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d114      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	330c      	adds	r3, #12
 8003200:	7812      	ldrb	r2, [r2, #0]
 8003202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	4013      	ands	r3, r2
 800322a:	2b01      	cmp	r3, #1
 800322c:	d11e      	bne.n	800326c <HAL_SPI_TransmitReceive+0x324>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2246      	movs	r2, #70	; 0x46
 8003232:	5a9b      	ldrh	r3, [r3, r2]
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	001a      	movs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2246      	movs	r2, #70	; 0x46
 800325a:	5a9b      	ldrh	r3, [r3, r2]
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b299      	uxth	r1, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2246      	movs	r2, #70	; 0x46
 8003266:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800326c:	f7fe faf4 	bl	8001858 <HAL_GetTick>
 8003270:	0002      	movs	r2, r0
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003278:	429a      	cmp	r2, r3
 800327a:	d802      	bhi.n	8003282 <HAL_SPI_TransmitReceive+0x33a>
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	3301      	adds	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x340>
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d104      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003288:	2323      	movs	r3, #35	; 0x23
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2203      	movs	r2, #3
 800328e:	701a      	strb	r2, [r3, #0]
        goto error;
 8003290:	e01b      	b.n	80032ca <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d19d      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x290>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2246      	movs	r2, #70	; 0x46
 80032a0:	5a9b      	ldrh	r3, [r3, r2]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d197      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f94c 	bl	800354c <SPI_EndRxTxTransaction>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80032b8:	2323      	movs	r3, #35	; 0x23
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	661a      	str	r2, [r3, #96]	; 0x60
 80032c6:	e000      	b.n	80032ca <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80032c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	225d      	movs	r2, #93	; 0x5d
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	225c      	movs	r2, #92	; 0x5c
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032da:	2323      	movs	r3, #35	; 0x23
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	781b      	ldrb	r3, [r3, #0]
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b00a      	add	sp, #40	; 0x28
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	ffffefff 	.word	0xffffefff

080032ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032fc:	f7fe faac 	bl	8001858 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800330c:	f7fe faa4 	bl	8001858 <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003314:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	015b      	lsls	r3, r3, #5
 800331a:	0d1b      	lsrs	r3, r3, #20
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4353      	muls	r3, r2
 8003320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003322:	e058      	b.n	80033d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	3301      	adds	r3, #1
 8003328:	d055      	beq.n	80033d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332a:	f7fe fa95 	bl	8001858 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x54>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d142      	bne.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	21e0      	movs	r1, #224	; 0xe0
 800334c:	438a      	bics	r2, r1
 800334e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	2382      	movs	r3, #130	; 0x82
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	429a      	cmp	r2, r3
 800335a:	d113      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x98>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	429a      	cmp	r2, r3
 8003366:	d005      	beq.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	438a      	bics	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	429a      	cmp	r2, r3
 800338e:	d110      	bne.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	491a      	ldr	r1, [pc, #104]	; (8003404 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	0189      	lsls	r1, r1, #6
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	225d      	movs	r2, #93	; 0x5d
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	225c      	movs	r2, #92	; 0x5c
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e017      	b.n	80033f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	425a      	negs	r2, r3
 80033e6:	4153      	adcs	r3, r2
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	001a      	movs	r2, r3
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d197      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b008      	add	sp, #32
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	20000000 	.word	0x20000000
 8003404:	ffffdfff 	.word	0xffffdfff

08003408 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003416:	2317      	movs	r3, #23
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800341e:	f7fe fa1b 	bl	8001858 <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800342e:	f7fe fa13 	bl	8001858 <HAL_GetTick>
 8003432:	0003      	movs	r3, r0
 8003434:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	0013      	movs	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	189b      	adds	r3, r3, r2
 8003448:	00da      	lsls	r2, r3, #3
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	4353      	muls	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003454:	e068      	b.n	8003528 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	23c0      	movs	r3, #192	; 0xc0
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	429a      	cmp	r2, r3
 800345e:	d10a      	bne.n	8003476 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d107      	bne.n	8003476 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	2117      	movs	r1, #23
 800346e:	187b      	adds	r3, r7, r1
 8003470:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003472:	187b      	adds	r3, r7, r1
 8003474:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	d055      	beq.n	8003528 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800347c:	f7fe f9ec 	bl	8001858 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	429a      	cmp	r2, r3
 800348a:	d902      	bls.n	8003492 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d142      	bne.n	8003518 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	21e0      	movs	r1, #224	; 0xe0
 800349e:	438a      	bics	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	2382      	movs	r3, #130	; 0x82
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d113      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d005      	beq.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d107      	bne.n	80034d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	438a      	bics	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	429a      	cmp	r2, r3
 80034e0:	d110      	bne.n	8003504 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4916      	ldr	r1, [pc, #88]	; (8003548 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80034ee:	400a      	ands	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2180      	movs	r1, #128	; 0x80
 80034fe:	0189      	lsls	r1, r1, #6
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	225d      	movs	r2, #93	; 0x5d
 8003508:	2101      	movs	r1, #1
 800350a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	225c      	movs	r2, #92	; 0x5c
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e010      	b.n	800353a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3b01      	subs	r3, #1
 8003526:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d18e      	bne.n	8003456 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b00a      	add	sp, #40	; 0x28
 8003540:	bd80      	pop	{r7, pc}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	20000000 	.word	0x20000000
 8003548:	ffffdfff 	.word	0xffffdfff

0800354c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	23c0      	movs	r3, #192	; 0xc0
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	0013      	movs	r3, r2
 8003566:	2200      	movs	r2, #0
 8003568:	f7ff ff4e 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d007      	beq.n	8003580 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	2220      	movs	r2, #32
 8003576:	431a      	orrs	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e027      	b.n	80035d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	0013      	movs	r3, r2
 800358a:	2200      	movs	r2, #0
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	f7ff fead 	bl	80032ec <SPI_WaitFlagStateUntilTimeout>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d007      	beq.n	80035a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	2220      	movs	r2, #32
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e014      	b.n	80035d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	00d9      	lsls	r1, r3, #3
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0013      	movs	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	f7ff ff27 	bl	8003408 <SPI_WaitFifoStateUntilTimeout>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d007      	beq.n	80035ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	2220      	movs	r2, #32
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e000      	b.n	80035d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223d      	movs	r2, #61	; 0x3d
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223c      	movs	r2, #60	; 0x3c
 80035fa:	2100      	movs	r1, #0
 80035fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f7fd ffe7 	bl	80015d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223d      	movs	r2, #61	; 0x3d
 800360a:	2102      	movs	r1, #2
 800360c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f000 f94b 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2246      	movs	r2, #70	; 0x46
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223e      	movs	r2, #62	; 0x3e
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	223f      	movs	r2, #63	; 0x3f
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	; 0x40
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2241      	movs	r2, #65	; 0x41
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2242      	movs	r2, #66	; 0x42
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2243      	movs	r2, #67	; 0x43
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2244      	movs	r2, #68	; 0x44
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2245      	movs	r2, #69	; 0x45
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223d      	movs	r2, #61	; 0x3d
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223d      	movs	r2, #61	; 0x3d
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e033      	b.n	80036f8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	223d      	movs	r2, #61	; 0x3d
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_TIM_Base_Start+0x88>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00f      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d009      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <HAL_TIM_Base_Start+0x8c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIM_Base_Start+0x4a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_TIM_Base_Start+0x90>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d111      	bne.n	80036e6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2207      	movs	r2, #7
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d010      	beq.n	80036f6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e4:	e007      	b.n	80036f6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	430a      	orrs	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b004      	add	sp, #16
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40014000 	.word	0x40014000

0800370c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	230f      	movs	r3, #15
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	223c      	movs	r2, #60	; 0x3c
 8003722:	5c9b      	ldrb	r3, [r3, r2]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_TIM_ConfigClockSource+0x20>
 8003728:	2302      	movs	r3, #2
 800372a:	e0bc      	b.n	80038a6 <HAL_TIM_ConfigClockSource+0x19a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	223c      	movs	r2, #60	; 0x3c
 8003730:	2101      	movs	r1, #1
 8003732:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	223d      	movs	r2, #61	; 0x3d
 8003738:	2102      	movs	r1, #2
 800373a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2277      	movs	r2, #119	; 0x77
 8003748:	4393      	bics	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4a58      	ldr	r2, [pc, #352]	; (80038b0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2280      	movs	r2, #128	; 0x80
 8003762:	0192      	lsls	r2, r2, #6
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0xde>
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	0192      	lsls	r2, r2, #6
 800376c:	4293      	cmp	r3, r2
 800376e:	d900      	bls.n	8003772 <HAL_TIM_ConfigClockSource+0x66>
 8003770:	e088      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 8003772:	2280      	movs	r2, #128	; 0x80
 8003774:	0152      	lsls	r2, r2, #5
 8003776:	4293      	cmp	r3, r2
 8003778:	d100      	bne.n	800377c <HAL_TIM_ConfigClockSource+0x70>
 800377a:	e088      	b.n	800388e <HAL_TIM_ConfigClockSource+0x182>
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	0152      	lsls	r2, r2, #5
 8003780:	4293      	cmp	r3, r2
 8003782:	d900      	bls.n	8003786 <HAL_TIM_ConfigClockSource+0x7a>
 8003784:	e07e      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 8003786:	2b70      	cmp	r3, #112	; 0x70
 8003788:	d018      	beq.n	80037bc <HAL_TIM_ConfigClockSource+0xb0>
 800378a:	d900      	bls.n	800378e <HAL_TIM_ConfigClockSource+0x82>
 800378c:	e07a      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 800378e:	2b60      	cmp	r3, #96	; 0x60
 8003790:	d04f      	beq.n	8003832 <HAL_TIM_ConfigClockSource+0x126>
 8003792:	d900      	bls.n	8003796 <HAL_TIM_ConfigClockSource+0x8a>
 8003794:	e076      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 8003796:	2b50      	cmp	r3, #80	; 0x50
 8003798:	d03b      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0x106>
 800379a:	d900      	bls.n	800379e <HAL_TIM_ConfigClockSource+0x92>
 800379c:	e072      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d057      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0x146>
 80037a2:	d900      	bls.n	80037a6 <HAL_TIM_ConfigClockSource+0x9a>
 80037a4:	e06e      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 80037a6:	2b30      	cmp	r3, #48	; 0x30
 80037a8:	d063      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x166>
 80037aa:	d86b      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d060      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x166>
 80037b0:	d868      	bhi.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d05d      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x166>
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d05b      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x166>
 80037ba:	e063      	b.n	8003884 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6899      	ldr	r1, [r3, #8]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f000 f96c 	bl	8003aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2277      	movs	r2, #119	; 0x77
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	e052      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f000 f955 	bl	8003aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	01c9      	lsls	r1, r1, #7
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
      break;
 8003810:	e03e      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6859      	ldr	r1, [r3, #4]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	001a      	movs	r2, r3
 8003820:	f000 f8c8 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2150      	movs	r1, #80	; 0x50
 800382a:	0018      	movs	r0, r3
 800382c:	f000 f922 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003830:	e02e      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	001a      	movs	r2, r3
 8003840:	f000 f8e6 	bl	8003a10 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2160      	movs	r1, #96	; 0x60
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f912 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003850:	e01e      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	001a      	movs	r2, r3
 8003860:	f000 f8a8 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2140      	movs	r1, #64	; 0x40
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f902 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003870:	e00e      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0019      	movs	r1, r3
 800387c:	0010      	movs	r0, r2
 800387e:	f000 f8f9 	bl	8003a74 <TIM_ITRx_SetConfig>
      break;
 8003882:	e005      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003884:	230f      	movs	r3, #15
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
      break;
 800388c:	e000      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800388e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	223d      	movs	r2, #61	; 0x3d
 8003894:	2101      	movs	r1, #1
 8003896:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	223c      	movs	r2, #60	; 0x3c
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

  return status;
 80038a0:	230f      	movs	r3, #15
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	ffff00ff 	.word	0xffff00ff

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d008      	beq.n	80038de <TIM_Base_SetConfig+0x2a>
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	05db      	lsls	r3, r3, #23
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x2a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a30      	ldr	r2, [pc, #192]	; (800399c <TIM_Base_SetConfig+0xe8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2270      	movs	r2, #112	; 0x70
 80038e2:	4393      	bics	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	05db      	lsls	r3, r3, #23
 80038fe:	429a      	cmp	r2, r3
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a25      	ldr	r2, [pc, #148]	; (800399c <TIM_Base_SetConfig+0xe8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <TIM_Base_SetConfig+0xec>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <TIM_Base_SetConfig+0xf0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <TIM_Base_SetConfig+0xf4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0x76>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <TIM_Base_SetConfig+0xf8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <TIM_Base_SetConfig+0xfc>)
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	4393      	bics	r3, r2
 8003942:	001a      	movs	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <TIM_Base_SetConfig+0xe4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0xce>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a0d      	ldr	r2, [pc, #52]	; (80039a4 <TIM_Base_SetConfig+0xf0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0xce>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <TIM_Base_SetConfig+0xf4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0xce>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <TIM_Base_SetConfig+0xf8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d103      	bne.n	800398a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	615a      	str	r2, [r3, #20]
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b004      	add	sp, #16
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40012c00 	.word	0x40012c00
 800399c:	40000400 	.word	0x40000400
 80039a0:	40002000 	.word	0x40002000
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800
 80039b0:	fffffcff 	.word	0xfffffcff

080039b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4393      	bics	r3, r2
 80039ce:	001a      	movs	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	22f0      	movs	r2, #240	; 0xf0
 80039de:	4393      	bics	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	220a      	movs	r2, #10
 80039f0:	4393      	bics	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	621a      	str	r2, [r3, #32]
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b006      	add	sp, #24
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2210      	movs	r2, #16
 8003a22:	4393      	bics	r3, r2
 8003a24:	001a      	movs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <TIM_TI2_ConfigInputStage+0x60>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	22a0      	movs	r2, #160	; 0xa0
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b006      	add	sp, #24
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	ffff0fff 	.word	0xffff0fff

08003a74 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2270      	movs	r2, #112	; 0x70
 8003a88:	4393      	bics	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	2207      	movs	r2, #7
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <TIM_ETR_SetConfig+0x3c>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	ffff00ff 	.word	0xffff00ff

08003ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	223c      	movs	r2, #60	; 0x3c
 8003af6:	5c9b      	ldrb	r3, [r3, r2]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e047      	b.n	8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	223c      	movs	r2, #60	; 0x3c
 8003b04:	2101      	movs	r1, #1
 8003b06:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223d      	movs	r2, #61	; 0x3d
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2270      	movs	r2, #112	; 0x70
 8003b24:	4393      	bics	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	05db      	lsls	r3, r3, #23
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d10c      	bne.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	4393      	bics	r3, r2
 8003b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	223d      	movs	r2, #61	; 0x3d
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223c      	movs	r2, #60	; 0x3c
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b004      	add	sp, #16
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40014000 	.word	0x40014000

08003ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e044      	b.n	8003c40 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2274      	movs	r2, #116	; 0x74
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fd fd21 	bl	8001610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2224      	movs	r2, #36	; 0x24
 8003bd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2101      	movs	r1, #1
 8003be0:	438a      	bics	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f830 	bl	8003c4c <UART_SetConfig>
 8003bec:	0003      	movs	r3, r0
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e024      	b.n	8003c40 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f9ab 	bl	8003f5c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	490d      	ldr	r1, [pc, #52]	; (8003c48 <HAL_UART_Init+0xa4>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	212a      	movs	r1, #42	; 0x2a
 8003c22:	438a      	bics	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 fa43 	bl	80040c4 <UART_CheckIdleState>
 8003c3e:	0003      	movs	r3, r0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	ffffb7ff 	.word	0xffffb7ff

08003c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c54:	231e      	movs	r3, #30
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4aaf      	ldr	r2, [pc, #700]	; (8003f38 <UART_SetConfig+0x2ec>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	0019      	movs	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4aaa      	ldr	r2, [pc, #680]	; (8003f3c <UART_SetConfig+0x2f0>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	0019      	movs	r1, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4aa1      	ldr	r2, [pc, #644]	; (8003f40 <UART_SetConfig+0x2f4>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a9d      	ldr	r2, [pc, #628]	; (8003f44 <UART_SetConfig+0x2f8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d127      	bne.n	8003d22 <UART_SetConfig+0xd6>
 8003cd2:	4b9d      	ldr	r3, [pc, #628]	; (8003f48 <UART_SetConfig+0x2fc>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d00d      	beq.n	8003cfa <UART_SetConfig+0xae>
 8003cde:	d81b      	bhi.n	8003d18 <UART_SetConfig+0xcc>
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d014      	beq.n	8003d0e <UART_SetConfig+0xc2>
 8003ce4:	d818      	bhi.n	8003d18 <UART_SetConfig+0xcc>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <UART_SetConfig+0xa4>
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d00a      	beq.n	8003d04 <UART_SetConfig+0xb8>
 8003cee:	e013      	b.n	8003d18 <UART_SetConfig+0xcc>
 8003cf0:	231f      	movs	r3, #31
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e065      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003cfa:	231f      	movs	r3, #31
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2202      	movs	r2, #2
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e060      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d04:	231f      	movs	r3, #31
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2204      	movs	r2, #4
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e05b      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d0e:	231f      	movs	r3, #31
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	2208      	movs	r2, #8
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e056      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d18:	231f      	movs	r3, #31
 8003d1a:	18fb      	adds	r3, r7, r3
 8003d1c:	2210      	movs	r2, #16
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	e051      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a89      	ldr	r2, [pc, #548]	; (8003f4c <UART_SetConfig+0x300>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d134      	bne.n	8003d96 <UART_SetConfig+0x14a>
 8003d2c:	4b86      	ldr	r3, [pc, #536]	; (8003f48 <UART_SetConfig+0x2fc>)
 8003d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d30:	23c0      	movs	r3, #192	; 0xc0
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	4013      	ands	r3, r2
 8003d36:	22c0      	movs	r2, #192	; 0xc0
 8003d38:	0292      	lsls	r2, r2, #10
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d017      	beq.n	8003d6e <UART_SetConfig+0x122>
 8003d3e:	22c0      	movs	r2, #192	; 0xc0
 8003d40:	0292      	lsls	r2, r2, #10
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d822      	bhi.n	8003d8c <UART_SetConfig+0x140>
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	0292      	lsls	r2, r2, #10
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <UART_SetConfig+0x136>
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	0292      	lsls	r2, r2, #10
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d81a      	bhi.n	8003d8c <UART_SetConfig+0x140>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <UART_SetConfig+0x118>
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	0252      	lsls	r2, r2, #9
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00a      	beq.n	8003d78 <UART_SetConfig+0x12c>
 8003d62:	e013      	b.n	8003d8c <UART_SetConfig+0x140>
 8003d64:	231f      	movs	r3, #31
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e02b      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d6e:	231f      	movs	r3, #31
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e026      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d78:	231f      	movs	r3, #31
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e021      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d82:	231f      	movs	r3, #31
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	2208      	movs	r2, #8
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e01c      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d8c:	231f      	movs	r3, #31
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	2210      	movs	r2, #16
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e017      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6d      	ldr	r2, [pc, #436]	; (8003f50 <UART_SetConfig+0x304>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d104      	bne.n	8003daa <UART_SetConfig+0x15e>
 8003da0:	231f      	movs	r3, #31
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e00d      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a69      	ldr	r2, [pc, #420]	; (8003f54 <UART_SetConfig+0x308>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d104      	bne.n	8003dbe <UART_SetConfig+0x172>
 8003db4:	231f      	movs	r3, #31
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e003      	b.n	8003dc6 <UART_SetConfig+0x17a>
 8003dbe:	231f      	movs	r3, #31
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69da      	ldr	r2, [r3, #28]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d15d      	bne.n	8003e8e <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003dd2:	231f      	movs	r3, #31
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d015      	beq.n	8003e08 <UART_SetConfig+0x1bc>
 8003ddc:	dc18      	bgt.n	8003e10 <UART_SetConfig+0x1c4>
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00d      	beq.n	8003dfe <UART_SetConfig+0x1b2>
 8003de2:	dc15      	bgt.n	8003e10 <UART_SetConfig+0x1c4>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <UART_SetConfig+0x1a2>
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d005      	beq.n	8003df8 <UART_SetConfig+0x1ac>
 8003dec:	e010      	b.n	8003e10 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7fe fedf 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003df2:	0003      	movs	r3, r0
 8003df4:	61bb      	str	r3, [r7, #24]
        break;
 8003df6:	e012      	b.n	8003e1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <UART_SetConfig+0x30c>)
 8003dfa:	61bb      	str	r3, [r7, #24]
        break;
 8003dfc:	e00f      	b.n	8003e1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7fe fe4d 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8003e02:	0003      	movs	r3, r0
 8003e04:	61bb      	str	r3, [r7, #24]
        break;
 8003e06:	e00a      	b.n	8003e1e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	61bb      	str	r3, [r7, #24]
        break;
 8003e0e:	e006      	b.n	8003e1e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e14:	231e      	movs	r3, #30
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
        break;
 8003e1c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d100      	bne.n	8003e26 <UART_SetConfig+0x1da>
 8003e24:	e07b      	b.n	8003f1e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	005a      	lsls	r2, r3, #1
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	18d2      	adds	r2, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	0019      	movs	r1, r3
 8003e38:	0010      	movs	r0, r2
 8003e3a:	f7fc f965 	bl	8000108 <__udivsi3>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	d91c      	bls.n	8003e84 <UART_SetConfig+0x238>
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	025b      	lsls	r3, r3, #9
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d217      	bcs.n	8003e84 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	200e      	movs	r0, #14
 8003e5a:	183b      	adds	r3, r7, r0
 8003e5c:	210f      	movs	r1, #15
 8003e5e:	438a      	bics	r2, r1
 8003e60:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2207      	movs	r2, #7
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b299      	uxth	r1, r3
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	183a      	adds	r2, r7, r0
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	183a      	adds	r2, r7, r0
 8003e7e:	8812      	ldrh	r2, [r2, #0]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e04c      	b.n	8003f1e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003e84:	231e      	movs	r3, #30
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e047      	b.n	8003f1e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8e:	231f      	movs	r3, #31
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d015      	beq.n	8003ec4 <UART_SetConfig+0x278>
 8003e98:	dc18      	bgt.n	8003ecc <UART_SetConfig+0x280>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d00d      	beq.n	8003eba <UART_SetConfig+0x26e>
 8003e9e:	dc15      	bgt.n	8003ecc <UART_SetConfig+0x280>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <UART_SetConfig+0x25e>
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d005      	beq.n	8003eb4 <UART_SetConfig+0x268>
 8003ea8:	e010      	b.n	8003ecc <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eaa:	f7fe fe81 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	61bb      	str	r3, [r7, #24]
        break;
 8003eb2:	e012      	b.n	8003eda <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb4:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <UART_SetConfig+0x30c>)
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e00f      	b.n	8003eda <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eba:	f7fe fdef 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	61bb      	str	r3, [r7, #24]
        break;
 8003ec2:	e00a      	b.n	8003eda <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	61bb      	str	r3, [r7, #24]
        break;
 8003eca:	e006      	b.n	8003eda <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ed0:	231e      	movs	r3, #30
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
        break;
 8003ed8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01e      	beq.n	8003f1e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	085a      	lsrs	r2, r3, #1
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	18d2      	adds	r2, r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0019      	movs	r1, r3
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	f7fc f909 	bl	8000108 <__udivsi3>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0f      	cmp	r3, #15
 8003f00:	d909      	bls.n	8003f16 <UART_SetConfig+0x2ca>
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	025b      	lsls	r3, r3, #9
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d204      	bcs.n	8003f16 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	e003      	b.n	8003f1e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003f16:	231e      	movs	r3, #30
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f2a:	231e      	movs	r3, #30
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b008      	add	sp, #32
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	efff69f3 	.word	0xefff69f3
 8003f3c:	ffffcfff 	.word	0xffffcfff
 8003f40:	fffff4ff 	.word	0xfffff4ff
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40004400 	.word	0x40004400
 8003f50:	40004800 	.word	0x40004800
 8003f54:	40004c00 	.word	0x40004c00
 8003f58:	007a1200 	.word	0x007a1200

08003f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4a4a      	ldr	r2, [pc, #296]	; (80040a0 <UART_AdvFeatureConfig+0x144>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a43      	ldr	r2, [pc, #268]	; (80040a4 <UART_AdvFeatureConfig+0x148>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2204      	movs	r2, #4
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <UART_AdvFeatureConfig+0x14c>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	2208      	movs	r2, #8
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4a34      	ldr	r2, [pc, #208]	; (80040ac <UART_AdvFeatureConfig+0x150>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d00b      	beq.n	800400e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <UART_AdvFeatureConfig+0x154>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	0019      	movs	r1, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2220      	movs	r2, #32
 8004014:	4013      	ands	r3, r2
 8004016:	d00b      	beq.n	8004030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <UART_AdvFeatureConfig+0x158>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	4013      	ands	r3, r2
 8004038:	d01d      	beq.n	8004076 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <UART_AdvFeatureConfig+0x15c>)
 8004042:	4013      	ands	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	035b      	lsls	r3, r3, #13
 800405a:	429a      	cmp	r2, r3
 800405c:	d10b      	bne.n	8004076 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <UART_AdvFeatureConfig+0x160>)
 8004066:	4013      	ands	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	4013      	ands	r3, r2
 800407e:	d00b      	beq.n	8004098 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <UART_AdvFeatureConfig+0x164>)
 8004088:	4013      	ands	r3, r2
 800408a:	0019      	movs	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
  }
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b002      	add	sp, #8
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	fffdffff 	.word	0xfffdffff
 80040a4:	fffeffff 	.word	0xfffeffff
 80040a8:	fffbffff 	.word	0xfffbffff
 80040ac:	ffff7fff 	.word	0xffff7fff
 80040b0:	ffffefff 	.word	0xffffefff
 80040b4:	ffffdfff 	.word	0xffffdfff
 80040b8:	ffefffff 	.word	0xffefffff
 80040bc:	ff9fffff 	.word	0xff9fffff
 80040c0:	fff7ffff 	.word	0xfff7ffff

080040c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	2100      	movs	r1, #0
 80040d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d4:	f7fd fbc0 	bl	8001858 <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2208      	movs	r2, #8
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d10c      	bne.n	8004104 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	0391      	lsls	r1, r2, #14
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <UART_CheckIdleState+0x8c>)
 80040f4:	9200      	str	r2, [sp, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f000 f82c 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e021      	b.n	8004148 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
 800410e:	2b04      	cmp	r3, #4
 8004110:	d10c      	bne.n	800412c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	03d1      	lsls	r1, r2, #15
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <UART_CheckIdleState+0x8c>)
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	f000 f818 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d001      	beq.n	800412c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e00d      	b.n	8004148 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2274      	movs	r2, #116	; 0x74
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}
 8004150:	01ffffff 	.word	0x01ffffff

08004154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b094      	sub	sp, #80	; 0x50
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	e0a3      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004168:	3301      	adds	r3, #1
 800416a:	d100      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0x1a>
 800416c:	e09f      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fd fb73 	bl	8001858 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <UART_WaitOnFlagUntilTimeout+0x30>
 800417e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004180:	2b00      	cmp	r3, #0
 8004182:	d13d      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	494c      	ldr	r1, [pc, #304]	; (80042d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
 80041c0:	2301      	movs	r3, #1
 80041c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	438a      	bics	r2, r1
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2274      	movs	r2, #116	; 0x74
 80041f8:	2100      	movs	r1, #0
 80041fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e067      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2204      	movs	r2, #4
 8004208:	4013      	ands	r3, r2
 800420a:	d050      	beq.n	80042ae <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	401a      	ands	r2, r3
 8004218:	2380      	movs	r3, #128	; 0x80
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	429a      	cmp	r2, r3
 800421e:	d146      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	613b      	str	r3, [r7, #16]
  return(result);
 8004230:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4923      	ldr	r1, [pc, #140]	; (80042d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004252:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425c:	f3ef 8310 	mrs	r3, PRIMASK
 8004260:	61fb      	str	r3, [r7, #28]
  return(result);
 8004262:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
 8004266:	2301      	movs	r3, #1
 8004268:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2101      	movs	r1, #1
 800427e:	438a      	bics	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	2120      	movs	r1, #32
 80042a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2274      	movs	r2, #116	; 0x74
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e010      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	425a      	negs	r2, r3
 80042be:	4153      	adcs	r3, r2
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	001a      	movs	r2, r3
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d100      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x17a>
 80042cc:	e74b      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b014      	add	sp, #80	; 0x50
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	fffffe5f 	.word	0xfffffe5f

080042dc <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>:
#include "can_lib.h"

namespace PSR
{

CANBus::CANBus(CANBus::Interface& interface, const CANBus::Config& config)
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
    : _interface(interface), _config(config), _rxCallback(NULL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042f6:	c313      	stmia	r3!, {r0, r1, r4}
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	611a      	str	r2, [r3, #16]
{
}
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b005      	add	sp, #20
 8004306:	bd90      	pop	{r4, r7, pc}

08004308 <_ZN3PSR6CANBus4InitEv>:

void CANBus::Init()
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	; 0x30
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;

    // Config filter ranges
    filter.FilterMaskIdLow  = (uint16_t)this->_config.FilterMask;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	b29b      	uxth	r3, r3
 8004316:	001a      	movs	r2, r3
 8004318:	2108      	movs	r1, #8
 800431a:	187b      	adds	r3, r7, r1
 800431c:	60da      	str	r2, [r3, #12]
    filter.FilterMaskIdHigh = (uint16_t)(this->_config.FilterMask >> 16);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b29b      	uxth	r3, r3
 8004326:	001a      	movs	r2, r3
 8004328:	187b      	adds	r3, r7, r1
 800432a:	609a      	str	r2, [r3, #8]
    filter.FilterMode       = CAN_FILTERMODE_IDLIST;
 800432c:	187b      	adds	r3, r7, r1
 800432e:	2201      	movs	r2, #1
 8004330:	619a      	str	r2, [r3, #24]

    // Config filter banks
    filter.FilterBank           = 0;
 8004332:	187b      	adds	r3, r7, r1
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004338:	187b      	adds	r3, r7, r1
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
    filter.FilterActivation     = ENABLE;
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2201      	movs	r2, #1
 8004342:	621a      	str	r2, [r3, #32]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2201      	movs	r2, #1
 8004348:	61da      	str	r2, [r3, #28]

    // TODO: Fully understand filter setup
    // HAL_CAN_ConfigFilter(this->_interface, &filter);

    this->_interface.Init.AutoRetransmission = this->_config.AutoRetransmit ? ENABLE : DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7a1b      	ldrb	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <_ZN3PSR6CANBus4InitEv+0x4e>
 8004352:	2201      	movs	r2, #1
 8004354:	e000      	b.n	8004358 <_ZN3PSR6CANBus4InitEv+0x50>
 8004356:	2200      	movs	r2, #0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	76da      	strb	r2, [r3, #27]
    HAL_CAN_Start(&this->_interface);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	0018      	movs	r0, r3
 8004364:	f7fd fba4 	bl	8001ab0 <HAL_CAN_Start>
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	b00c      	add	sp, #48	; 0x30
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE>:

CANBus::TransmitStatus CANBus::Transmit(const Frame& frame)
{
 8004370:	b5b0      	push	{r4, r5, r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;

    while (HAL_CAN_IsTxMessagePending(&this->_interface, CAN_TX_MAILBOX0 | CAN_TX_MAILBOX1 | CAN_TX_MAILBOX2))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2107      	movs	r1, #7
 8004380:	0018      	movs	r0, r3
 8004382:	f7fd fcb9 	bl	8001cf8 <HAL_CAN_IsTxMessagePending>
 8004386:	0003      	movs	r3, r0
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	4193      	sbcs	r3, r2
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d000      	beq.n	8004394 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x24>
 8004392:	e7f2      	b.n	800437a <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xa>
    {
    }
    HAL_Delay(1);
 8004394:	2001      	movs	r0, #1
 8004396:	f7fd fa69 	bl	800186c <HAL_Delay>

    txHeader.ExtId = frame.IsExtended ? frame.Id & CANBus::EXT_ID_MASK : 0;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	795b      	ldrb	r3, [r3, #5]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x3c>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	e000      	b.n	80043ae <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x3e>
 80043ac:	2200      	movs	r2, #0
 80043ae:	230c      	movs	r3, #12
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	605a      	str	r2, [r3, #4]
    txHeader.StdId = frame.IsExtended ? 0 : frame.Id & CANBus::STD_ID_MASK;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	795b      	ldrb	r3, [r3, #5]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x50>
 80043bc:	2200      	movs	r2, #0
 80043be:	e003      	b.n	80043c8 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x58>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	055b      	lsls	r3, r3, #21
 80043c6:	0d5a      	lsrs	r2, r3, #21
 80043c8:	230c      	movs	r3, #12
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	601a      	str	r2, [r3, #0]
    txHeader.IDE   = frame.IsExtended ? CAN_ID_EXT : CAN_ID_STD;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	795b      	ldrb	r3, [r3, #5]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x6a>
 80043d6:	2204      	movs	r2, #4
 80043d8:	e000      	b.n	80043dc <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x6c>
 80043da:	2200      	movs	r2, #0
 80043dc:	210c      	movs	r1, #12
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	609a      	str	r2, [r3, #8]
    txHeader.DLC   = frame.Length;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	611a      	str	r2, [r3, #16]
    txHeader.RTR   = frame.IsRTR ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x86>
 80043f2:	2202      	movs	r2, #2
 80043f4:	e000      	b.n	80043f8 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0x88>
 80043f6:	2200      	movs	r2, #0
 80043f8:	210c      	movs	r1, #12
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	60da      	str	r2, [r3, #12]

    uint32_t mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&this->_interface, &txHeader, (uint8_t*)frame.Data.Bytes, &mailbox);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3310      	adds	r3, #16
 8004406:	001a      	movs	r2, r3
 8004408:	2527      	movs	r5, #39	; 0x27
 800440a:	197c      	adds	r4, r7, r5
 800440c:	2308      	movs	r3, #8
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	1879      	adds	r1, r7, r1
 8004412:	f7fd fb93 	bl	8001b3c <HAL_CAN_AddTxMessage>
 8004416:	0003      	movs	r3, r0
 8004418:	7023      	strb	r3, [r4, #0]

    switch (status)
 800441a:	197b      	adds	r3, r7, r5
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xb8>
 8004422:	2b01      	cmp	r3, #1
 8004424:	d002      	beq.n	800442c <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xbc>
 8004426:	e003      	b.n	8004430 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc0>
    {
    case HAL_OK:
        return CANBus::Success;
 8004428:	2301      	movs	r3, #1
 800442a:	e002      	b.n	8004432 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc2>
    case HAL_ERROR:
        return CANBus::Error;
 800442c:	2302      	movs	r3, #2
 800442e:	e000      	b.n	8004432 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE+0xc2>
    default:
        return CANBus::Unknown;
 8004430:	2300      	movs	r3, #0
    }
}
 8004432:	0018      	movs	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	b00a      	add	sp, #40	; 0x28
 8004438:	bdb0      	pop	{r4, r5, r7, pc}

0800443a <_ZN3PSR7VescCANC1ERNS_6CANBusEh>:
#include "can_lib.h"

namespace PSR
{

VescCAN::VescCAN(CANBus& can, const uint8_t controllerId)
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	1dfb      	adds	r3, r7, #7
 8004446:	701a      	strb	r2, [r3, #0]
    : _can(can), _controllerId(controllerId)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1dfa      	adds	r2, r7, #7
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	711a      	strb	r2, [r3, #4]
{
}
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b004      	add	sp, #16
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZN3PSR7VescCAN8CreateIdEm>:

uint32_t VescCAN::CreateId(uint32_t packet)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
    return this->_controllerId | (uint32_t)(packet) << 8;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	791b      	ldrb	r3, [r3, #4]
 800446e:	001a      	movs	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	4313      	orrs	r3, r2
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZN3PSRL22ReverseEndiannessInt32El>:

static int32_t ReverseEndiannessInt32(int32_t value)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
    uint32_t b0 = (value >> 24) & 0xFF;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0e1b      	lsrs	r3, r3, #24
 800448a:	617b      	str	r3, [r7, #20]
    uint32_t b1 = (value >> 16) & 0xFF;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	141b      	asrs	r3, r3, #16
 8004490:	001a      	movs	r2, r3
 8004492:	23ff      	movs	r3, #255	; 0xff
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    uint32_t b2 = (value >> 8) & 0xFF;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	121b      	asrs	r3, r3, #8
 800449c:	001a      	movs	r2, r3
 800449e:	23ff      	movs	r3, #255	; 0xff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
    uint32_t b3 = (value >> 0) & 0xFF;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	22ff      	movs	r2, #255	; 0xff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    return (b3 << 24) | (b2 << 16) | (b1 << 8) | (b0 << 0);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	061a      	lsls	r2, r3, #24
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	431a      	orrs	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	4313      	orrs	r3, r2
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZN3PSR7VescCAN12SetDutyCycleEf>:

    return (b3 << 24) | (b2 << 16) | (b1 << 8) | (b0 << 0);
}

void VescCAN::SetDutyCycle(float duty)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b08b      	sub	sp, #44	; 0x2c
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
    const uint32_t dutyMultiplier = 100000;
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <_ZN3PSR7VescCAN12SetDutyCycleEf+0x6c>)
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t frameSize      = 4;
 80044d6:	2304      	movs	r3, #4
 80044d8:	623b      	str	r3, [r7, #32]

    CANBus::Frame frame;
    frame.IsExtended = true;
 80044da:	2408      	movs	r4, #8
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	2201      	movs	r2, #1
 80044e0:	715a      	strb	r2, [r3, #5]
    frame.IsRTR      = false;
 80044e2:	193b      	adds	r3, r7, r4
 80044e4:	2200      	movs	r2, #0
 80044e6:	711a      	strb	r2, [r3, #4]
    frame.Id         = CreateId(PacketId::SET_DUTY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2100      	movs	r1, #0
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7ff ffb7 	bl	8004460 <_ZN3PSR7VescCAN8CreateIdEm>
 80044f2:	0002      	movs	r2, r0
 80044f4:	193b      	adds	r3, r7, r4
 80044f6:	601a      	str	r2, [r3, #0]
    frame.Length     = frameSize;
 80044f8:	193b      	adds	r3, r7, r4
 80044fa:	2204      	movs	r2, #4
 80044fc:	609a      	str	r2, [r3, #8]
    frame.Data.Lower = ReverseEndiannessInt32((int32_t)(duty * dutyMultiplier));
 80044fe:	490e      	ldr	r1, [pc, #56]	; (8004538 <_ZN3PSR7VescCAN12SetDutyCycleEf+0x70>)
 8004500:	6838      	ldr	r0, [r7, #0]
 8004502:	f7fb fe8d 	bl	8000220 <__aeabi_fmul>
 8004506:	1c03      	adds	r3, r0, #0
 8004508:	1c18      	adds	r0, r3, #0
 800450a:	f7fb ffaf 	bl	800046c <__aeabi_f2iz>
 800450e:	0003      	movs	r3, r0
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff ffb4 	bl	800447e <_ZN3PSRL22ReverseEndiannessInt32El>
 8004516:	0003      	movs	r3, r0
 8004518:	001a      	movs	r2, r3
 800451a:	193b      	adds	r3, r7, r4
 800451c:	611a      	str	r2, [r3, #16]

    this->_can.Transmit(frame);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	193a      	adds	r2, r7, r4
 8004524:	0011      	movs	r1, r2
 8004526:	0018      	movs	r0, r3
 8004528:	f7ff ff22 	bl	8004370 <_ZN3PSR6CANBus8TransmitERKNS0_5FrameE>
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	b00b      	add	sp, #44	; 0x2c
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	000186a0 	.word	0x000186a0
 8004538:	47c35000 	.word	0x47c35000

0800453c <_Znwj>:
 800453c:	b510      	push	{r4, lr}
 800453e:	1e04      	subs	r4, r0, #0
 8004540:	d100      	bne.n	8004544 <_Znwj+0x8>
 8004542:	3401      	adds	r4, #1
 8004544:	0020      	movs	r0, r4
 8004546:	f000 f843 	bl	80045d0 <malloc>
 800454a:	2800      	cmp	r0, #0
 800454c:	d107      	bne.n	800455e <_Znwj+0x22>
 800454e:	f000 f807 	bl	8004560 <_ZSt15get_new_handlerv>
 8004552:	2800      	cmp	r0, #0
 8004554:	d101      	bne.n	800455a <_Znwj+0x1e>
 8004556:	f000 f809 	bl	800456c <abort>
 800455a:	4780      	blx	r0
 800455c:	e7f2      	b.n	8004544 <_Znwj+0x8>
 800455e:	bd10      	pop	{r4, pc}

08004560 <_ZSt15get_new_handlerv>:
 8004560:	4b01      	ldr	r3, [pc, #4]	; (8004568 <_ZSt15get_new_handlerv+0x8>)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	4770      	bx	lr
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	200001f0 	.word	0x200001f0

0800456c <abort>:
 800456c:	2006      	movs	r0, #6
 800456e:	b510      	push	{r4, lr}
 8004570:	f000 f914 	bl	800479c <raise>
 8004574:	2001      	movs	r0, #1
 8004576:	f000 f953 	bl	8004820 <_exit>
	...

0800457c <__errno>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <__errno+0x8>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	2000000c 	.word	0x2000000c

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	2600      	movs	r6, #0
 800458c:	4d0c      	ldr	r5, [pc, #48]	; (80045c0 <__libc_init_array+0x38>)
 800458e:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	2600      	movs	r6, #0
 800459a:	f000 f943 	bl	8004824 <_init>
 800459e:	4d0a      	ldr	r5, [pc, #40]	; (80045c8 <__libc_init_array+0x40>)
 80045a0:	4c0a      	ldr	r4, [pc, #40]	; (80045cc <__libc_init_array+0x44>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	00b3      	lsls	r3, r6, #2
 80045ae:	58eb      	ldr	r3, [r5, r3]
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	00b3      	lsls	r3, r6, #2
 80045b8:	58eb      	ldr	r3, [r5, r3]
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	080048f4 	.word	0x080048f4
 80045c4:	080048f4 	.word	0x080048f4
 80045c8:	080048f4 	.word	0x080048f4
 80045cc:	080048f8 	.word	0x080048f8

080045d0 <malloc>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <malloc+0x10>)
 80045d4:	0001      	movs	r1, r0
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	f000 f82e 	bl	8004638 <_malloc_r>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <memset>:
 80045e4:	0003      	movs	r3, r0
 80045e6:	1882      	adds	r2, r0, r2
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	7019      	strb	r1, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <sbrk_aligned>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4e0f      	ldr	r6, [pc, #60]	; (8004634 <sbrk_aligned+0x40>)
 80045f8:	000d      	movs	r5, r1
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	0004      	movs	r4, r0
 80045fe:	2900      	cmp	r1, #0
 8004600:	d102      	bne.n	8004608 <sbrk_aligned+0x14>
 8004602:	f000 f88f 	bl	8004724 <_sbrk_r>
 8004606:	6030      	str	r0, [r6, #0]
 8004608:	0029      	movs	r1, r5
 800460a:	0020      	movs	r0, r4
 800460c:	f000 f88a 	bl	8004724 <_sbrk_r>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d00a      	beq.n	800462a <sbrk_aligned+0x36>
 8004614:	2303      	movs	r3, #3
 8004616:	1cc5      	adds	r5, r0, #3
 8004618:	439d      	bics	r5, r3
 800461a:	42a8      	cmp	r0, r5
 800461c:	d007      	beq.n	800462e <sbrk_aligned+0x3a>
 800461e:	1a29      	subs	r1, r5, r0
 8004620:	0020      	movs	r0, r4
 8004622:	f000 f87f 	bl	8004724 <_sbrk_r>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d101      	bne.n	800462e <sbrk_aligned+0x3a>
 800462a:	2501      	movs	r5, #1
 800462c:	426d      	negs	r5, r5
 800462e:	0028      	movs	r0, r5
 8004630:	bd70      	pop	{r4, r5, r6, pc}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	200001f8 	.word	0x200001f8

08004638 <_malloc_r>:
 8004638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800463a:	2203      	movs	r2, #3
 800463c:	1ccb      	adds	r3, r1, #3
 800463e:	4393      	bics	r3, r2
 8004640:	3308      	adds	r3, #8
 8004642:	0006      	movs	r6, r0
 8004644:	001f      	movs	r7, r3
 8004646:	2b0c      	cmp	r3, #12
 8004648:	d232      	bcs.n	80046b0 <_malloc_r+0x78>
 800464a:	270c      	movs	r7, #12
 800464c:	42b9      	cmp	r1, r7
 800464e:	d831      	bhi.n	80046b4 <_malloc_r+0x7c>
 8004650:	0030      	movs	r0, r6
 8004652:	f000 f8c3 	bl	80047dc <__malloc_lock>
 8004656:	4d32      	ldr	r5, [pc, #200]	; (8004720 <_malloc_r+0xe8>)
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	001c      	movs	r4, r3
 800465c:	2c00      	cmp	r4, #0
 800465e:	d12e      	bne.n	80046be <_malloc_r+0x86>
 8004660:	0039      	movs	r1, r7
 8004662:	0030      	movs	r0, r6
 8004664:	f7ff ffc6 	bl	80045f4 <sbrk_aligned>
 8004668:	0004      	movs	r4, r0
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	d11e      	bne.n	80046ac <_malloc_r+0x74>
 800466e:	682c      	ldr	r4, [r5, #0]
 8004670:	0025      	movs	r5, r4
 8004672:	2d00      	cmp	r5, #0
 8004674:	d14a      	bne.n	800470c <_malloc_r+0xd4>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0029      	movs	r1, r5
 800467a:	18e3      	adds	r3, r4, r3
 800467c:	0030      	movs	r0, r6
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f000 f850 	bl	8004724 <_sbrk_r>
 8004684:	9b01      	ldr	r3, [sp, #4]
 8004686:	4283      	cmp	r3, r0
 8004688:	d143      	bne.n	8004712 <_malloc_r+0xda>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	3703      	adds	r7, #3
 800468e:	1aff      	subs	r7, r7, r3
 8004690:	2303      	movs	r3, #3
 8004692:	439f      	bics	r7, r3
 8004694:	3708      	adds	r7, #8
 8004696:	2f0c      	cmp	r7, #12
 8004698:	d200      	bcs.n	800469c <_malloc_r+0x64>
 800469a:	270c      	movs	r7, #12
 800469c:	0039      	movs	r1, r7
 800469e:	0030      	movs	r0, r6
 80046a0:	f7ff ffa8 	bl	80045f4 <sbrk_aligned>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d034      	beq.n	8004712 <_malloc_r+0xda>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	19df      	adds	r7, r3, r7
 80046ac:	6027      	str	r7, [r4, #0]
 80046ae:	e013      	b.n	80046d8 <_malloc_r+0xa0>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dacb      	bge.n	800464c <_malloc_r+0x14>
 80046b4:	230c      	movs	r3, #12
 80046b6:	2500      	movs	r5, #0
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	0028      	movs	r0, r5
 80046bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	1bd1      	subs	r1, r2, r7
 80046c2:	d420      	bmi.n	8004706 <_malloc_r+0xce>
 80046c4:	290b      	cmp	r1, #11
 80046c6:	d917      	bls.n	80046f8 <_malloc_r+0xc0>
 80046c8:	19e2      	adds	r2, r4, r7
 80046ca:	6027      	str	r7, [r4, #0]
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d111      	bne.n	80046f4 <_malloc_r+0xbc>
 80046d0:	602a      	str	r2, [r5, #0]
 80046d2:	6863      	ldr	r3, [r4, #4]
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	6053      	str	r3, [r2, #4]
 80046d8:	0030      	movs	r0, r6
 80046da:	0025      	movs	r5, r4
 80046dc:	f000 f886 	bl	80047ec <__malloc_unlock>
 80046e0:	2207      	movs	r2, #7
 80046e2:	350b      	adds	r5, #11
 80046e4:	1d23      	adds	r3, r4, #4
 80046e6:	4395      	bics	r5, r2
 80046e8:	1aea      	subs	r2, r5, r3
 80046ea:	429d      	cmp	r5, r3
 80046ec:	d0e5      	beq.n	80046ba <_malloc_r+0x82>
 80046ee:	1b5b      	subs	r3, r3, r5
 80046f0:	50a3      	str	r3, [r4, r2]
 80046f2:	e7e2      	b.n	80046ba <_malloc_r+0x82>
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	e7ec      	b.n	80046d2 <_malloc_r+0x9a>
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	d101      	bne.n	8004702 <_malloc_r+0xca>
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	e7ea      	b.n	80046d8 <_malloc_r+0xa0>
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e7e8      	b.n	80046d8 <_malloc_r+0xa0>
 8004706:	0023      	movs	r3, r4
 8004708:	6864      	ldr	r4, [r4, #4]
 800470a:	e7a7      	b.n	800465c <_malloc_r+0x24>
 800470c:	002c      	movs	r4, r5
 800470e:	686d      	ldr	r5, [r5, #4]
 8004710:	e7af      	b.n	8004672 <_malloc_r+0x3a>
 8004712:	230c      	movs	r3, #12
 8004714:	0030      	movs	r0, r6
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	f000 f868 	bl	80047ec <__malloc_unlock>
 800471c:	e7cd      	b.n	80046ba <_malloc_r+0x82>
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	200001f4 	.word	0x200001f4

08004724 <_sbrk_r>:
 8004724:	2300      	movs	r3, #0
 8004726:	b570      	push	{r4, r5, r6, lr}
 8004728:	4d06      	ldr	r5, [pc, #24]	; (8004744 <_sbrk_r+0x20>)
 800472a:	0004      	movs	r4, r0
 800472c:	0008      	movs	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fc ffd2 	bl	80016d8 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d103      	bne.n	8004740 <_sbrk_r+0x1c>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d000      	beq.n	8004740 <_sbrk_r+0x1c>
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	bd70      	pop	{r4, r5, r6, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	200001fc 	.word	0x200001fc

08004748 <_raise_r>:
 8004748:	b570      	push	{r4, r5, r6, lr}
 800474a:	0004      	movs	r4, r0
 800474c:	000d      	movs	r5, r1
 800474e:	291f      	cmp	r1, #31
 8004750:	d904      	bls.n	800475c <_raise_r+0x14>
 8004752:	2316      	movs	r3, #22
 8004754:	6003      	str	r3, [r0, #0]
 8004756:	2001      	movs	r0, #1
 8004758:	4240      	negs	r0, r0
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <_raise_r+0x24>
 8004762:	008a      	lsls	r2, r1, #2
 8004764:	189b      	adds	r3, r3, r2
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	2a00      	cmp	r2, #0
 800476a:	d108      	bne.n	800477e <_raise_r+0x36>
 800476c:	0020      	movs	r0, r4
 800476e:	f000 f831 	bl	80047d4 <_getpid_r>
 8004772:	002a      	movs	r2, r5
 8004774:	0001      	movs	r1, r0
 8004776:	0020      	movs	r0, r4
 8004778:	f000 f81a 	bl	80047b0 <_kill_r>
 800477c:	e7ed      	b.n	800475a <_raise_r+0x12>
 800477e:	2000      	movs	r0, #0
 8004780:	2a01      	cmp	r2, #1
 8004782:	d0ea      	beq.n	800475a <_raise_r+0x12>
 8004784:	1c51      	adds	r1, r2, #1
 8004786:	d103      	bne.n	8004790 <_raise_r+0x48>
 8004788:	2316      	movs	r3, #22
 800478a:	3001      	adds	r0, #1
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	e7e4      	b.n	800475a <_raise_r+0x12>
 8004790:	2400      	movs	r4, #0
 8004792:	0028      	movs	r0, r5
 8004794:	601c      	str	r4, [r3, #0]
 8004796:	4790      	blx	r2
 8004798:	0020      	movs	r0, r4
 800479a:	e7de      	b.n	800475a <_raise_r+0x12>

0800479c <raise>:
 800479c:	b510      	push	{r4, lr}
 800479e:	4b03      	ldr	r3, [pc, #12]	; (80047ac <raise+0x10>)
 80047a0:	0001      	movs	r1, r0
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	f7ff ffd0 	bl	8004748 <_raise_r>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	2000000c 	.word	0x2000000c

080047b0 <_kill_r>:
 80047b0:	2300      	movs	r3, #0
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	4d06      	ldr	r5, [pc, #24]	; (80047d0 <_kill_r+0x20>)
 80047b6:	0004      	movs	r4, r0
 80047b8:	0008      	movs	r0, r1
 80047ba:	0011      	movs	r1, r2
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	f000 f827 	bl	8004810 <_kill>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d103      	bne.n	80047ce <_kill_r+0x1e>
 80047c6:	682b      	ldr	r3, [r5, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d000      	beq.n	80047ce <_kill_r+0x1e>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	200001fc 	.word	0x200001fc

080047d4 <_getpid_r>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	f000 f813 	bl	8004800 <_getpid>
 80047da:	bd10      	pop	{r4, pc}

080047dc <__malloc_lock>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	4802      	ldr	r0, [pc, #8]	; (80047e8 <__malloc_lock+0xc>)
 80047e0:	f000 f80c 	bl	80047fc <__retarget_lock_acquire_recursive>
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	20000200 	.word	0x20000200

080047ec <__malloc_unlock>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4802      	ldr	r0, [pc, #8]	; (80047f8 <__malloc_unlock+0xc>)
 80047f0:	f000 f805 	bl	80047fe <__retarget_lock_release_recursive>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	20000200 	.word	0x20000200

080047fc <__retarget_lock_acquire_recursive>:
 80047fc:	4770      	bx	lr

080047fe <__retarget_lock_release_recursive>:
 80047fe:	4770      	bx	lr

08004800 <_getpid>:
 8004800:	2258      	movs	r2, #88	; 0x58
 8004802:	2001      	movs	r0, #1
 8004804:	4b01      	ldr	r3, [pc, #4]	; (800480c <_getpid+0xc>)
 8004806:	4240      	negs	r0, r0
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	4770      	bx	lr
 800480c:	200001fc 	.word	0x200001fc

08004810 <_kill>:
 8004810:	2258      	movs	r2, #88	; 0x58
 8004812:	2001      	movs	r0, #1
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <_kill+0xc>)
 8004816:	4240      	negs	r0, r0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	4770      	bx	lr
 800481c:	200001fc 	.word	0x200001fc

08004820 <_exit>:
 8004820:	e7fe      	b.n	8004820 <_exit>
	...

08004824 <_init>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr

08004830 <_fini>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

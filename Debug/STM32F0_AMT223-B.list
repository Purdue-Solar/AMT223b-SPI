
STM32F0_AMT223-B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003440  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003538  08003538  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003538  08003538  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003538  08003538  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  0800354c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  0800354c  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149ae  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b61  00000000  00000000  000349e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00037548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00038508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6ff  00000000  00000000  000393d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014128  00000000  00000000  00056acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd9f  00000000  00000000  0006abf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038a8  00000000  00000000  0010a9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034e8 	.word	0x080034e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080034e8 	.word	0x080034e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <delayMicro>:
*
* @param frame The frame data to send
* @return A status representing whether the frame was successfully sent
*/
void delayMicro(uint16_t us, TIM_HandleTypeDef * htim)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dbb      	adds	r3, r7, #6
 800022c:	801a      	strh	r2, [r3, #0]
	//TODO Implement common function on Github
	__HAL_TIM_SET_COUNTER(htim,0); // set the counter value a 0
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(htim) < us); // wait for the counter to reach the us input in the parameter
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	881b      	ldrh	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	419b      	sbcs	r3, r3
 8000244:	425b      	negs	r3, r3
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b00      	cmp	r3, #0
 800024a:	d000      	beq.n	800024e <delayMicro+0x2e>
 800024c:	e7f3      	b.n	8000236 <delayMicro+0x16>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <sendByte>:
*
* @param frame The frame data to send
* @return A status representing whether the frame was successfully sent
*/
HAL_StatusTypeDef sendByte(uint8_t * sendByte, bool pullLow, SPI_HandleTypeDef * hspi, TIM_HandleTypeDef * htim, uint8_t * receiveByte)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b089      	sub	sp, #36	; 0x24
 800025c:	af02      	add	r7, sp, #8
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	607a      	str	r2, [r7, #4]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	200b      	movs	r0, #11
 8000266:	183b      	adds	r3, r7, r0
 8000268:	1c0a      	adds	r2, r1, #0
 800026a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef checkStatus;

	if(pullLow)
 800026c:	183b      	adds	r3, r7, r0
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d017      	beq.n	80002a4 <sendByte+0x4c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <sendByte+0x94>)
 8000276:	2200      	movs	r2, #0
 8000278:	2108      	movs	r1, #8
 800027a:	0018      	movs	r0, r3
 800027c:	f001 f80c 	bl	8001298 <HAL_GPIO_WritePin>
		checkStatus = HAL_SPI_TransmitReceive(hspi, sendByte, receiveByte,1,50);
 8000280:	2317      	movs	r3, #23
 8000282:	18fc      	adds	r4, r7, r3
 8000284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	2332      	movs	r3, #50	; 0x32
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2301      	movs	r3, #1
 8000290:	f001 fed6 	bl	8002040 <HAL_SPI_TransmitReceive>
 8000294:	0003      	movs	r3, r0
 8000296:	7023      	strb	r3, [r4, #0]
		delayMicro(3,htim);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	0019      	movs	r1, r3
 800029c:	2003      	movs	r0, #3
 800029e:	f7ff ffbf 	bl	8000220 <delayMicro>
 80002a2:	e01b      	b.n	80002dc <sendByte+0x84>
	}
	else
	{
		checkStatus = HAL_SPI_TransmitReceive(hspi,sendByte,receiveByte,1,50);
 80002a4:	2317      	movs	r3, #23
 80002a6:	18fc      	adds	r4, r7, r3
 80002a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002aa:	68f9      	ldr	r1, [r7, #12]
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	2332      	movs	r3, #50	; 0x32
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	f001 fec4 	bl	8002040 <HAL_SPI_TransmitReceive>
 80002b8:	0003      	movs	r3, r0
 80002ba:	7023      	strb	r3, [r4, #0]
		delayMicro(3,htim);
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	2003      	movs	r0, #3
 80002c2:	f7ff ffad 	bl	8000220 <delayMicro>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <sendByte+0x94>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	2108      	movs	r1, #8
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 ffe3 	bl	8001298 <HAL_GPIO_WritePin>
		delayMicro(40,htim);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	0019      	movs	r1, r3
 80002d6:	2028      	movs	r0, #40	; 0x28
 80002d8:	f7ff ffa2 	bl	8000220 <delayMicro>
	}
	return checkStatus;
 80002dc:	2317      	movs	r3, #23
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	781b      	ldrb	r3, [r3, #0]
}
 80002e2:	0018      	movs	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b007      	add	sp, #28
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	48000400 	.word	0x48000400

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fbd8 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f822 	bl	8000340 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 f994 	bl	8000628 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000300:	f000 f8ba 	bl	8000478 <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8000304:	f000 f95c 	bl	80005c0 <_ZL19MX_USART2_UART_Initv>
  MX_CAN_Init();
 8000308:	f000 f87a 	bl	8000400 <_ZL11MX_CAN_Initv>
  MX_TIM3_Init();
 800030c:	f000 f8f6 	bl	80004fc <_ZL12MX_TIM3_Initv>

  /* USER CODE BEGIN 2 */
  //initializes the timer used for delay
  HAL_TIM_Base_Start(&htim3);
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <main+0x44>)
 8000312:	0018      	movs	r0, r3
 8000314:	f002 fa2c 	bl	8002770 <HAL_TIM_Base_Start>
  startUp(&htim3,&hcan,&hspi1);
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <main+0x48>)
 800031a:	4908      	ldr	r1, [pc, #32]	; (800033c <main+0x4c>)
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <main+0x44>)
 800031e:	0018      	movs	r0, r3
 8000320:	f000 f9de 	bl	80006e0 <startUp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	loop(&htim3,&hcan,&hspi1);
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <main+0x48>)
 8000326:	4905      	ldr	r1, [pc, #20]	; (800033c <main+0x4c>)
 8000328:	4b02      	ldr	r3, [pc, #8]	; (8000334 <main+0x44>)
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fa12 	bl	8000754 <loop>
 8000330:	e7f8      	b.n	8000324 <main+0x34>
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	2000008c 	.word	0x2000008c
 8000338:	20000028 	.word	0x20000028
 800033c:	20000158 	.word	0x20000158

08000340 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b099      	sub	sp, #100	; 0x64
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	242c      	movs	r4, #44	; 0x2c
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2334      	movs	r3, #52	; 0x34
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f003 f8c1 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000356:	231c      	movs	r3, #28
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2310      	movs	r3, #16
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f003 f8b9 	bl	80034d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	231c      	movs	r3, #28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f003 f8b2 	bl	80034d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2220      	movs	r2, #32
 8000378:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2201      	movs	r2, #1
 800037e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000380:	193b      	adds	r3, r7, r4
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	193b      	adds	r3, r7, r4
 8000388:	0018      	movs	r0, r3
 800038a:	f000 ffa3 	bl	80012d4 <HAL_RCC_OscConfig>
 800038e:	0003      	movs	r3, r0
 8000390:	1e5a      	subs	r2, r3, #1
 8000392:	4193      	sbcs	r3, r2
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 800039a:	f000 f99b 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	211c      	movs	r1, #28
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2207      	movs	r2, #7
 80003a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	2203      	movs	r2, #3
 80003aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	187b      	adds	r3, r7, r1
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2101      	movs	r1, #1
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fb0f 	bl	80019e0 <HAL_RCC_ClockConfig>
 80003c2:	0003      	movs	r3, r0
 80003c4:	1e5a      	subs	r2, r3, #1
 80003c6:	4193      	sbcs	r3, r2
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80003ce:	f000 f981 	bl	80006d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003d2:	003b      	movs	r3, r7
 80003d4:	2202      	movs	r2, #2
 80003d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003d8:	003b      	movs	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	003b      	movs	r3, r7
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fc77 	bl	8001cd4 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	0003      	movs	r3, r0
 80003e8:	1e5a      	subs	r2, r3, #1
 80003ea:	4193      	sbcs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80003f2:	f000 f96f 	bl	80006d4 <Error_Handler>
  }
}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b019      	add	sp, #100	; 0x64
 80003fc:	bd90      	pop	{r4, r7, pc}
	...

08000400 <_ZL11MX_CAN_Initv>:

static void MX_CAN_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000406:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <_ZL11MX_CAN_Initv+0x74>)
 8000408:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 80;
 800040a:	4b19      	ldr	r3, [pc, #100]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 800040c:	2250      	movs	r2, #80	; 0x50
 800040e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000410:	4b17      	ldr	r3, [pc, #92]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	0292      	lsls	r2, r2, #10
 8000422:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000426:	2280      	movs	r2, #128	; 0x80
 8000428:	0352      	lsls	r2, r2, #13
 800042a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000434:	2200      	movs	r2, #0
 8000436:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 800043a:	2200      	movs	r2, #0
 800043c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000440:	2200      	movs	r2, #0
 8000442:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000446:	2200      	movs	r2, #0
 8000448:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 800044c:	2200      	movs	r2, #0
 800044e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <_ZL11MX_CAN_Initv+0x70>)
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fbb0 	bl	8000bb8 <HAL_CAN_Init>
 8000458:	0003      	movs	r3, r0
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	4193      	sbcs	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <_ZL11MX_CAN_Initv+0x68>
  {
    Error_Handler();
 8000464:	f000 f936 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	20000158 	.word	0x20000158
 8000474:	40006400 	.word	0x40006400

08000478 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800047c:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 800047e:	4a1e      	ldr	r2, [pc, #120]	; (80004f8 <_ZL12MX_SPI1_Initv+0x80>)
 8000480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000484:	2282      	movs	r2, #130	; 0x82
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000490:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 8000492:	22e0      	movs	r2, #224	; 0xe0
 8000494:	00d2      	lsls	r2, r2, #3
 8000496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004ae:	2238      	movs	r2, #56	; 0x38
 80004b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004c6:	2207      	movs	r2, #7
 80004c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004d2:	2208      	movs	r2, #8
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <_ZL12MX_SPI1_Initv+0x7c>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fcf9 	bl	8001ed0 <HAL_SPI_Init>
 80004de:	0003      	movs	r3, r0
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	4193      	sbcs	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80004ea:	f000 f8f3 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000028 	.word	0x20000028
 80004f8:	40013000 	.word	0x40013000

080004fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	2308      	movs	r3, #8
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f002 ffe3 	bl	80034d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2308      	movs	r3, #8
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f002 ffdc 	bl	80034d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000522:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <_ZL12MX_TIM3_Initv+0xbc>)
 8000524:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000526:	4b23      	ldr	r3, [pc, #140]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000528:	222f      	movs	r2, #47	; 0x2f
 800052a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <_ZL12MX_TIM3_Initv+0xc0>)
 8000536:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000546:	0018      	movs	r0, r3
 8000548:	f002 f8c2 	bl	80026d0 <HAL_TIM_Base_Init>
 800054c:	0003      	movs	r3, r0
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	4193      	sbcs	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <_ZL12MX_TIM3_Initv+0x60>
  {
    Error_Handler();
 8000558:	f000 f8bc 	bl	80006d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	2108      	movs	r1, #8
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	0152      	lsls	r2, r2, #5
 8000564:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000566:	187a      	adds	r2, r7, r1
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f949 	bl	8002804 <HAL_TIM_ConfigClockSource>
 8000572:	0003      	movs	r3, r0
 8000574:	1e5a      	subs	r2, r3, #1
 8000576:	4193      	sbcs	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800057e:	f000 f8a9 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058e:	003a      	movs	r2, r7
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <_ZL12MX_TIM3_Initv+0xb8>)
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f002 fb23 	bl	8002be0 <HAL_TIMEx_MasterConfigSynchronization>
 800059a:	0003      	movs	r3, r0
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	4193      	sbcs	r3, r2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <_ZL12MX_TIM3_Initv+0xae>
  {
    Error_Handler();
 80005a6:	f000 f895 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b006      	add	sp, #24
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	2000008c 	.word	0x2000008c
 80005b8:	40000400 	.word	0x40000400
 80005bc:	0000fffe 	.word	0x0000fffe

080005c0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <_ZL19MX_USART2_UART_Initv+0x64>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005cc:	22e1      	movs	r2, #225	; 0xe1
 80005ce:	0252      	lsls	r2, r2, #9
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fb49 	bl	8002c9c <HAL_UART_Init>
 800060a:	0003      	movs	r3, r0
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	4193      	sbcs	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000616:	f000 f85d 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000d4 	.word	0x200000d4
 8000624:	40004400 	.word	0x40004400

08000628 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	240c      	movs	r4, #12
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0018      	movs	r0, r3
 8000634:	2314      	movs	r3, #20
 8000636:	001a      	movs	r2, r3
 8000638:	2100      	movs	r1, #0
 800063a:	f002 ff4d 	bl	80034d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	03c9      	lsls	r1, r1, #15
 8000648:	430a      	orrs	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	03db      	lsls	r3, r3, #15
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0289      	lsls	r1, r1, #10
 8000664:	430a      	orrs	r2, r1
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 800066a:	695a      	ldr	r2, [r3, #20]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	029b      	lsls	r3, r3, #10
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	02c9      	lsls	r1, r1, #11
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <_ZL12MX_GPIO_Initv+0xa4>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	02db      	lsls	r3, r3, #11
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <_ZL12MX_GPIO_Initv+0xa8>)
 8000694:	2200      	movs	r2, #0
 8000696:	2108      	movs	r1, #8
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fdfd 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800069e:	0021      	movs	r1, r4
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2208      	movs	r2, #8
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <_ZL12MX_GPIO_Initv+0xa8>)
 80006bc:	0019      	movs	r1, r3
 80006be:	0010      	movs	r0, r2
 80006c0:	f000 fc72 	bl	8000fa8 <HAL_GPIO_Init>

}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b009      	add	sp, #36	; 0x24
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <startUp>:
using namespace PSR;

extern "C"
{
void startUp(TIM_HandleTypeDef * htim, CAN_HandleTypeDef * hcan,SPI_HandleTypeDef * hspi)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b091      	sub	sp, #68	; 0x44
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	//initializes the can communications
	CANBus::Config config = {.AutoRetransmit = true, .FilterMask = 0x7FF};
 80006ec:	2434      	movs	r4, #52	; 0x34
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	0018      	movs	r0, r3
 80006f2:	230c      	movs	r3, #12
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 feee 	bl	80034d8 <memset>
 80006fc:	0021      	movs	r1, r4
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	711a      	strb	r2, [r3, #4]
 8000704:	187b      	adds	r3, r7, r1
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <startUp+0x70>)
 8000708:	609a      	str	r2, [r3, #8]
	CANBus can = PSR::CANBus(*hcan,config);
 800070a:	187a      	adds	r2, r7, r1
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	2420      	movs	r4, #32
 8000710:	193b      	adds	r3, r7, r4
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fe5e 	bl	80033d4 <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>
	can.Init();
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fe70 	bl	8003400 <_ZN3PSR6CANBus4InitEv>
	VescCAN vesc = VescCAN(can,113);
 8000720:	1939      	adds	r1, r7, r4
 8000722:	2318      	movs	r3, #24
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	2271      	movs	r2, #113	; 0x71
 8000728:	0018      	movs	r0, r3
 800072a:	f002 fe9d 	bl	8003468 <_ZN3PSR7VescCANC1ERNS_6CANBusEh>
	HAL_Delay(1000);
 800072e:	23fa      	movs	r3, #250	; 0xfa
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fa1c 	bl	8000b70 <HAL_Delay>

	uint8_t spi_Tx[2];
	uint8_t spi_Rx[2];

	//Reset the optical encoder
	spi_Tx[0] = 0x00;
 8000738:	2114      	movs	r1, #20
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
	spi_Tx[1] = 0x00;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	705a      	strb	r2, [r3, #1]



}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b011      	add	sp, #68	; 0x44
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	000007ff 	.word	0x000007ff

08000754 <loop>:

void loop(TIM_HandleTypeDef * htim, CAN_HandleTypeDef * hcan,SPI_HandleTypeDef * hspi)
{
 8000754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af02      	add	r7, sp, #8
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	uint8_t spi_Rx[2];

	HAL_StatusTypeDef checkStatus;

	//get position
	spi_Tx[0] = 0x00;
 8000760:	2514      	movs	r5, #20
 8000762:	197b      	adds	r3, r7, r5
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
	spi_Tx[1] = 0x70;
 8000768:	197b      	adds	r3, r7, r5
 800076a:	2270      	movs	r2, #112	; 0x70
 800076c:	705a      	strb	r2, [r3, #1]

	checkStatus = sendByte(spi_Tx,true,hspi,htim,spi_Rx);
 800076e:	2617      	movs	r6, #23
 8000770:	19bc      	adds	r4, r7, r6
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	1978      	adds	r0, r7, r5
 8000778:	2310      	movs	r3, #16
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	000b      	movs	r3, r1
 8000780:	2101      	movs	r1, #1
 8000782:	f7ff fd69 	bl	8000258 <sendByte>
 8000786:	0003      	movs	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
	if(checkStatus == HAL_OK)
 800078a:	0032      	movs	r2, r6
 800078c:	18bb      	adds	r3, r7, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d10f      	bne.n	80007b4 <loop+0x60>
	{
		checkStatus = sendByte(spi_Tx + 1,false,hspi,htim,spi_Rx + 1);
 8000794:	1978      	adds	r0, r7, r5
 8000796:	3001      	adds	r0, #1
 8000798:	2310      	movs	r3, #16
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	3301      	adds	r3, #1
 800079e:	18bc      	adds	r4, r7, r2
 80007a0:	68f9      	ldr	r1, [r7, #12]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	000b      	movs	r3, r1
 80007a8:	2100      	movs	r1, #0
 80007aa:	f7ff fd55 	bl	8000258 <sendByte>
 80007ae:	0003      	movs	r3, r0
 80007b0:	7023      	strb	r3, [r4, #0]
		spi_Rx[2] = 0x00;
	}



}
 80007b2:	e006      	b.n	80007c2 <loop+0x6e>
		spi_Rx[1] = 0x00;
 80007b4:	2110      	movs	r1, #16
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	705a      	strb	r2, [r3, #1]
		spi_Rx[2] = 0x00;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2200      	movs	r2, #0
 80007c0:	709a      	strb	r2, [r3, #2]
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b007      	add	sp, #28
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x44>)
 80007d4:	699a      	ldr	r2, [r3, #24]
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_MspInit+0x44>)
 80007d8:	2101      	movs	r1, #1
 80007da:	430a      	orrs	r2, r1
 80007dc:	619a      	str	r2, [r3, #24]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_MspInit+0x44>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4013      	ands	r3, r2
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x44>)
 80007ec:	69da      	ldr	r2, [r3, #28]
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x44>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0549      	lsls	r1, r1, #21
 80007f4:	430a      	orrs	r2, r1
 80007f6:	61da      	str	r2, [r3, #28]
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_MspInit+0x44>)
 80007fa:	69da      	ldr	r2, [r3, #28]
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	055b      	lsls	r3, r3, #21
 8000800:	4013      	ands	r3, r2
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b08b      	sub	sp, #44	; 0x2c
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	2414      	movs	r4, #20
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	2314      	movs	r3, #20
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f002 fe56 	bl	80034d8 <memset>
  if(hcan->Instance==CAN)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_CAN_MspInit+0x94>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d133      	bne.n	800089e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_CAN_MspInit+0x98>)
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	0489      	lsls	r1, r1, #18
 8000840:	430a      	orrs	r2, r1
 8000842:	61da      	str	r2, [r3, #28]
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000846:	69da      	ldr	r2, [r3, #28]
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	049b      	lsls	r3, r3, #18
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000854:	695a      	ldr	r2, [r3, #20]
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_CAN_MspInit+0x98>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	029b      	lsls	r3, r3, #10
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	22c0      	movs	r2, #192	; 0xc0
 8000872:	0152      	lsls	r2, r2, #5
 8000874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	0021      	movs	r1, r4
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2202      	movs	r2, #2
 800087c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2203      	movs	r2, #3
 8000888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2204      	movs	r2, #4
 800088e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	187a      	adds	r2, r7, r1
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fb85 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b00b      	add	sp, #44	; 0x2c
 80008a4:	bd90      	pop	{r4, r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40006400 	.word	0x40006400
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b08b      	sub	sp, #44	; 0x2c
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	2414      	movs	r4, #20
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	2314      	movs	r3, #20
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 fe08 	bl	80034d8 <memset>
  if(hspi->Instance==SPI1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <HAL_SPI_MspInit+0x90>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d132      	bne.n	8000938 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008d4:	699a      	ldr	r2, [r3, #24]
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	0149      	lsls	r1, r1, #5
 80008dc:	430a      	orrs	r2, r1
 80008de:	619a      	str	r2, [r3, #24]
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	015b      	lsls	r3, r3, #5
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0289      	lsls	r1, r1, #10
 80008f8:	430a      	orrs	r2, r1
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_SPI_MspInit+0x94>)
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	029b      	lsls	r3, r3, #10
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800090a:	0021      	movs	r1, r4
 800090c:	187b      	adds	r3, r7, r1
 800090e:	22e0      	movs	r2, #224	; 0xe0
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2203      	movs	r2, #3
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	187a      	adds	r2, r7, r1
 800092c:	2390      	movs	r3, #144	; 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fb38 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b00b      	add	sp, #44	; 0x2c
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40013000 	.word	0x40013000
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_Base_MspInit+0x34>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 8000960:	2102      	movs	r1, #2
 8000962:	430a      	orrs	r2, r1
 8000964:	61da      	str	r2, [r3, #28]
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2202      	movs	r2, #2
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40000400 	.word	0x40000400
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b08b      	sub	sp, #44	; 0x2c
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	2414      	movs	r4, #20
 800098e:	193b      	adds	r3, r7, r4
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f002 fd9e 	bl	80034d8 <memset>
  if(huart->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d132      	bne.n	8000a0c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009a8:	69da      	ldr	r2, [r3, #28]
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	0289      	lsls	r1, r1, #10
 80009b0:	430a      	orrs	r2, r1
 80009b2:	61da      	str	r2, [r3, #28]
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009b6:	69da      	ldr	r2, [r3, #28]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0289      	lsls	r1, r1, #10
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	029b      	lsls	r3, r3, #10
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2203      	movs	r2, #3
 80009f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	2390      	movs	r3, #144	; 0x90
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 face 	bl	8000fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b00b      	add	sp, #44	; 0x2c
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f87a 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0b      	ldr	r4, [pc, #44]	; (8000aa0 <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a7e:	f7ff ffe4 	bl	8000a4a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a82:	f002 fd05 	bl	8003490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a86:	f7ff fc33 	bl	80002f0 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   r0, =_estack
 8000a8c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	08003540 	.word	0x08003540
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	20000184 	.word	0x20000184

08000aa4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_COMP_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_Init+0x24>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_Init+0x24>)
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f809 	bl	8000ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abe:	f7ff fe85 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x5c>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_InitTick+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	23fa      	movs	r3, #250	; 0xfa
 8000ae4:	0098      	lsls	r0, r3, #2
 8000ae6:	f7ff fb0f 	bl	8000108 <__udivsi3>
 8000aea:	0003      	movs	r3, r0
 8000aec:	0019      	movs	r1, r3
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fb0a 	bl	8000108 <__udivsi3>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fa49 	bl	8000f8e <HAL_SYSTICK_Config>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e00f      	b.n	8000b24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d80b      	bhi.n	8000b22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	2200      	movs	r2, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fa26 	bl	8000f64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_InitTick+0x64>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	0018      	movs	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000180 	.word	0x20000180

08000b5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	20000180 	.word	0x20000180

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff fff0 	bl	8000b5c <HAL_GetTick>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_Delay+0x44>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	001a      	movs	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	f7ff ffe0 	bl	8000b5c <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b004      	add	sp, #16
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0f0      	b.n	8000dac <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2220      	movs	r2, #32
 8000bce:	5c9b      	ldrb	r3, [r3, r2]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d103      	bne.n	8000bde <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fe1b 	bl	8000814 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bee:	f7ff ffb5 	bl	8000b5c <HAL_GetTick>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf6:	e013      	b.n	8000c20 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf8:	f7ff ffb0 	bl	8000b5c <HAL_GetTick>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d90c      	bls.n	8000c20 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	0292      	lsls	r2, r2, #10
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2220      	movs	r2, #32
 8000c18:	2105      	movs	r1, #5
 8000c1a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e0c5      	b.n	8000dac <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	4013      	ands	r3, r2
 8000c2a:	d0e5      	beq.n	8000bf8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2102      	movs	r1, #2
 8000c38:	438a      	bics	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3c:	f7ff ff8e 	bl	8000b5c <HAL_GetTick>
 8000c40:	0003      	movs	r3, r0
 8000c42:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c44:	e013      	b.n	8000c6e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c46:	f7ff ff89 	bl	8000b5c <HAL_GetTick>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	2b0a      	cmp	r3, #10
 8000c52:	d90c      	bls.n	8000c6e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0292      	lsls	r2, r2, #10
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2220      	movs	r2, #32
 8000c66:	2105      	movs	r1, #5
 8000c68:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e09e      	b.n	8000dac <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2202      	movs	r2, #2
 8000c76:	4013      	ands	r3, r2
 8000c78:	d1e5      	bne.n	8000c46 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7e1b      	ldrb	r3, [r3, #24]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d108      	bne.n	8000c94 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	438a      	bics	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7e5b      	ldrb	r3, [r3, #25]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d108      	bne.n	8000cbe <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2140      	movs	r1, #64	; 0x40
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	e007      	b.n	8000cce <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2140      	movs	r1, #64	; 0x40
 8000cca:	438a      	bics	r2, r1
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7e9b      	ldrb	r3, [r3, #26]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d108      	bne.n	8000ce8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e007      	b.n	8000cf8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	438a      	bics	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7edb      	ldrb	r3, [r3, #27]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d108      	bne.n	8000d12 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	e007      	b.n	8000d22 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7f1b      	ldrb	r3, [r3, #28]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d108      	bne.n	8000d3c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2108      	movs	r1, #8
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2108      	movs	r1, #8
 8000d48:	438a      	bics	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7f5b      	ldrb	r3, [r3, #29]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d108      	bne.n	8000d66 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2104      	movs	r1, #4
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	e007      	b.n	8000d76 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2104      	movs	r1, #4
 8000d72:	438a      	bics	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2220      	movs	r2, #32
 8000da6:	2101      	movs	r1, #1
 8000da8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d12f      	bne.n	8000e28 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2220      	movs	r2, #32
 8000dcc:	2102      	movs	r1, #2
 8000dce:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2101      	movs	r1, #1
 8000ddc:	438a      	bics	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000de0:	f7ff febc 	bl	8000b5c <HAL_GetTick>
 8000de4:	0003      	movs	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000de8:	e013      	b.n	8000e12 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dea:	f7ff feb7 	bl	8000b5c <HAL_GetTick>
 8000dee:	0002      	movs	r2, r0
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	2b0a      	cmp	r3, #10
 8000df6:	d90c      	bls.n	8000e12 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0292      	lsls	r2, r2, #10
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e012      	b.n	8000e38 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	d1e5      	bne.n	8000dea <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	e007      	b.n	8000e38 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	0312      	lsls	r2, r2, #12
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
  }
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b004      	add	sp, #16
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b7f      	cmp	r3, #127	; 0x7f
 8000e54:	d828      	bhi.n	8000ea8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e56:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	33c0      	adds	r3, #192	; 0xc0
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	589b      	ldr	r3, [r3, r2]
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	400a      	ands	r2, r1
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	401a      	ands	r2, r3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	4003      	ands	r3, r0
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	481f      	ldr	r0, [pc, #124]	; (8000f14 <__NVIC_SetPriority+0xd4>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b25b      	sxtb	r3, r3
 8000e9c:	089b      	lsrs	r3, r3, #2
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	33c0      	adds	r3, #192	; 0xc0
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ea6:	e031      	b.n	8000f0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	0019      	movs	r1, r3
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	400b      	ands	r3, r1
 8000eb4:	3b08      	subs	r3, #8
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3306      	adds	r3, #6
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	18d3      	adds	r3, r2, r3
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	; 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <__NVIC_SetPriority+0xd8>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	001c      	movs	r4, r3
 8000ef8:	230f      	movs	r3, #15
 8000efa:	4023      	ands	r3, r4
 8000efc:	3b08      	subs	r3, #8
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	430a      	orrs	r2, r1
 8000f02:	3306      	adds	r3, #6
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	18c3      	adds	r3, r0, r3
 8000f08:	3304      	adds	r3, #4
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b003      	add	sp, #12
 8000f12:	bd90      	pop	{r4, r7, pc}
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	045b      	lsls	r3, r3, #17
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d301      	bcc.n	8000f34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f30:	2301      	movs	r3, #1
 8000f32:	e010      	b.n	8000f56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <SysTick_Config+0x44>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2103      	movs	r1, #3
 8000f42:	0018      	movs	r0, r3
 8000f44:	f7ff ff7c 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x44>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x44>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	210f      	movs	r1, #15
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	1c02      	adds	r2, r0, #0
 8000f74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b004      	add	sp, #16
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ffbf 	bl	8000f1c <SysTick_Config>
 8000f9e:	0003      	movs	r3, r0
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e155      	b.n	8001264 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d100      	bne.n	8000fd0 <HAL_GPIO_Init+0x28>
 8000fce:	e146      	b.n	800125e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	409a      	lsls	r2, r3
 800100a:	0013      	movs	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
 8001024:	0013      	movs	r3, r2
 8001026:	43da      	mvns	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	2201      	movs	r2, #1
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2203      	movs	r2, #3
 8001050:	4013      	ands	r3, r2
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	43da      	mvns	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	58d3      	ldr	r3, [r2, r3]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2207      	movs	r2, #7
 80010a4:	4013      	ands	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2107      	movs	r1, #7
 80010be:	400b      	ands	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	6939      	ldr	r1, [r7, #16]
 80010d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	401a      	ands	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	23c0      	movs	r3, #192	; 0xc0
 8001114:	029b      	lsls	r3, r3, #10
 8001116:	4013      	ands	r3, r2
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x174>
 800111a:	e0a0      	b.n	800125e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HAL_GPIO_Init+0x2d4>)
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	4b56      	ldr	r3, [pc, #344]	; (800127c <HAL_GPIO_Init+0x2d4>)
 8001122:	2101      	movs	r1, #1
 8001124:	430a      	orrs	r2, r1
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <HAL_GPIO_Init+0x2d4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	2201      	movs	r2, #1
 800112e:	4013      	ands	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	589b      	ldr	r3, [r3, r2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	409a      	lsls	r2, r3
 800114e:	0013      	movs	r3, r2
 8001150:	43da      	mvns	r2, r3
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	2390      	movs	r3, #144	; 0x90
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	429a      	cmp	r2, r3
 8001160:	d019      	beq.n	8001196 <HAL_GPIO_Init+0x1ee>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a47      	ldr	r2, [pc, #284]	; (8001284 <HAL_GPIO_Init+0x2dc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0x1ea>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a46      	ldr	r2, [pc, #280]	; (8001288 <HAL_GPIO_Init+0x2e0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d00d      	beq.n	800118e <HAL_GPIO_Init+0x1e6>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a45      	ldr	r2, [pc, #276]	; (800128c <HAL_GPIO_Init+0x2e4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d007      	beq.n	800118a <HAL_GPIO_Init+0x1e2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2e8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d101      	bne.n	8001186 <HAL_GPIO_Init+0x1de>
 8001182:	2304      	movs	r3, #4
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001186:	2305      	movs	r3, #5
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x1f0>
 8001196:	2300      	movs	r3, #0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	2103      	movs	r1, #3
 800119c:	400a      	ands	r2, r1
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a8:	4935      	ldr	r1, [pc, #212]	; (8001280 <HAL_GPIO_Init+0x2d8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4013      	ands	r3, r2
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011da:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011e0:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43da      	mvns	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001204:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	035b      	lsls	r3, r3, #13
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	039b      	lsls	r3, r3, #14
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <HAL_GPIO_Init+0x2ec>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	40da      	lsrs	r2, r3
 800126c:	1e13      	subs	r3, r2, #0
 800126e:	d000      	beq.n	8001272 <HAL_GPIO_Init+0x2ca>
 8001270:	e6a2      	b.n	8000fb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b006      	add	sp, #24
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800
 800128c:	48000c00 	.word	0x48000c00
 8001290:	48001000 	.word	0x48001000
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	0008      	movs	r0, r1
 80012a2:	0011      	movs	r1, r2
 80012a4:	1cbb      	adds	r3, r7, #2
 80012a6:	1c02      	adds	r2, r0, #0
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	1c7b      	adds	r3, r7, #1
 80012ac:	1c0a      	adds	r2, r1, #0
 80012ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b0:	1c7b      	adds	r3, r7, #1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	881a      	ldrh	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	1cbb      	adds	r3, r7, #2
 80012c4:	881a      	ldrh	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f000 fb76 	bl	80019d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d100      	bne.n	80012f4 <HAL_RCC_OscConfig+0x20>
 80012f2:	e08e      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f4:	4bc5      	ldr	r3, [pc, #788]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d00e      	beq.n	800131e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4bc2      	ldr	r3, [pc, #776]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	220c      	movs	r2, #12
 8001306:	4013      	ands	r3, r2
 8001308:	2b08      	cmp	r3, #8
 800130a:	d117      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
 800130c:	4bbf      	ldr	r3, [pc, #764]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	401a      	ands	r2, r3
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	429a      	cmp	r2, r3
 800131c:	d10e      	bne.n	800133c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131e:	4bbb      	ldr	r3, [pc, #748]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x58>
 800132a:	e071      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d000      	beq.n	8001336 <HAL_RCC_OscConfig+0x62>
 8001334:	e06c      	b.n	8001410 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f000 fb4c 	bl	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d107      	bne.n	8001354 <HAL_RCC_OscConfig+0x80>
 8001344:	4bb1      	ldr	r3, [pc, #708]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4bb0      	ldr	r3, [pc, #704]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	0249      	lsls	r1, r1, #9
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e02f      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0xa2>
 800135c:	4bab      	ldr	r3, [pc, #684]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4baa      	ldr	r3, [pc, #680]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001362:	49ab      	ldr	r1, [pc, #684]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4ba8      	ldr	r3, [pc, #672]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4ba7      	ldr	r3, [pc, #668]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800136e:	49a9      	ldr	r1, [pc, #676]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e01e      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0xc8>
 800137e:	4ba3      	ldr	r3, [pc, #652]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4ba2      	ldr	r3, [pc, #648]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	02c9      	lsls	r1, r1, #11
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	4b9f      	ldr	r3, [pc, #636]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b9e      	ldr	r3, [pc, #632]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0249      	lsls	r1, r1, #9
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xe0>
 800139c:	4b9b      	ldr	r3, [pc, #620]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b9a      	ldr	r3, [pc, #616]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013a2:	499b      	ldr	r1, [pc, #620]	; (8001610 <HAL_RCC_OscConfig+0x33c>)
 80013a4:	400a      	ands	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4b98      	ldr	r3, [pc, #608]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b97      	ldr	r3, [pc, #604]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013ae:	4999      	ldr	r1, [pc, #612]	; (8001614 <HAL_RCC_OscConfig+0x340>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d014      	beq.n	80013e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fbce 	bl	8000b5c <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fbc9 	bl	8000b5c <HAL_GetTick>
 80013ca:	0002      	movs	r2, r0
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2fd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d8:	4b8c      	ldr	r3, [pc, #560]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	029b      	lsls	r3, r3, #10
 80013e0:	4013      	ands	r3, r2
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xf2>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fbb9 	bl	8000b5c <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fbb4 	bl	8000b5c <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2e8      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001402:	4b82      	ldr	r3, [pc, #520]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	4013      	ands	r3, r2
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x11c>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x14a>
 800141c:	e06c      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800141e:	4b7b      	ldr	r3, [pc, #492]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	4013      	ands	r3, r2
 8001426:	d00e      	beq.n	8001446 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001428:	4b78      	ldr	r3, [pc, #480]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	220c      	movs	r2, #12
 800142e:	4013      	ands	r3, r2
 8001430:	2b08      	cmp	r3, #8
 8001432:	d11f      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
 8001434:	4b75      	ldr	r3, [pc, #468]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	23c0      	movs	r3, #192	; 0xc0
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	401a      	ands	r2, r3
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	429a      	cmp	r2, r3
 8001444:	d116      	bne.n	8001474 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2bb      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b6b      	ldr	r3, [pc, #428]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22f8      	movs	r2, #248	; 0xf8
 8001462:	4393      	bics	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	00da      	lsls	r2, r3, #3
 800146c:	4b67      	ldr	r3, [pc, #412]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001472:	e041      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d024      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800147c:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001482:	2101      	movs	r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fb68 	bl	8000b5c <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff fb63 	bl	8000b5c <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e297      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d0f1      	beq.n	8001492 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	22f8      	movs	r2, #248	; 0xf8
 80014b4:	4393      	bics	r3, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	00da      	lsls	r2, r3, #3
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb43 	bl	8000b5c <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014dc:	f7ff fb3e 	bl	8000b5c <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e272      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4013      	ands	r3, r2
 8001500:	d036      	beq.n	8001570 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b40      	ldr	r3, [pc, #256]	; (800160c <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb21 	bl	8000b5c <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fb1c 	bl	8000b5c <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e250      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d0f1      	beq.n	8001520 <HAL_RCC_OscConfig+0x24c>
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001544:	2101      	movs	r1, #1
 8001546:	438a      	bics	r2, r1
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff fb07 	bl	8000b5c <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fb02 	bl	8000b5c <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e236      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d1f1      	bne.n	8001554 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x2a8>
 800157a:	e0b5      	b.n	80016e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157c:	201f      	movs	r0, #31
 800157e:	183b      	adds	r3, r7, r0
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001586:	69da      	ldr	r2, [r3, #28]
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	d110      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001592:	69da      	ldr	r2, [r3, #28]
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	0549      	lsls	r1, r1, #21
 800159a:	430a      	orrs	r2, r1
 800159c:	61da      	str	r2, [r3, #28]
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015a0:	69da      	ldr	r2, [r3, #28]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015ac:	183b      	adds	r3, r7, r0
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4013      	ands	r3, r2
 80015bc:	d11a      	bne.n	80015f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fac6 	bl	8000b5c <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fac1 	bl	8000b5c <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1f5      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x344>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10f      	bne.n	800161c <HAL_RCC_OscConfig+0x348>
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_RCC_OscConfig+0x338>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_RCC_OscConfig+0x338>)
 8001602:	2101      	movs	r1, #1
 8001604:	430a      	orrs	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e036      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	40021000 	.word	0x40021000
 8001610:	fffeffff 	.word	0xfffeffff
 8001614:	fffbffff 	.word	0xfffbffff
 8001618:	40007000 	.word	0x40007000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10c      	bne.n	800163e <HAL_RCC_OscConfig+0x36a>
 8001624:	4bca      	ldr	r3, [pc, #808]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4bc9      	ldr	r3, [pc, #804]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	621a      	str	r2, [r3, #32]
 8001630:	4bc7      	ldr	r3, [pc, #796]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	4bc6      	ldr	r3, [pc, #792]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001636:	2104      	movs	r1, #4
 8001638:	438a      	bics	r2, r1
 800163a:	621a      	str	r2, [r3, #32]
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x38c>
 8001646:	4bc2      	ldr	r3, [pc, #776]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001648:	6a1a      	ldr	r2, [r3, #32]
 800164a:	4bc1      	ldr	r3, [pc, #772]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800164c:	2104      	movs	r1, #4
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	4bbf      	ldr	r3, [pc, #764]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	4bbe      	ldr	r3, [pc, #760]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	621a      	str	r2, [r3, #32]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x3a4>
 8001660:	4bbb      	ldr	r3, [pc, #748]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4bba      	ldr	r3, [pc, #744]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	4bb8      	ldr	r3, [pc, #736]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4bb7      	ldr	r3, [pc, #732]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d014      	beq.n	80016aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fa6c 	bl	8000b5c <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fa67 	bl	8000b5c <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4aaf      	ldr	r2, [pc, #700]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e19a      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4bac      	ldr	r3, [pc, #688]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2202      	movs	r2, #2
 80016a4:	4013      	ands	r3, r2
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x3b6>
 80016a8:	e013      	b.n	80016d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa57 	bl	8000b5c <HAL_GetTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	e009      	b.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fa52 	bl	8000b5c <HAL_GetTick>
 80016b8:	0002      	movs	r2, r0
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4aa5      	ldr	r2, [pc, #660]	; (8001954 <HAL_RCC_OscConfig+0x680>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e185      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4ba1      	ldr	r3, [pc, #644]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016d2:	231f      	movs	r3, #31
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b9c      	ldr	r3, [pc, #624]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016de:	69da      	ldr	r2, [r3, #28]
 80016e0:	4b9b      	ldr	r3, [pc, #620]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	499d      	ldr	r1, [pc, #628]	; (8001958 <HAL_RCC_OscConfig+0x684>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2210      	movs	r2, #16
 80016ee:	4013      	ands	r3, r2
 80016f0:	d063      	beq.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12a      	bne.n	8001750 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016fa:	4b95      	ldr	r3, [pc, #596]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fe:	4b94      	ldr	r3, [pc, #592]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001700:	2104      	movs	r1, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001706:	4b92      	ldr	r3, [pc, #584]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170a:	4b91      	ldr	r3, [pc, #580]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800170c:	2101      	movs	r1, #1
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fa23 	bl	8000b5c <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800171c:	f7ff fa1e 	bl	8000b5c <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e152      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0f1      	beq.n	800171c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001738:	4b85      	ldr	r3, [pc, #532]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	22f8      	movs	r2, #248	; 0xf8
 800173e:	4393      	bics	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	00da      	lsls	r2, r3, #3
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800174a:	430a      	orrs	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
 800174e:	e034      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	3305      	adds	r3, #5
 8001756:	d111      	bne.n	800177c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001758:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175c:	4b7c      	ldr	r3, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800175e:	2104      	movs	r1, #4
 8001760:	438a      	bics	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001764:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	22f8      	movs	r2, #248	; 0xf8
 800176a:	4393      	bics	r3, r2
 800176c:	0019      	movs	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	4b76      	ldr	r3, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001776:	430a      	orrs	r2, r1
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
 800177a:	e01e      	b.n	80017ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800177c:	4b74      	ldr	r3, [pc, #464]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001780:	4b73      	ldr	r3, [pc, #460]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001782:	2104      	movs	r1, #4
 8001784:	430a      	orrs	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001788:	4b71      	ldr	r3, [pc, #452]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178c:	4b70      	ldr	r3, [pc, #448]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff f9e2 	bl	8000b5c <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800179e:	f7ff f9dd 	bl	8000b5c <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e111      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	d05c      	beq.n	800187e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017c4:	4b62      	ldr	r3, [pc, #392]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d00e      	beq.n	80017ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017d0:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	220c      	movs	r2, #12
 80017d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d114      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017dc:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	23c0      	movs	r3, #192	; 0xc0
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	401a      	ands	r2, r3
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d10b      	bne.n	8001806 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	025b      	lsls	r3, r3, #9
 80017f6:	4013      	ands	r3, r2
 80017f8:	d040      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d03c      	beq.n	800187c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e6      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01b      	beq.n	8001846 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff f99e 	bl	8000b5c <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001826:	f7ff f999 	bl	8000b5c <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0cd      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800183a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x552>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800184c:	4943      	ldr	r1, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x688>)
 800184e:	400a      	ands	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f983 	bl	8000b5c <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185c:	f7ff f97e 	bl	8000b5c <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0b2      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	025b      	lsls	r3, r3, #9
 8001876:	4013      	ands	r3, r2
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x588>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800187c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <HAL_RCC_OscConfig+0x5b4>
 8001886:	e0a4      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	220c      	movs	r2, #12
 800188e:	4013      	ands	r3, r2
 8001890:	2b08      	cmp	r3, #8
 8001892:	d100      	bne.n	8001896 <HAL_RCC_OscConfig+0x5c2>
 8001894:	e078      	b.n	8001988 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	2b02      	cmp	r3, #2
 800189c:	d14c      	bne.n	8001938 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018a4:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff f957 	bl	8000b5c <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f952 	bl	8000b5c <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	049b      	lsls	r3, r3, #18
 80018ce:	4013      	ands	r3, r2
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	220f      	movs	r2, #15
 80018d8:	4393      	bics	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_RCC_OscConfig+0x690>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	431a      	orrs	r2, r3
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0449      	lsls	r1, r1, #17
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff f925 	bl	8000b5c <HAL_GetTick>
 8001912:	0003      	movs	r3, r0
 8001914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f920 	bl	8000b5c <HAL_GetTick>
 800191c:	0002      	movs	r2, r0
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e054      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	4013      	ands	r3, r2
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x644>
 8001936:	e04c      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_RCC_OscConfig+0x67c>)
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <HAL_RCC_OscConfig+0x68c>)
 8001940:	400a      	ands	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff f90a 	bl	8000b5c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	e015      	b.n	800197a <HAL_RCC_OscConfig+0x6a6>
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40021000 	.word	0x40021000
 8001954:	00001388 	.word	0x00001388
 8001958:	efffffff 	.word	0xefffffff
 800195c:	fffeffff 	.word	0xfffeffff
 8001960:	feffffff 	.word	0xfeffffff
 8001964:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f8f8 	bl	8000b5c <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e02c      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x694>
 8001986:	e024      	b.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01f      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x708>)
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	23c0      	movs	r3, #192	; 0xc0
 80019a4:	025b      	lsls	r3, r3, #9
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10e      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	220f      	movs	r2, #15
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23f0      	movs	r3, #240	; 0xf0
 80019c2:	039b      	lsls	r3, r3, #14
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b008      	add	sp, #32
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0bf      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d911      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a14:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a6      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d015      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d006      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a40:	21e0      	movs	r1, #224	; 0xe0
 8001a42:	00c9      	lsls	r1, r1, #3
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	22f0      	movs	r2, #240	; 0xf0
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	4013      	ands	r3, r2
 8001a64:	d04c      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d120      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07a      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	049b      	lsls	r3, r3, #18
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d114      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06e      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e062      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e05b      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f844 	bl	8000b5c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f83f 	bl	8000b5c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <HAL_RCC_ClockConfig+0x1a4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e042      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	220c      	movs	r2, #12
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ec      	bne.n	8001ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d211      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <HAL_RCC_ClockConfig+0x19c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e020      	b.n	8001b74 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_RCC_ClockConfig+0x1a8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b50:	f000 f820 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8001b54:	0001      	movs	r1, r0
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_ClockConfig+0x1a0>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x1ac>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	000a      	movs	r2, r1
 8001b66:	40da      	lsrs	r2, r3
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1b0>)
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7fe ffaf 	bl	8000ad0 <HAL_InitTick>
  
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	00001388 	.word	0x00001388
 8001b88:	fffff8ff 	.word	0xfffff8ff
 8001b8c:	08003520 	.word	0x08003520
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b08f      	sub	sp, #60	; 0x3c
 8001b98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xec>)
 8001ba0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ba2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4a36      	ldr	r2, [pc, #216]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bae:	c313      	stmia	r3!, {r0, r1, r4}
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	220c      	movs	r2, #12
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d047      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xd4>
 8001bd8:	d849      	bhi.n	8001c6e <HAL_RCC_GetSysClockFreq+0xda>
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x50>
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0x56>
 8001be2:	e044      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001be8:	e044      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bec:	0c9b      	lsrs	r3, r3, #18
 8001bee:	220f      	movs	r2, #15
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	18ba      	adds	r2, r7, r2
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	220f      	movs	r2, #15
 8001c00:	4013      	ands	r3, r2
 8001c02:	1d3a      	adds	r2, r7, #4
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	23c0      	movs	r3, #192	; 0xc0
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	401a      	ands	r2, r3
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d109      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c1a:	481c      	ldr	r0, [pc, #112]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c1c:	f7fe fa74 	bl	8000108 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	001a      	movs	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	4353      	muls	r3, r2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2a:	e01a      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2e:	23c0      	movs	r3, #192	; 0xc0
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	401a      	ands	r2, r3
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c3e:	4814      	ldr	r0, [pc, #80]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c40:	f7fe fa62 	bl	8000108 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	001a      	movs	r2, r3
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	4353      	muls	r3, r2
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c52:	480e      	ldr	r0, [pc, #56]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c54:	f7fe fa58 	bl	8000108 <__udivsi3>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	4353      	muls	r3, r2
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c6a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c6c:	e002      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c72:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b00f      	add	sp, #60	; 0x3c
 8001c7c:	bd90      	pop	{r4, r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	08003500 	.word	0x08003500
 8001c84:	08003510 	.word	0x08003510
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	007a1200 	.word	0x007a1200
 8001c90:	02dc6c00 	.word	0x02dc6c00

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	20000000 	.word	0x20000000

08001ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001cac:	f7ff fff2 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb0:	0001      	movs	r1, r0
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	2207      	movs	r2, #7
 8001cba:	4013      	ands	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	40d9      	lsrs	r1, r3
 8001cc2:	000b      	movs	r3, r1
}    
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08003530 	.word	0x08003530

08001cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cf0:	e08e      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2017      	movs	r0, #23
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	055b      	lsls	r3, r3, #21
 8001d02:	4013      	ands	r3, r2
 8001d04:	d110      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b6b      	ldr	r3, [pc, #428]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0549      	lsls	r1, r1, #21
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d11a      	bne.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0049      	lsls	r1, r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7fe ff0b 	bl	8000b5c <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	e008      	b.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7fe ff06 	bl	8000b5c <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0a6      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d6a:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d6c:	6a1a      	ldr	r2, [r3, #32]
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4013      	ands	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d034      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23c0      	movs	r3, #192	; 0xc0
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d02c      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d8c:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a4a      	ldr	r2, [pc, #296]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	0249      	lsls	r1, r1, #9
 8001da0:	430a      	orrs	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001daa:	4945      	ldr	r1, [pc, #276]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d013      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fecd 	bl	8000b5c <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	e009      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe fec8 	bl	8000b5c <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	4a3c      	ldr	r2, [pc, #240]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e067      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001df6:	430a      	orrs	r2, r1
 8001df8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfa:	2317      	movs	r3, #23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e0a:	492f      	ldr	r1, [pc, #188]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	2203      	movs	r2, #3
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d009      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2220      	movs	r2, #32
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	029b      	lsls	r3, r3, #10
 8001e72:	4013      	ands	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e86:	430a      	orrs	r2, r1
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b006      	add	sp, #24
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	fffffcff 	.word	0xfffffcff
 8001ec0:	fffeffff 	.word	0xfffeffff
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	efffffff 	.word	0xefffffff
 8001ecc:	fffcffff 	.word	0xfffcffff

08001ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0a8      	b.n	8002034 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	2382      	movs	r3, #130	; 0x82
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d009      	beq.n	8001f0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
 8001efc:	e005      	b.n	8001f0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	225d      	movs	r2, #93	; 0x5d
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	225c      	movs	r2, #92	; 0x5c
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7fe fcc2 	bl	80008b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	225d      	movs	r2, #93	; 0x5d
 8001f30:	2102      	movs	r1, #2
 8001f32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	438a      	bics	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	23e0      	movs	r3, #224	; 0xe0
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d902      	bls.n	8001f56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e002      	b.n	8001f5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	015b      	lsls	r3, r3, #5
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	23f0      	movs	r3, #240	; 0xf0
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d008      	beq.n	8001f7a <HAL_SPI_Init+0xaa>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	23e0      	movs	r3, #224	; 0xe0
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d002      	beq.n	8001f7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	2382      	movs	r3, #130	; 0x82
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	2384      	movs	r3, #132	; 0x84
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	2102      	movs	r1, #2
 8001f96:	400b      	ands	r3, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6999      	ldr	r1, [r3, #24]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	400b      	ands	r3, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2138      	movs	r1, #56	; 0x38
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	401a      	ands	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	2204      	movs	r2, #4
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	400b      	ands	r3, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68d9      	ldr	r1, [r3, #12]
 8001ffa:	23f0      	movs	r3, #240	; 0xf0
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	400b      	ands	r3, r1
 8002000:	431a      	orrs	r2, r3
 8002002:	0011      	movs	r1, r2
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	015b      	lsls	r3, r3, #5
 800200a:	401a      	ands	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69da      	ldr	r2, [r3, #28]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4907      	ldr	r1, [pc, #28]	; (800203c <HAL_SPI_Init+0x16c>)
 8002020:	400a      	ands	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	225d      	movs	r2, #93	; 0x5d
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fffff7ff 	.word	0xfffff7ff

08002040 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	001a      	movs	r2, r3
 800204e:	1cbb      	adds	r3, r7, #2
 8002050:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002052:	2301      	movs	r3, #1
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002056:	2323      	movs	r3, #35	; 0x23
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	225c      	movs	r2, #92	; 0x5c
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_SPI_TransmitReceive+0x2c>
 8002068:	2302      	movs	r3, #2
 800206a:	e1b5      	b.n	80023d8 <HAL_SPI_TransmitReceive+0x398>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	225c      	movs	r2, #92	; 0x5c
 8002070:	2101      	movs	r1, #1
 8002072:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002074:	f7fe fd72 	bl	8000b5c <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800207c:	201b      	movs	r0, #27
 800207e:	183b      	adds	r3, r7, r0
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	215d      	movs	r1, #93	; 0x5d
 8002084:	5c52      	ldrb	r2, [r2, r1]
 8002086:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800208e:	2312      	movs	r3, #18
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	1cba      	adds	r2, r7, #2
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002098:	183b      	adds	r3, r7, r0
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d011      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x84>
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	2382      	movs	r3, #130	; 0x82
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d107      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <HAL_SPI_TransmitReceive+0x7a>
 80020b2:	183b      	adds	r3, r7, r0
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d004      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80020ba:	2323      	movs	r3, #35	; 0x23
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2202      	movs	r2, #2
 80020c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80020c2:	e17e      	b.n	80023c2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d006      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x98>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0x98>
 80020d0:	1cbb      	adds	r3, r7, #2
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80020d8:	2323      	movs	r3, #35	; 0x23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
    goto error;
 80020e0:	e16f      	b.n	80023c2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	225d      	movs	r2, #93	; 0x5d
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d003      	beq.n	80020f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	225d      	movs	r2, #93	; 0x5d
 80020f2:	2105      	movs	r1, #5
 80020f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1cba      	adds	r2, r7, #2
 8002106:	2146      	movs	r1, #70	; 0x46
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1cba      	adds	r2, r7, #2
 8002110:	2144      	movs	r1, #68	; 0x44
 8002112:	8812      	ldrh	r2, [r2, #0]
 8002114:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1cba      	adds	r2, r7, #2
 8002120:	8812      	ldrh	r2, [r2, #0]
 8002122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1cba      	adds	r2, r7, #2
 8002128:	8812      	ldrh	r2, [r2, #0]
 800212a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	23e0      	movs	r3, #224	; 0xe0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	429a      	cmp	r2, r3
 8002142:	d908      	bls.n	8002156 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	49a4      	ldr	r1, [pc, #656]	; (80023e0 <HAL_SPI_TransmitReceive+0x3a0>)
 8002150:	400a      	ands	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e008      	b.n	8002168 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0149      	lsls	r1, r1, #5
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	4013      	ands	r3, r2
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d007      	beq.n	8002186 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	23e0      	movs	r3, #224	; 0xe0
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	429a      	cmp	r2, r3
 8002190:	d800      	bhi.n	8002194 <HAL_SPI_TransmitReceive+0x154>
 8002192:	e07f      	b.n	8002294 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x168>
 800219c:	2312      	movs	r3, #18
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d000      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x168>
 80021a6:	e069      	b.n	800227c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ac:	881a      	ldrh	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021cc:	e056      	b.n	800227c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d11b      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x1d4>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d016      	beq.n	8002214 <HAL_SPI_TransmitReceive+0x1d4>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d113      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	881a      	ldrh	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	1c9a      	adds	r2, r3, #2
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2201      	movs	r2, #1
 800221c:	4013      	ands	r3, r2
 800221e:	2b01      	cmp	r3, #1
 8002220:	d11c      	bne.n	800225c <HAL_SPI_TransmitReceive+0x21c>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2246      	movs	r2, #70	; 0x46
 8002226:	5a9b      	ldrh	r3, [r3, r2]
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	b292      	uxth	r2, r2
 800223a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	1c9a      	adds	r2, r3, #2
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	5a9b      	ldrh	r3, [r3, r2]
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b299      	uxth	r1, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2246      	movs	r2, #70	; 0x46
 8002256:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800225c:	f7fe fc7e 	bl	8000b5c <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002268:	429a      	cmp	r2, r3
 800226a:	d807      	bhi.n	800227c <HAL_SPI_TransmitReceive+0x23c>
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	3301      	adds	r3, #1
 8002270:	d004      	beq.n	800227c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002272:	2323      	movs	r3, #35	; 0x23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
        goto error;
 800227a:	e0a2      	b.n	80023c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1a3      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x18e>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2246      	movs	r2, #70	; 0x46
 800228a:	5a9b      	ldrh	r3, [r3, r2]
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19d      	bne.n	80021ce <HAL_SPI_TransmitReceive+0x18e>
 8002292:	e085      	b.n	80023a0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x268>
 800229c:	2312      	movs	r3, #18
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d000      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x268>
 80022a6:	e070      	b.n	800238a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ce:	e05c      	b.n	800238a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2202      	movs	r2, #2
 80022d8:	4013      	ands	r3, r2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d11c      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x2d8>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_SPI_TransmitReceive+0x2d8>
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d114      	bne.n	8002318 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2201      	movs	r2, #1
 8002320:	4013      	ands	r3, r2
 8002322:	2b01      	cmp	r3, #1
 8002324:	d11e      	bne.n	8002364 <HAL_SPI_TransmitReceive+0x324>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2246      	movs	r2, #70	; 0x46
 800232a:	5a9b      	ldrh	r3, [r3, r2]
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d018      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	001a      	movs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	7812      	ldrb	r2, [r2, #0]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2246      	movs	r2, #70	; 0x46
 8002352:	5a9b      	ldrh	r3, [r3, r2]
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b299      	uxth	r1, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2246      	movs	r2, #70	; 0x46
 800235e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002360:	2301      	movs	r3, #1
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002364:	f7fe fbfa 	bl	8000b5c <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002370:	429a      	cmp	r2, r3
 8002372:	d802      	bhi.n	800237a <HAL_SPI_TransmitReceive+0x33a>
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	3301      	adds	r3, #1
 8002378:	d102      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x340>
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002380:	2323      	movs	r3, #35	; 0x23
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2203      	movs	r2, #3
 8002386:	701a      	strb	r2, [r3, #0]
        goto error;
 8002388:	e01b      	b.n	80023c2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d19d      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x290>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2246      	movs	r2, #70	; 0x46
 8002398:	5a9b      	ldrh	r3, [r3, r2]
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d197      	bne.n	80022d0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f94c 	bl	8002644 <SPI_EndRxTxTransaction>
 80023ac:	1e03      	subs	r3, r0, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80023b0:	2323      	movs	r3, #35	; 0x23
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	661a      	str	r2, [r3, #96]	; 0x60
 80023be:	e000      	b.n	80023c2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80023c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	225d      	movs	r2, #93	; 0x5d
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	225c      	movs	r2, #92	; 0x5c
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80023d2:	2323      	movs	r3, #35	; 0x23
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b00a      	add	sp, #40	; 0x28
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	ffffefff 	.word	0xffffefff

080023e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023f4:	f7fe fbb2 	bl	8000b5c <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	18d3      	adds	r3, r2, r3
 8002402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002404:	f7fe fbaa 	bl	8000b5c <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800240c:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	015b      	lsls	r3, r3, #5
 8002412:	0d1b      	lsrs	r3, r3, #20
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	4353      	muls	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241a:	e058      	b.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	3301      	adds	r3, #1
 8002420:	d055      	beq.n	80024ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002422:	f7fe fb9b 	bl	8000b5c <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	429a      	cmp	r2, r3
 8002430:	d902      	bls.n	8002438 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d142      	bne.n	80024be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	21e0      	movs	r1, #224	; 0xe0
 8002444:	438a      	bics	r2, r1
 8002446:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	2382      	movs	r3, #130	; 0x82
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	429a      	cmp	r2, r3
 8002452:	d113      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	429a      	cmp	r2, r3
 800245e:	d005      	beq.n	800246c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2140      	movs	r1, #64	; 0x40
 8002478:	438a      	bics	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	429a      	cmp	r2, r3
 8002486:	d110      	bne.n	80024aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	491a      	ldr	r1, [pc, #104]	; (80024fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002494:	400a      	ands	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	0189      	lsls	r1, r1, #6
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	225d      	movs	r2, #93	; 0x5d
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	225c      	movs	r2, #92	; 0x5c
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e017      	b.n	80024ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	425a      	negs	r2, r3
 80024de:	4153      	adcs	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	001a      	movs	r2, r3
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d197      	bne.n	800241c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b008      	add	sp, #32
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	20000000 	.word	0x20000000
 80024fc:	ffffdfff 	.word	0xffffdfff

08002500 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800250e:	2317      	movs	r3, #23
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002516:	f7fe fb21 	bl	8000b5c <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	18d3      	adds	r3, r2, r3
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002526:	f7fe fb19 	bl	8000b5c <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	0013      	movs	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	189b      	adds	r3, r3, r2
 8002540:	00da      	lsls	r2, r3, #3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	0d1b      	lsrs	r3, r3, #20
 8002546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002548:	4353      	muls	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800254c:	e068      	b.n	8002620 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	23c0      	movs	r3, #192	; 0xc0
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	429a      	cmp	r2, r3
 8002556:	d10a      	bne.n	800256e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	2117      	movs	r1, #23
 8002566:	187b      	adds	r3, r7, r1
 8002568:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800256a:	187b      	adds	r3, r7, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	d055      	beq.n	8002620 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002574:	f7fe faf2 	bl	8000b5c <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002580:	429a      	cmp	r2, r3
 8002582:	d902      	bls.n	800258a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	2b00      	cmp	r3, #0
 8002588:	d142      	bne.n	8002610 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	21e0      	movs	r1, #224	; 0xe0
 8002596:	438a      	bics	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	2382      	movs	r3, #130	; 0x82
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d113      	bne.n	80025ce <SPI_WaitFifoStateUntilTimeout+0xce>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d005      	beq.n	80025be <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d107      	bne.n	80025ce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2140      	movs	r1, #64	; 0x40
 80025ca:	438a      	bics	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d110      	bne.n	80025fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0189      	lsls	r1, r1, #6
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	225d      	movs	r2, #93	; 0x5d
 8002600:	2101      	movs	r1, #1
 8002602:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	225c      	movs	r2, #92	; 0x5c
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e010      	b.n	8002632 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	3b01      	subs	r3, #1
 800261e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d18e      	bne.n	800254e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b00a      	add	sp, #40	; 0x28
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20000000 	.word	0x20000000
 8002640:	ffffdfff 	.word	0xffffdfff

08002644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	0159      	lsls	r1, r3, #5
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	0013      	movs	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	f7ff ff4e 	bl	8002500 <SPI_WaitFifoStateUntilTimeout>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d007      	beq.n	8002678 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	2220      	movs	r2, #32
 800266e:	431a      	orrs	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e027      	b.n	80026c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	0013      	movs	r3, r2
 8002682:	2200      	movs	r2, #0
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	f7ff fead 	bl	80023e4 <SPI_WaitFlagStateUntilTimeout>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d007      	beq.n	800269e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	2220      	movs	r2, #32
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e014      	b.n	80026c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	23c0      	movs	r3, #192	; 0xc0
 80026a2:	00d9      	lsls	r1, r3, #3
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	0013      	movs	r3, r2
 80026ac:	2200      	movs	r2, #0
 80026ae:	f7ff ff27 	bl	8002500 <SPI_WaitFifoStateUntilTimeout>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d007      	beq.n	80026c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	2220      	movs	r2, #32
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e000      	b.n	80026c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e042      	b.n	8002768 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223d      	movs	r2, #61	; 0x3d
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d107      	bne.n	80026fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223c      	movs	r2, #60	; 0x3c
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fe f925 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	223d      	movs	r2, #61	; 0x3d
 8002702:	2102      	movs	r1, #2
 8002704:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f000 f94b 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2246      	movs	r2, #70	; 0x46
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	223e      	movs	r2, #62	; 0x3e
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223f      	movs	r2, #63	; 0x3f
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2241      	movs	r2, #65	; 0x41
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2242      	movs	r2, #66	; 0x42
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2243      	movs	r2, #67	; 0x43
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2244      	movs	r2, #68	; 0x44
 8002752:	2101      	movs	r1, #1
 8002754:	5499      	strb	r1, [r3, r2]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2245      	movs	r2, #69	; 0x45
 800275a:	2101      	movs	r1, #1
 800275c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	223d      	movs	r2, #61	; 0x3d
 8002762:	2101      	movs	r1, #1
 8002764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	223d      	movs	r2, #61	; 0x3d
 800277c:	5c9b      	ldrb	r3, [r3, r2]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d001      	beq.n	8002788 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e033      	b.n	80027f0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	223d      	movs	r2, #61	; 0x3d
 800278c:	2102      	movs	r1, #2
 800278e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_TIM_Base_Start+0x88>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <HAL_TIM_Base_Start+0x4a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	05db      	lsls	r3, r3, #23
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d009      	beq.n	80027ba <HAL_TIM_Base_Start+0x4a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_TIM_Base_Start+0x8c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_TIM_Base_Start+0x4a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a12      	ldr	r2, [pc, #72]	; (8002800 <HAL_TIM_Base_Start+0x90>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d111      	bne.n	80027de <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2207      	movs	r2, #7
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b06      	cmp	r3, #6
 80027ca:	d010      	beq.n	80027ee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e007      	b.n	80027ee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400
 8002800:	40014000 	.word	0x40014000

08002804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800280e:	230f      	movs	r3, #15
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	223c      	movs	r2, #60	; 0x3c
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIM_ConfigClockSource+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e0bc      	b.n	800299e <HAL_TIM_ConfigClockSource+0x19a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	223c      	movs	r2, #60	; 0x3c
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	223d      	movs	r2, #61	; 0x3d
 8002830:	2102      	movs	r1, #2
 8002832:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2277      	movs	r2, #119	; 0x77
 8002840:	4393      	bics	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	0192      	lsls	r2, r2, #6
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xde>
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	0192      	lsls	r2, r2, #6
 8002864:	4293      	cmp	r3, r2
 8002866:	d900      	bls.n	800286a <HAL_TIM_ConfigClockSource+0x66>
 8002868:	e088      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	0152      	lsls	r2, r2, #5
 800286e:	4293      	cmp	r3, r2
 8002870:	d100      	bne.n	8002874 <HAL_TIM_ConfigClockSource+0x70>
 8002872:	e088      	b.n	8002986 <HAL_TIM_ConfigClockSource+0x182>
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	0152      	lsls	r2, r2, #5
 8002878:	4293      	cmp	r3, r2
 800287a:	d900      	bls.n	800287e <HAL_TIM_ConfigClockSource+0x7a>
 800287c:	e07e      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800287e:	2b70      	cmp	r3, #112	; 0x70
 8002880:	d018      	beq.n	80028b4 <HAL_TIM_ConfigClockSource+0xb0>
 8002882:	d900      	bls.n	8002886 <HAL_TIM_ConfigClockSource+0x82>
 8002884:	e07a      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 8002886:	2b60      	cmp	r3, #96	; 0x60
 8002888:	d04f      	beq.n	800292a <HAL_TIM_ConfigClockSource+0x126>
 800288a:	d900      	bls.n	800288e <HAL_TIM_ConfigClockSource+0x8a>
 800288c:	e076      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800288e:	2b50      	cmp	r3, #80	; 0x50
 8002890:	d03b      	beq.n	800290a <HAL_TIM_ConfigClockSource+0x106>
 8002892:	d900      	bls.n	8002896 <HAL_TIM_ConfigClockSource+0x92>
 8002894:	e072      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	d057      	beq.n	800294a <HAL_TIM_ConfigClockSource+0x146>
 800289a:	d900      	bls.n	800289e <HAL_TIM_ConfigClockSource+0x9a>
 800289c:	e06e      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 800289e:	2b30      	cmp	r3, #48	; 0x30
 80028a0:	d063      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028a2:	d86b      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d060      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028a8:	d868      	bhi.n	800297c <HAL_TIM_ConfigClockSource+0x178>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d05d      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d05b      	beq.n	800296a <HAL_TIM_ConfigClockSource+0x166>
 80028b2:	e063      	b.n	800297c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f000 f96c 	bl	8002ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2277      	movs	r2, #119	; 0x77
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
      break;
 80028e0:	e052      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f000 f955 	bl	8002ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	01c9      	lsls	r1, r1, #7
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
      break;
 8002908:	e03e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6859      	ldr	r1, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	001a      	movs	r2, r3
 8002918:	f000 f8c8 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2150      	movs	r1, #80	; 0x50
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f922 	bl	8002b6c <TIM_ITRx_SetConfig>
      break;
 8002928:	e02e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	001a      	movs	r2, r3
 8002938:	f000 f8e6 	bl	8002b08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2160      	movs	r1, #96	; 0x60
 8002942:	0018      	movs	r0, r3
 8002944:	f000 f912 	bl	8002b6c <TIM_ITRx_SetConfig>
      break;
 8002948:	e01e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6859      	ldr	r1, [r3, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	001a      	movs	r2, r3
 8002958:	f000 f8a8 	bl	8002aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2140      	movs	r1, #64	; 0x40
 8002962:	0018      	movs	r0, r3
 8002964:	f000 f902 	bl	8002b6c <TIM_ITRx_SetConfig>
      break;
 8002968:	e00e      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0019      	movs	r1, r3
 8002974:	0010      	movs	r0, r2
 8002976:	f000 f8f9 	bl	8002b6c <TIM_ITRx_SetConfig>
      break;
 800297a:	e005      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
      break;
 8002984:	e000      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002986:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223d      	movs	r2, #61	; 0x3d
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	223c      	movs	r2, #60	; 0x3c
 8002994:	2100      	movs	r1, #0
 8002996:	5499      	strb	r1, [r3, r2]

  return status;
 8002998:	230f      	movs	r3, #15
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	781b      	ldrb	r3, [r3, #0]
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	ffff00ff 	.word	0xffff00ff

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a34      	ldr	r2, [pc, #208]	; (8002a90 <TIM_Base_SetConfig+0xe4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d008      	beq.n	80029d6 <TIM_Base_SetConfig+0x2a>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	05db      	lsls	r3, r3, #23
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x2a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <TIM_Base_SetConfig+0xe8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2270      	movs	r2, #112	; 0x70
 80029da:	4393      	bics	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <TIM_Base_SetConfig+0xe4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d018      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d013      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <TIM_Base_SetConfig+0xe8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <TIM_Base_SetConfig+0xec>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <TIM_Base_SetConfig+0xf0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <TIM_Base_SetConfig+0xf4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0x76>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <TIM_Base_SetConfig+0xf8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <TIM_Base_SetConfig+0xfc>)
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	4393      	bics	r3, r2
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <TIM_Base_SetConfig+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <TIM_Base_SetConfig+0xf0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	; (8002aa0 <TIM_Base_SetConfig+0xf4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_Base_SetConfig+0xce>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <TIM_Base_SetConfig+0xf8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d103      	bne.n	8002a82 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	615a      	str	r2, [r3, #20]
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40002000 	.word	0x40002000
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40014400 	.word	0x40014400
 8002aa4:	40014800 	.word	0x40014800
 8002aa8:	fffffcff 	.word	0xfffffcff

08002aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	22f0      	movs	r2, #240	; 0xf0
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	220a      	movs	r2, #10
 8002ae8:	4393      	bics	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	4393      	bics	r3, r2
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <TIM_TI2_ConfigInputStage+0x60>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	031b      	lsls	r3, r3, #12
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	22a0      	movs	r2, #160	; 0xa0
 8002b44:	4393      	bics	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	46bd      	mov	sp, r7
 8002b62:	b006      	add	sp, #24
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	ffff0fff 	.word	0xffff0fff

08002b6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2270      	movs	r2, #112	; 0x70
 8002b80:	4393      	bics	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <TIM_ETR_SetConfig+0x3c>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	021a      	lsls	r2, r3, #8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b006      	add	sp, #24
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	ffff00ff 	.word	0xffff00ff

08002be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	223c      	movs	r2, #60	; 0x3c
 8002bee:	5c9b      	ldrb	r3, [r3, r2]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e047      	b.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	223c      	movs	r2, #60	; 0x3c
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223d      	movs	r2, #61	; 0x3d
 8002c04:	2102      	movs	r1, #2
 8002c06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2270      	movs	r2, #112	; 0x70
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00f      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	05db      	lsls	r3, r3, #23
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d009      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10c      	bne.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	4393      	bics	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223d      	movs	r2, #61	; 0x3d
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223c      	movs	r2, #60	; 0x3c
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b004      	add	sp, #16
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40012c00 	.word	0x40012c00
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40014000 	.word	0x40014000

08002c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e044      	b.n	8002d38 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2274      	movs	r2, #116	; 0x74
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fd fe5f 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2224      	movs	r2, #36	; 0x24
 8002cca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f830 	bl	8002d44 <UART_SetConfig>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e024      	b.n	8002d38 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f9ab 	bl	8003054 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	490d      	ldr	r1, [pc, #52]	; (8002d40 <HAL_UART_Init+0xa4>)
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	212a      	movs	r1, #42	; 0x2a
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f000 fa43 	bl	80031bc <UART_CheckIdleState>
 8002d36:	0003      	movs	r3, r0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	ffffb7ff 	.word	0xffffb7ff

08002d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d4c:	231e      	movs	r3, #30
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4aaf      	ldr	r2, [pc, #700]	; (8003030 <UART_SetConfig+0x2ec>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4aaa      	ldr	r2, [pc, #680]	; (8003034 <UART_SetConfig+0x2f0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4aa1      	ldr	r2, [pc, #644]	; (8003038 <UART_SetConfig+0x2f4>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a9d      	ldr	r2, [pc, #628]	; (800303c <UART_SetConfig+0x2f8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d127      	bne.n	8002e1a <UART_SetConfig+0xd6>
 8002dca:	4b9d      	ldr	r3, [pc, #628]	; (8003040 <UART_SetConfig+0x2fc>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	2203      	movs	r2, #3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d00d      	beq.n	8002df2 <UART_SetConfig+0xae>
 8002dd6:	d81b      	bhi.n	8002e10 <UART_SetConfig+0xcc>
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d014      	beq.n	8002e06 <UART_SetConfig+0xc2>
 8002ddc:	d818      	bhi.n	8002e10 <UART_SetConfig+0xcc>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <UART_SetConfig+0xa4>
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00a      	beq.n	8002dfc <UART_SetConfig+0xb8>
 8002de6:	e013      	b.n	8002e10 <UART_SetConfig+0xcc>
 8002de8:	231f      	movs	r3, #31
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e065      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002df2:	231f      	movs	r3, #31
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e060      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002dfc:	231f      	movs	r3, #31
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e05b      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e06:	231f      	movs	r3, #31
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	e056      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e10:	231f      	movs	r3, #31
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2210      	movs	r2, #16
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e051      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a89      	ldr	r2, [pc, #548]	; (8003044 <UART_SetConfig+0x300>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d134      	bne.n	8002e8e <UART_SetConfig+0x14a>
 8002e24:	4b86      	ldr	r3, [pc, #536]	; (8003040 <UART_SetConfig+0x2fc>)
 8002e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e28:	23c0      	movs	r3, #192	; 0xc0
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	22c0      	movs	r2, #192	; 0xc0
 8002e30:	0292      	lsls	r2, r2, #10
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d017      	beq.n	8002e66 <UART_SetConfig+0x122>
 8002e36:	22c0      	movs	r2, #192	; 0xc0
 8002e38:	0292      	lsls	r2, r2, #10
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d822      	bhi.n	8002e84 <UART_SetConfig+0x140>
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	0292      	lsls	r2, r2, #10
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d019      	beq.n	8002e7a <UART_SetConfig+0x136>
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	0292      	lsls	r2, r2, #10
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d81a      	bhi.n	8002e84 <UART_SetConfig+0x140>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <UART_SetConfig+0x118>
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	0252      	lsls	r2, r2, #9
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00a      	beq.n	8002e70 <UART_SetConfig+0x12c>
 8002e5a:	e013      	b.n	8002e84 <UART_SetConfig+0x140>
 8002e5c:	231f      	movs	r3, #31
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e02b      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e66:	231f      	movs	r3, #31
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e026      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e70:	231f      	movs	r3, #31
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	2204      	movs	r2, #4
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e021      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e7a:	231f      	movs	r3, #31
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	2208      	movs	r2, #8
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e01c      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e84:	231f      	movs	r3, #31
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	2210      	movs	r2, #16
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e017      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a6d      	ldr	r2, [pc, #436]	; (8003048 <UART_SetConfig+0x304>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d104      	bne.n	8002ea2 <UART_SetConfig+0x15e>
 8002e98:	231f      	movs	r3, #31
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a69      	ldr	r2, [pc, #420]	; (800304c <UART_SetConfig+0x308>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d104      	bne.n	8002eb6 <UART_SetConfig+0x172>
 8002eac:	231f      	movs	r3, #31
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e003      	b.n	8002ebe <UART_SetConfig+0x17a>
 8002eb6:	231f      	movs	r3, #31
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2210      	movs	r2, #16
 8002ebc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d15d      	bne.n	8002f86 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002eca:	231f      	movs	r3, #31
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d015      	beq.n	8002f00 <UART_SetConfig+0x1bc>
 8002ed4:	dc18      	bgt.n	8002f08 <UART_SetConfig+0x1c4>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00d      	beq.n	8002ef6 <UART_SetConfig+0x1b2>
 8002eda:	dc15      	bgt.n	8002f08 <UART_SetConfig+0x1c4>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <UART_SetConfig+0x1a2>
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x1ac>
 8002ee4:	e010      	b.n	8002f08 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee6:	f7fe fedf 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002eea:	0003      	movs	r3, r0
 8002eec:	61bb      	str	r3, [r7, #24]
        break;
 8002eee:	e012      	b.n	8002f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef0:	4b57      	ldr	r3, [pc, #348]	; (8003050 <UART_SetConfig+0x30c>)
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e00f      	b.n	8002f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef6:	f7fe fe4d 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002efa:	0003      	movs	r3, r0
 8002efc:	61bb      	str	r3, [r7, #24]
        break;
 8002efe:	e00a      	b.n	8002f16 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	61bb      	str	r3, [r7, #24]
        break;
 8002f06:	e006      	b.n	8002f16 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f0c:	231e      	movs	r3, #30
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
        break;
 8002f14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d100      	bne.n	8002f1e <UART_SetConfig+0x1da>
 8002f1c:	e07b      	b.n	8003016 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	18d2      	adds	r2, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	0019      	movs	r1, r3
 8002f30:	0010      	movs	r0, r2
 8002f32:	f7fd f8e9 	bl	8000108 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	d91c      	bls.n	8002f7c <UART_SetConfig+0x238>
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	025b      	lsls	r3, r3, #9
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d217      	bcs.n	8002f7c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	200e      	movs	r0, #14
 8002f52:	183b      	adds	r3, r7, r0
 8002f54:	210f      	movs	r1, #15
 8002f56:	438a      	bics	r2, r1
 8002f58:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2207      	movs	r2, #7
 8002f62:	4013      	ands	r3, r2
 8002f64:	b299      	uxth	r1, r3
 8002f66:	183b      	adds	r3, r7, r0
 8002f68:	183a      	adds	r2, r7, r0
 8002f6a:	8812      	ldrh	r2, [r2, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	183a      	adds	r2, r7, r0
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e04c      	b.n	8003016 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002f7c:	231e      	movs	r3, #30
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e047      	b.n	8003016 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f86:	231f      	movs	r3, #31
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d015      	beq.n	8002fbc <UART_SetConfig+0x278>
 8002f90:	dc18      	bgt.n	8002fc4 <UART_SetConfig+0x280>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d00d      	beq.n	8002fb2 <UART_SetConfig+0x26e>
 8002f96:	dc15      	bgt.n	8002fc4 <UART_SetConfig+0x280>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <UART_SetConfig+0x25e>
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d005      	beq.n	8002fac <UART_SetConfig+0x268>
 8002fa0:	e010      	b.n	8002fc4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa2:	f7fe fe81 	bl	8001ca8 <HAL_RCC_GetPCLK1Freq>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	61bb      	str	r3, [r7, #24]
        break;
 8002faa:	e012      	b.n	8002fd2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fac:	4b28      	ldr	r3, [pc, #160]	; (8003050 <UART_SetConfig+0x30c>)
 8002fae:	61bb      	str	r3, [r7, #24]
        break;
 8002fb0:	e00f      	b.n	8002fd2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb2:	f7fe fdef 	bl	8001b94 <HAL_RCC_GetSysClockFreq>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	61bb      	str	r3, [r7, #24]
        break;
 8002fba:	e00a      	b.n	8002fd2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	61bb      	str	r3, [r7, #24]
        break;
 8002fc2:	e006      	b.n	8002fd2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc8:	231e      	movs	r3, #30
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
        break;
 8002fd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01e      	beq.n	8003016 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	085a      	lsrs	r2, r3, #1
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	18d2      	adds	r2, r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	0010      	movs	r0, r2
 8002fea:	f7fd f88d 	bl	8000108 <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0f      	cmp	r3, #15
 8002ff8:	d909      	bls.n	800300e <UART_SetConfig+0x2ca>
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	025b      	lsls	r3, r3, #9
 8003000:	429a      	cmp	r2, r3
 8003002:	d204      	bcs.n	800300e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	e003      	b.n	8003016 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800300e:	231e      	movs	r3, #30
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003022:	231e      	movs	r3, #30
 8003024:	18fb      	adds	r3, r7, r3
 8003026:	781b      	ldrb	r3, [r3, #0]
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b008      	add	sp, #32
 800302e:	bd80      	pop	{r7, pc}
 8003030:	efff69f3 	.word	0xefff69f3
 8003034:	ffffcfff 	.word	0xffffcfff
 8003038:	fffff4ff 	.word	0xfffff4ff
 800303c:	40013800 	.word	0x40013800
 8003040:	40021000 	.word	0x40021000
 8003044:	40004400 	.word	0x40004400
 8003048:	40004800 	.word	0x40004800
 800304c:	40004c00 	.word	0x40004c00
 8003050:	007a1200 	.word	0x007a1200

08003054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	d00b      	beq.n	800307e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a4a      	ldr	r2, [pc, #296]	; (8003198 <UART_AdvFeatureConfig+0x144>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	d00b      	beq.n	80030a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a43      	ldr	r2, [pc, #268]	; (800319c <UART_AdvFeatureConfig+0x148>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <UART_AdvFeatureConfig+0x14c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2208      	movs	r2, #8
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <UART_AdvFeatureConfig+0x150>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	2210      	movs	r2, #16
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00b      	beq.n	8003106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <UART_AdvFeatureConfig+0x154>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	0019      	movs	r1, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	2220      	movs	r2, #32
 800310c:	4013      	ands	r3, r2
 800310e:	d00b      	beq.n	8003128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <UART_AdvFeatureConfig+0x158>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	4013      	ands	r3, r2
 8003130:	d01d      	beq.n	800316e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <UART_AdvFeatureConfig+0x15c>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	035b      	lsls	r3, r3, #13
 8003152:	429a      	cmp	r2, r3
 8003154:	d10b      	bne.n	800316e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <UART_AdvFeatureConfig+0x160>)
 800315e:	4013      	ands	r3, r2
 8003160:	0019      	movs	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2280      	movs	r2, #128	; 0x80
 8003174:	4013      	ands	r3, r2
 8003176:	d00b      	beq.n	8003190 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <UART_AdvFeatureConfig+0x164>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	fffdffff 	.word	0xfffdffff
 800319c:	fffeffff 	.word	0xfffeffff
 80031a0:	fffbffff 	.word	0xfffbffff
 80031a4:	ffff7fff 	.word	0xffff7fff
 80031a8:	ffffefff 	.word	0xffffefff
 80031ac:	ffffdfff 	.word	0xffffdfff
 80031b0:	ffefffff 	.word	0xffefffff
 80031b4:	ff9fffff 	.word	0xff9fffff
 80031b8:	fff7ffff 	.word	0xfff7ffff

080031bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	2100      	movs	r1, #0
 80031ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031cc:	f7fd fcc6 	bl	8000b5c <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2208      	movs	r2, #8
 80031dc:	4013      	ands	r3, r2
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d10c      	bne.n	80031fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	0391      	lsls	r1, r2, #14
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4a17      	ldr	r2, [pc, #92]	; (8003248 <UART_CheckIdleState+0x8c>)
 80031ec:	9200      	str	r2, [sp, #0]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f000 f82c 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e021      	b.n	8003240 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2204      	movs	r2, #4
 8003204:	4013      	ands	r3, r2
 8003206:	2b04      	cmp	r3, #4
 8003208:	d10c      	bne.n	8003224 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	03d1      	lsls	r1, r2, #15
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <UART_CheckIdleState+0x8c>)
 8003214:	9200      	str	r2, [sp, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	f000 f818 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d001      	beq.n	8003224 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e00d      	b.n	8003240 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2274      	movs	r2, #116	; 0x74
 800323a:	2100      	movs	r1, #0
 800323c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}
 8003248:	01ffffff 	.word	0x01ffffff

0800324c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b094      	sub	sp, #80	; 0x50
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	e0a3      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003260:	3301      	adds	r3, #1
 8003262:	d100      	bne.n	8003266 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003264:	e09f      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fd fc79 	bl	8000b5c <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <UART_WaitOnFlagUntilTimeout+0x30>
 8003276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003278:	2b00      	cmp	r3, #0
 800327a:	d13d      	bne.n	80032f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327c:	f3ef 8310 	mrs	r3, PRIMASK
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003284:	647b      	str	r3, [r7, #68]	; 0x44
 8003286:	2301      	movs	r3, #1
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	f383 8810 	msr	PRIMASK, r3
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	494c      	ldr	r1, [pc, #304]	; (80033d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	643b      	str	r3, [r7, #64]	; 0x40
 80032b8:	2301      	movs	r3, #1
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2101      	movs	r1, #1
 80032d0:	438a      	bics	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2274      	movs	r2, #116	; 0x74
 80032f0:	2100      	movs	r1, #0
 80032f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e067      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2204      	movs	r2, #4
 8003300:	4013      	ands	r3, r2
 8003302:	d050      	beq.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	401a      	ands	r2, r3
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	429a      	cmp	r2, r3
 8003316:	d146      	bne.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8310 	mrs	r3, PRIMASK
 8003326:	613b      	str	r3, [r7, #16]
  return(result);
 8003328:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	2301      	movs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4923      	ldr	r1, [pc, #140]	; (80033d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	61fb      	str	r3, [r7, #28]
  return(result);
 800335a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	64bb      	str	r3, [r7, #72]	; 0x48
 800335e:	2301      	movs	r3, #1
 8003360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	438a      	bics	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	2120      	movs	r1, #32
 8003398:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2274      	movs	r2, #116	; 0x74
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e010      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	425a      	negs	r2, r3
 80033b6:	4153      	adcs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	001a      	movs	r2, r3
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d100      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80033c4:	e74b      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b014      	add	sp, #80	; 0x50
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	fffffe5f 	.word	0xfffffe5f

080033d4 <_ZN3PSR6CANBusC1ER19__CAN_HandleTypeDefRKNS0_6ConfigE>:
#include "can_lib.h"

namespace PSR
{

CANBus::CANBus(CANBus::Interface& interface, const CANBus::Config& config)
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
    : _interface(interface), _config(config), _rxCallback(NULL)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033ee:	c313      	stmia	r3!, {r0, r1, r4}
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
{
}
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b005      	add	sp, #20
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <_ZN3PSR6CANBus4InitEv>:

void CANBus::Init()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef filter;

    // Config filter ranges
    filter.FilterMaskIdLow  = (uint16_t)this->_config.FilterMask;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	b29b      	uxth	r3, r3
 800340e:	001a      	movs	r2, r3
 8003410:	2108      	movs	r1, #8
 8003412:	187b      	adds	r3, r7, r1
 8003414:	60da      	str	r2, [r3, #12]
    filter.FilterMaskIdHigh = (uint16_t)(this->_config.FilterMask >> 16);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b29b      	uxth	r3, r3
 800341e:	001a      	movs	r2, r3
 8003420:	187b      	adds	r3, r7, r1
 8003422:	609a      	str	r2, [r3, #8]
    filter.FilterMode       = CAN_FILTERMODE_IDLIST;
 8003424:	187b      	adds	r3, r7, r1
 8003426:	2201      	movs	r2, #1
 8003428:	619a      	str	r2, [r3, #24]

    // Config filter banks
    filter.FilterBank           = 0;
 800342a:	187b      	adds	r3, r7, r1
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
    filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
    filter.FilterActivation     = ENABLE;
 8003436:	187b      	adds	r3, r7, r1
 8003438:	2201      	movs	r2, #1
 800343a:	621a      	str	r2, [r3, #32]
    filter.FilterScale          = CAN_FILTERSCALE_32BIT;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2201      	movs	r2, #1
 8003440:	61da      	str	r2, [r3, #28]

    // TODO: Fully understand filter setup
    // HAL_CAN_ConfigFilter(this->_interface, &filter);

    this->_interface.Init.AutoRetransmission = this->_config.AutoRetransmit ? ENABLE : DISABLE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7a1b      	ldrb	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <_ZN3PSR6CANBus4InitEv+0x4e>
 800344a:	2201      	movs	r2, #1
 800344c:	e000      	b.n	8003450 <_ZN3PSR6CANBus4InitEv+0x50>
 800344e:	2200      	movs	r2, #0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	76da      	strb	r2, [r3, #27]
    HAL_CAN_Start(&this->_interface);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fcaa 	bl	8000db4 <HAL_CAN_Start>
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b00c      	add	sp, #48	; 0x30
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZN3PSR7VescCANC1ERNS_6CANBusEh>:
#include "can_lib.h"

namespace PSR
{

VescCAN::VescCAN(CANBus& can, const uint8_t controllerId)
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	701a      	strb	r2, [r3, #0]
    : _can(can), _controllerId(controllerId)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1dfa      	adds	r2, r7, #7
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	711a      	strb	r2, [r3, #4]
{
}
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b004      	add	sp, #16
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <__libc_init_array>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	2600      	movs	r6, #0
 8003494:	4d0c      	ldr	r5, [pc, #48]	; (80034c8 <__libc_init_array+0x38>)
 8003496:	4c0d      	ldr	r4, [pc, #52]	; (80034cc <__libc_init_array+0x3c>)
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	42a6      	cmp	r6, r4
 800349e:	d109      	bne.n	80034b4 <__libc_init_array+0x24>
 80034a0:	2600      	movs	r6, #0
 80034a2:	f000 f821 	bl	80034e8 <_init>
 80034a6:	4d0a      	ldr	r5, [pc, #40]	; (80034d0 <__libc_init_array+0x40>)
 80034a8:	4c0a      	ldr	r4, [pc, #40]	; (80034d4 <__libc_init_array+0x44>)
 80034aa:	1b64      	subs	r4, r4, r5
 80034ac:	10a4      	asrs	r4, r4, #2
 80034ae:	42a6      	cmp	r6, r4
 80034b0:	d105      	bne.n	80034be <__libc_init_array+0x2e>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	00b3      	lsls	r3, r6, #2
 80034b6:	58eb      	ldr	r3, [r5, r3]
 80034b8:	4798      	blx	r3
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7ee      	b.n	800349c <__libc_init_array+0xc>
 80034be:	00b3      	lsls	r3, r6, #2
 80034c0:	58eb      	ldr	r3, [r5, r3]
 80034c2:	4798      	blx	r3
 80034c4:	3601      	adds	r6, #1
 80034c6:	e7f2      	b.n	80034ae <__libc_init_array+0x1e>
 80034c8:	08003538 	.word	0x08003538
 80034cc:	08003538 	.word	0x08003538
 80034d0:	08003538 	.word	0x08003538
 80034d4:	0800353c 	.word	0x0800353c

080034d8 <memset>:
 80034d8:	0003      	movs	r3, r0
 80034da:	1882      	adds	r2, r0, r2
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	7019      	strb	r1, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <_init>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr

080034f4 <_fini>:
 80034f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fa:	bc08      	pop	{r3}
 80034fc:	469e      	mov	lr, r3
 80034fe:	4770      	bx	lr
